package com.geoland.kfis.model;

// Generated Dec 18, 2015 4:36:20 PM by Hibernate Tools 4.0.0

import com.geoland.framework.persistence.base.*;

import org.hibernate.annotations.Type;
import org.hibernate.annotations.TypeDef;
import org.hibernate.spatial.GeometryType;
import com.vividsolutions.jts.geom.Geometry;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.annotations.GenericGenerator;

// TODO: Auto-generated Javadoc
/**
 * Request generated by hbm2java.
 */
@Entity
@Table(name = "tfal_request", schema = "public")
@TypeDef(name = "geometry", typeClass = GeometryType.class)
public class Request extends AbstractPersistentObject implements
		java.io.Serializable {

	/** The id. */
	private Long id;
	
	/** The request type. */
	private RequestType requestType;
	
	/** The request status. */
	private RequestStatus requestStatus;
	
	/** The person by person id. */
	private Person personByPersonId;
	
	/** The person by created by. */
	private Person personByCreatedBy;
	
	/** The contractor. */
	private Contractor contractor;
	
	/** The start lease. */
	private Date startLease;
	
	/** The end lease. */
	private Date endLease;
	
	/** The lease date. */
	private Date leaseDate;
	
	/** The active. */
	private boolean active;
	
	/** The area. */
	private Double area;
	
	/** The geom. */
	private Geometry theGeom;
	
	/** The price. */
	private Double price;
	
	/** The cad parcel requests. */
	private Set<CadParcelRequest> cadParcelRequests = new HashSet<CadParcelRequest>(
			0);
	
	/** The request coords. */
	private Set<RequestCoord> requestCoords = new HashSet<RequestCoord>(0);
	
	/** The request statuses. */
	private Set<RequestStatus> requestStatuses = new HashSet<RequestStatus>(0);

	/**
	 * Instantiates a new request.
	 */
	public Request() {
	}

	/**
	 * Instantiates a new request.
	 *
	 * @param requestType the request type
	 * @param personByCreatedBy the person by created by
	 * @param startLease the start lease
	 * @param endLease the end lease
	 * @param leaseDate the lease date
	 * @param active the active
	 * @param area the area
	 */
	public Request(RequestType requestType, Person personByCreatedBy,
			Date startLease, Date endLease, Date leaseDate, boolean active,
			Double area) {
		this.requestType = requestType;
		this.personByCreatedBy = personByCreatedBy;
		this.startLease = startLease;
		this.endLease = endLease;
		this.leaseDate = leaseDate;
		this.active = active;
		this.area = area;
	}

	/**
	 * Instantiates a new request.
	 *
	 * @param requestType the request type
	 * @param requestStatus the request status
	 * @param personByPersonId the person by person id
	 * @param personByCreatedBy the person by created by
	 * @param contractor the contractor
	 * @param startLease the start lease
	 * @param endLease the end lease
	 * @param leaseDate the lease date
	 * @param active the active
	 * @param area the area
	 * @param theGeom the the geom
	 * @param price the price
	 * @param cadParcelRequests the cad parcel requests
	 * @param requestCoords the request coords
	 * @param requestStatuses the request statuses
	 */
	public Request(RequestType requestType, RequestStatus requestStatus,
			Person personByPersonId, Person personByCreatedBy,
			Contractor contractor, Date startLease, Date endLease,
			Date leaseDate, boolean active, Double area, Geometry theGeom,
			Double price, Set<CadParcelRequest> cadParcelRequests,
			Set<RequestCoord> requestCoords, Set<RequestStatus> requestStatuses) {
		this.requestType = requestType;
		this.requestStatus = requestStatus;
		this.personByPersonId = personByPersonId;
		this.personByCreatedBy = personByCreatedBy;
		this.contractor = contractor;
		this.startLease = startLease;
		this.endLease = endLease;
		this.leaseDate = leaseDate;
		this.active = active;
		this.area = area;
		this.theGeom = theGeom;
		this.price = price;
		this.cadParcelRequests = cadParcelRequests;
		this.requestCoords = requestCoords;
		this.requestStatuses = requestStatuses;
	}

	/* (non-Javadoc)
	 * @see com.geoland.framework.persistence.base.AbstractPersistentObject#getId()
	 */
	@GenericGenerator(name = "generator", strategy = "increment")
	@Id
	@GeneratedValue(generator = "generator")
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	/* (non-Javadoc)
	 * @see com.geoland.framework.persistence.base.AbstractPersistentObject#setId(java.lang.Long)
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Gets the request type.
	 *
	 * @return the request type
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "tfal_request_type_id", nullable = false)
	public RequestType getRequestType() {
		return this.requestType;
	}

	/**
	 * Sets the request type.
	 *
	 * @param requestType the new request type
	 */
	public void setRequestType(RequestType requestType) {
		this.requestType = requestType;
	}

	/**
	 * Gets the request status.
	 *
	 * @return the request status
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "current_status_id")
	public RequestStatus getRequestStatus() {
		return this.requestStatus;
	}

	/**
	 * Sets the request status.
	 *
	 * @param requestStatus the new request status
	 */
	public void setRequestStatus(RequestStatus requestStatus) {
		this.requestStatus = requestStatus;
	}

	/**
	 * Gets the person by person id.
	 *
	 * @return the person by person id
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "person_id")
	public Person getPersonByPersonId() {
		return this.personByPersonId;
	}

	/**
	 * Sets the person by person id.
	 *
	 * @param personByPersonId the new person by person id
	 */
	public void setPersonByPersonId(Person personByPersonId) {
		this.personByPersonId = personByPersonId;
	}

	/**
	 * Gets the person by created by.
	 *
	 * @return the person by created by
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "created_by", nullable = false)
	public Person getPersonByCreatedBy() {
		return this.personByCreatedBy;
	}

	/**
	 * Sets the person by created by.
	 *
	 * @param personByCreatedBy the new person by created by
	 */
	public void setPersonByCreatedBy(Person personByCreatedBy) {
		this.personByCreatedBy = personByCreatedBy;
	}

	/**
	 * Gets the contractor.
	 *
	 * @return the contractor
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "company_id")
	public Contractor getContractor() {
		return this.contractor;
	}

	/**
	 * Sets the contractor.
	 *
	 * @param contractor the new contractor
	 */
	public void setContractor(Contractor contractor) {
		this.contractor = contractor;
	}

	/**
	 * Gets the start lease.
	 *
	 * @return the start lease
	 */
	@Temporal(TemporalType.DATE)
	@Column(name = "start_lease", nullable = false, length = 13)
	public Date getStartLease() {
		return this.startLease;
	}

	/**
	 * Sets the start lease.
	 *
	 * @param startLease the new start lease
	 */
	public void setStartLease(Date startLease) {
		this.startLease = startLease;
	}

	/**
	 * Gets the end lease.
	 *
	 * @return the end lease
	 */
	@Temporal(TemporalType.DATE)
	@Column(name = "end_lease", nullable = false, length = 13)
	public Date getEndLease() {
		return this.endLease;
	}

	/**
	 * Sets the end lease.
	 *
	 * @param endLease the new end lease
	 */
	public void setEndLease(Date endLease) {
		this.endLease = endLease;
	}

	/**
	 * Gets the lease date.
	 *
	 * @return the lease date
	 */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "lease_date", nullable = false, length = 29)
	public Date getLeaseDate() {
		return this.leaseDate;
	}

	/**
	 * Sets the lease date.
	 *
	 * @param leaseDate the new lease date
	 */
	public void setLeaseDate(Date leaseDate) {
		this.leaseDate = leaseDate;
	}

	/**
	 * Checks if is active.
	 *
	 * @return true, if is active
	 */
	@Column(name = "active", nullable = false)
	public boolean isActive() {
		return this.active;
	}

	/**
	 * Sets the active.
	 *
	 * @param active the new active
	 */
	public void setActive(boolean active) {
		this.active = active;
	}

	/**
	 * Gets the area.
	 *
	 * @return the area
	 */
	@Column(name = "area", nullable = false, precision = 17, scale = 17)
	public Double getArea() {
		return this.area;
	}

	/**
	 * Sets the area.
	 *
	 * @param area the new area
	 */
	public void setArea(Double area) {
		this.area = area;
	}

	/**
	 * Gets the the geom.
	 *
	 * @return the the geom
	 */
	@Column(name = "the_geom")
	@Type(type = "org.hibernate.spatial.GeometryType")
	public Geometry getTheGeom() {
		return this.theGeom;
	}

	/**
	 * Sets the the geom.
	 *
	 * @param theGeom the new the geom
	 */
	public void setTheGeom(Geometry theGeom) {
		this.theGeom = theGeom;
	}

	/**
	 * Gets the price.
	 *
	 * @return the price
	 */
	@Column(name = "price", precision = 17, scale = 17)
	public Double getPrice() {
		return this.price;
	}

	/**
	 * Sets the price.
	 *
	 * @param price the new price
	 */
	public void setPrice(Double price) {
		this.price = price;
	}

	/**
	 * Gets the cad parcel requests.
	 *
	 * @return the cad parcel requests
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "request")
	public Set<CadParcelRequest> getCadParcelRequests() {
		return this.cadParcelRequests;
	}

	/**
	 * Sets the cad parcel requests.
	 *
	 * @param cadParcelRequests the new cad parcel requests
	 */
	public void setCadParcelRequests(Set<CadParcelRequest> cadParcelRequests) {
		this.cadParcelRequests = cadParcelRequests;
	}

	/**
	 * Gets the request coords.
	 *
	 * @return the request coords
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "request")
	public Set<RequestCoord> getRequestCoords() {
		return this.requestCoords;
	}

	/**
	 * Sets the request coords.
	 *
	 * @param requestCoords the new request coords
	 */
	public void setRequestCoords(Set<RequestCoord> requestCoords) {
		this.requestCoords = requestCoords;
	}

	/**
	 * Gets the request statuses.
	 *
	 * @return the request statuses
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "request")
	public Set<RequestStatus> getRequestStatuses() {
		return this.requestStatuses;
	}

	/**
	 * Sets the request statuses.
	 *
	 * @param requestStatuses the new request statuses
	 */
	public void setRequestStatuses(Set<RequestStatus> requestStatuses) {
		this.requestStatuses = requestStatuses;
	}

}
