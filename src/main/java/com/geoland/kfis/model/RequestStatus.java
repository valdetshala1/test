package com.geoland.kfis.model;

// Generated Nov 24, 2015 9:10:28 AM by Hibernate Tools 4.0.0

import com.geoland.framework.persistence.base.*;
import org.hibernate.annotations.Type;
import com.geoland.kfis.persistence.hibernate.usertypes.Requeststatus;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.annotations.GenericGenerator;

// TODO: Auto-generated Javadoc
/**
 * RequestStatus generated by hbm2java.
 */
@Entity
@Table(name = "tfal_request_status", schema = "public")
public class RequestStatus extends AbstractPersistentObject implements
		java.io.Serializable {

	/** The id. */
	private Long id;
	
	/** The request. */
	private Request request;
	
	/** The person. */
	private Person person;
	
	/** The status. */
	private Requeststatus status;
	
	/** The active. */
	private boolean active;
	
	/** The created date. */
	private Date createdDate;
	
	/** The note. */
	private String note;
	
	/** The request docs. */
	private Set<RequestDoc> requestDocs = new HashSet<RequestDoc>(0);
	
	/** The requests. */
	private Set<Request> requests = new HashSet<Request>(0);

	/**
	 * Instantiates a new request status.
	 */
	public RequestStatus() {
	}

	/**
	 * Instantiates a new request status.
	 *
	 * @param request the request
	 * @param person the person
	 * @param status the status
	 * @param active the active
	 * @param createdDate the created date
	 */
	public RequestStatus(Request request, Person person, Requeststatus status,
			boolean active, Date createdDate) {
		this.request = request;
		this.person = person;
		this.status = status;
		this.active = active;
		this.createdDate = createdDate;
	}

	/**
	 * Instantiates a new request status.
	 *
	 * @param request the request
	 * @param person the person
	 * @param status the status
	 * @param active the active
	 * @param createdDate the created date
	 * @param note the note
	 * @param requestDocs the request docs
	 * @param requests the requests
	 */
	public RequestStatus(Request request, Person person, Requeststatus status,
			boolean active, Date createdDate, String note,
			Set<RequestDoc> requestDocs, Set<Request> requests) {
		this.request = request;
		this.person = person;
		this.status = status;
		this.active = active;
		this.createdDate = createdDate;
		this.note = note;
		this.requestDocs = requestDocs;
		this.requests = requests;
	}

	/* (non-Javadoc)
	 * @see com.geoland.framework.persistence.base.AbstractPersistentObject#getId()
	 */
	@GenericGenerator(name = "generator", strategy = "increment")
	@Id
	@GeneratedValue(generator = "generator")
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	/* (non-Javadoc)
	 * @see com.geoland.framework.persistence.base.AbstractPersistentObject#setId(java.lang.Long)
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Gets the request.
	 *
	 * @return the request
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "request_id", nullable = false)
	public Request getRequest() {
		return this.request;
	}

	/**
	 * Sets the request.
	 *
	 * @param request the new request
	 */
	public void setRequest(Request request) {
		this.request = request;
	}

	/**
	 * Gets the person.
	 *
	 * @return the person
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "changed_by", nullable = false)
	public Person getPerson() {
		return this.person;
	}

	/**
	 * Sets the person.
	 *
	 * @param person the new person
	 */
	public void setPerson(Person person) {
		this.person = person;
	}

	/**
	 * Gets the status.
	 *
	 * @return the status
	 */
	@Column(name = "status", nullable = false, length = 6)
	@Type(type = "com.geoland.kfis.persistence.hibernate.usertypes.RequeststatusUserType")
	public Requeststatus getStatus() {
		return this.status;
	}

	/**
	 * Sets the status.
	 *
	 * @param status the new status
	 */
	public void setStatus(Requeststatus status) {
		this.status = status;
	}

	/**
	 * Checks if is active.
	 *
	 * @return true, if is active
	 */
	@Column(name = "active", nullable = false)
	public boolean isActive() {
		return this.active;
	}

	/**
	 * Sets the active.
	 *
	 * @param active the new active
	 */
	public void setActive(boolean active) {
		this.active = active;
	}

	/**
	 * Gets the created date.
	 *
	 * @return the created date
	 */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_date", nullable = false, length = 29)
	public Date getCreatedDate() {
		return this.createdDate;
	}

	/**
	 * Sets the created date.
	 *
	 * @param createdDate the new created date
	 */
	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}

	/**
	 * Gets the note.
	 *
	 * @return the note
	 */
	@Column(name = "note")
	public String getNote() {
		return this.note;
	}

	/**
	 * Sets the note.
	 *
	 * @param note the new note
	 */
	public void setNote(String note) {
		this.note = note;
	}

	/**
	 * Gets the request docs.
	 *
	 * @return the request docs
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "requestStatus")
	public Set<RequestDoc> getRequestDocs() {
		return this.requestDocs;
	}

	/**
	 * Sets the request docs.
	 *
	 * @param requestDocs the new request docs
	 */
	public void setRequestDocs(Set<RequestDoc> requestDocs) {
		this.requestDocs = requestDocs;
	}

	/**
	 * Gets the requests.
	 *
	 * @return the requests
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "requestStatus")
	public Set<Request> getRequests() {
		return this.requests;
	}

	/**
	 * Sets the requests.
	 *
	 * @param requests the new requests
	 */
	public void setRequests(Set<Request> requests) {
		this.requests = requests;
	}

}
