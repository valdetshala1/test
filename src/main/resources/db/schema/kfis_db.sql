SET CLIENT_ENCODING = 'UTF8';
BEGIN;

/*
SET SEARCH_PATH = 'KFIS';
ALTER EXTENSION POSTGIS SET SCHEMA KFIS;
ALTER EXTENSION "UUID-OSSP" SET SCHEMA KFIS;
*/


--DROP SCHEMA IF EXISTS KFIS;  
/*
CREATE SCHEMA IF NOT EXISTS KFIS AUTHORIZATION POSTGRES;
GRANT ALL ON SCHEMA KFIS TO KFIS;
GRANT ALL ON SCHEMA PUBLIC TO KFIS;
*/
  
/*
CREATE TABLESPACE KFIS
  OWNER KFIS
  LOCATION 'C:\\PROGRAM FILES\\POSTGRESQL\\9.3\\DATA';
  
CREATE ROLE KFIS LOGIN
  ENCRYPTED PASSWORD 'MD505B5F417831990AD1C961D34B16C980F'
  SUPERUSER INHERIT CREATEDB CREATEROLE REPLICATION;
COMMENT ON ROLE KFIS IS 'KFIS ROLLE';

CREATE DATABASE KFIS
  WITH OWNER = KFIS
       ENCODING = 'UTF8'
       TABLESPACE = KFIS
       LC_COLLATE = 'GERMAN_GERMANY.1252'
       LC_CTYPE = 'GERMAN_GERMANY.1252'
       CONNECTION LIMIT = -1;

ALTER DATABASE KFIS
  SET SEARCH_PATH = "$USER", PUBLIC, TOPOLOGY;
  */



/*START RBAC*/  
DROP TABLE IF EXISTS TROLE CASCADE;--remove
DROP TABLE IF EXISTS TUSER_ROLE CASCADE;--remove
DROP TABLE IF EXISTS TSESSION CASCADE;--remove
DROP TABLE IF EXISTS TOPERATION CASCADE;--remove
DROP TABLE IF EXISTS TOBJECT CASCADE;--remove
DROP TABLE IF EXISTS TPERMISSION CASCADE;--remove
DROP TABLE IF EXISTS TROLE_PERMISSION CASCADE;--remove
DROP TABLE IF EXISTS TSESSION_ROLE CASCADE;--remove
DROP TABLE IF EXISTS TPERMISSION_OPERATION CASCADE;--remove
DROP TABLE IF EXISTS TPERMISSION_OBJECT CASCADE;--remove


DROP TABLE IF EXISTS TRBAC_ROLE CASCADE;
DROP TABLE IF EXISTS TRBAC_USER_ROLE CASCADE;
DROP TABLE IF EXISTS TRBAC_SESSION CASCADE;
DROP TABLE IF EXISTS TRBAC_OPERATION CASCADE;
DROP TABLE IF EXISTS TRBAC_OBJECT CASCADE;
DROP TABLE IF EXISTS TRBAC_PERMISSION CASCADE;
DROP TABLE IF EXISTS TRBAC_SESSION_ROLE CASCADE;

DROP TABLE IF EXISTS TUSER_PASSWORD CASCADE;
DROP TABLE IF EXISTS TUSER CASCADE;
DROP TABLE IF EXISTS TUSER_LOGIN_ATTEMPT CASCADE;
DROP TABLE IF EXISTS TUSER_LOG CASCADE;
/*END RBAC*/  

DROP TABLE IF EXISTS TGIS_SURFACEDATA  CASCADE;
DROP TABLE IF EXISTS TGIS_CADASTRAL_ZONE CASCADE;
DROP TABLE IF EXISTS TGIS_CADASTRAL_MUNICIPALITY CASCADE;
DROP TABLE IF EXISTS TGIS_SUBREGION CASCADE;
DROP TABLE IF EXISTS TGIS_REGION CASCADE;
DROP TABLE IF EXISTS TGIS_ROAD CASCADE;
DROP TABLE IF EXISTS TGIS_STAND CASCADE;
DROP TABLE IF EXISTS TGIS_STAND_AUD CASCADE;
DROP TABLE IF EXISTS TGIS_STAND_GROWTH CASCADE;
DROP TABLE IF EXISTS TGIS_COMPARTMENT CASCADE;
DROP TABLE IF EXISTS TGIS_MANAGEMENT_UNIT CASCADE;
DROP TABLE IF EXISTS TGIS_MU_PERIOD CASCADE;

DROP TABLE IF EXISTS TCADASTRAL_ZONE CASCADE;
DROP TABLE IF EXISTS TCADASTRAL_MUNICIPALITY CASCADE;
DROP TABLE IF EXISTS TSUBREGION CASCADE;
DROP TABLE IF EXISTS TREGION CASCADE;
DROP TABLE IF EXISTS TFRM_ROAD CASCADE;
DROP TABLE IF EXISTS TFRM_STAND CASCADE;
DROP TABLE IF EXISTS TFRM_COMPARTMENT CASCADE;
DROP TABLE IF EXISTS TFRM_MANAGEMENT_UNIT CASCADE;
DROP TABLE IF EXISTS TFRM_ESTIMATE_VOLUME CASCADE;

DROP TABLE IF EXISTS TDOMAIN CASCADE;
DROP TABLE IF EXISTS TTEXTDOMAIN CASCADE;
DROP TABLE IF EXISTS TUNITS_METRIC CASCADE;

DROP TABLE IF EXISTS TADDRESS CASCADE;
DROP TABLE IF EXISTS TPARTY CASCADE;
DROP TABLE IF EXISTS TPARTY_USER CASCADE;
DROP TABLE IF EXISTS TPARTY_ROLE CASCADE;
DROP TABLE IF EXISTS TPARTY_RELATIONSHIP CASCADE;
DROP TYPE IF EXISTS GENDER_TYPE CASCADE; --remove
DROP TABLE IF EXISTS TPERSON CASCADE;
DROP TABLE IF EXISTS TORGANISATION CASCADE;
DROP TABLE IF EXISTS TORGANISATION_MUN CASCADE;
DROP TABLE IF EXISTS THRM_EMPLOYEE CASCADE;
DROP TABLE IF EXISTS THRM_EMPLOYEE_SOS_CONTACT CASCADE;
DROP TABLE IF EXISTS THRM_EMPLOYEE_DOC CASCADE;
DROP TABLE IF EXISTS THRM_EMPLOYEE_SKILL CASCADE;
DROP TABLE IF EXISTS THRM_NATIONALITY CASCADE;
DROP TABLE IF EXISTS THRM_LANGUAGE CASCADE;
DROP TABLE IF EXISTS THRM_EMPLOYEE_LANGUAGE CASCADE;
DROP TABLE IF EXISTS THRM_LEAVE_TYPE CASCADE;
DROP TABLE IF EXISTS THRM_LEAVE CASCADE;
DROP TABLE IF EXISTS THRM_LEAVE_ENTITLEMENT CASCADE;
DROP TABLE IF EXISTS THRM_DECISION CASCADE;
DROP TABLE IF EXISTS THRM_DECISION_EMPLOYEE CASCADE;
DROP TABLE IF EXISTS THRM_DECISION_STATUS CASCADE;
DROP TABLE IF EXISTS THRM_DECISION_DOC CASCADE;
DROP TABLE IF EXISTS THRM_DECISION_TYPE CASCADE;

DROP TABLE IF EXISTS THRM_ANNUAL_PLAN CASCADE;
DROP TABLE IF EXISTS THRM_ANNUAL_PLAN_STATUS CASCADE;
DROP TABLE IF EXISTS THRM_ANNUAL_PLAN_DOC CASCADE;
DROP TABLE IF EXISTS THRM_ANN_PLAN_EMPLOYEE CASCADE;

DROP TABLE IF EXISTS THRM_OFFICAL_TRAVEL CASCADE;
DROP TABLE IF EXISTS THRM_ATTENDANCE_RECORD CASCADE;
DROP TABLE IF EXISTS TATTACHMENT CASCADE;

DROP TABLE IF EXISTS TLOG_VEHICLES CASCADE;

DROP TABLE IF EXISTS TLOG_DEVICES CASCADE;
DROP TABLE IF EXISTS TLOG_PROTOCOL_PORTS CASCADE;

DROP TABLE IF EXISTS TLOG_POSITIONS CASCADE;

DROP TABLE IF EXISTS TVEHICLES_STAFF_ASSIGN CASCADE;
DROP TABLE IF EXISTS TLOG_VEHICLES_REGISTER CASCADE;
DROP TABLE IF EXISTS TLOG_VEHICLES_SERVICE_MAINTENANCE CASCADE;
DROP TABLE IF EXISTS TFUELL_CONSUM CASCADE;
DROP TABLE IF EXISTS TVEHICLES_TRACKING CASCADE;



DROP TABLE IF EXISTS TASSETS CASCADE;
DROP TABLE IF EXISTS TASSETS_DEVALUATION CASCADE;
DROP TABLE IF EXISTS TASSETS_STAFF_ASSIGN CASCADE;
DROP TABLE IF EXISTS TLEGSEC_LAWSUIT CASCADE;
DROP TABLE IF EXISTS TLEGSEC_LAWSUIT_DAMAGE CASCADE;
DROP TABLE IF EXISTS TLEGSEC_LAWSUIT_STATUS CASCADE;
DROP TABLE IF EXISTS TFIN_TYPE CASCADE;
DROP TABLE IF EXISTS TFIN_INPUT_STATUS CASCADE;
DROP TABLE IF EXISTS TFIN_INPUT CASCADE;
DROP TABLE IF EXISTS TFIN_OUTPUT CASCADE;
DROP TABLE IF EXISTS TFIN_CONTRACTOR CASCADE;
DROP TABLE IF EXISTS TFIN_CONTRACT CASCADE;
DROP TABLE IF EXISTS TFIN_CONTRACT_DOC CASCADE;
DROP TABLE IF EXISTS TFIN_PAYMENT_PERIOD CASCADE;
DROP TABLE IF EXISTS TFIN_ANNU_BUDGET_ALLOC CASCADE;
DROP TABLE IF EXISTS TFIN_BUDGET_MAINNTENANCE CASCADE;
DROP TABLE IF EXISTS TDOCUMENTS_EVIDENCING CASCADE; --remove
DROP TABLE IF EXISTS TMANAGMENT_PROTOCOL_DOCS CASCADE; --remove
DROP TABLE IF EXISTS TMANAGMENT_PROTOCOL_DOC CASCADE;
DROP TABLE IF EXISTS TANNUAL_FELLING_PLANS CASCADE; --remove
DROP TABLE IF EXISTS TB_MONITOR_EVAL CASCADE;

-- START FRM Module
DROP TABLE IF EXISTS TANNUAL_PROTECTION_PLANS CASCADE;
DROP TABLE IF EXISTS TFRM_INSPECTION_DOC CASCADE;
DROP TABLE IF EXISTS TFRM_INSPECTION CASCADE;
DROP TABLE IF EXISTS TFRM_INSPECTOR CASCADE;
DROP TABLE IF EXISTS TFRM_INSP_ACTION_TYPE CASCADE;
DROP TABLE IF EXISTS TFRM_ANNUAL_PROTECTION_PLAN CASCADE;
DROP TABLE IF EXISTS TFRM_FISKOS_DATA CASCADE;
DROP TABLE IF EXISTS TFRM_FISKOS_IMPORT CASCADE;

DROP TABLE IF EXISTS SHAPE_STAND CASCADE;
DROP TABLE IF EXISTS TSHAPE_TREATMENT_NAME CASCADE;
DROP TABLE IF EXISTS TSHAPE_STAND_TREATMENT CASCADE;
DROP TABLE IF EXISTS TBIODIV_NAME CASCADE;
DROP TABLE IF EXISTS TGIS_BIODIV CASCADE;
DROP TABLE IF EXISTS SHAPE_BIODIVERSITY CASCADE;

DROP TABLE IF EXISTS TGIS_STATE CASCADE;

/*
drop table if exists tfrm_stand_activity_impl cascade;
drop table if exists tfrm_stand_activity_plan cascade;
drop table if exists tfrm_stand_activity_volume cascade;
drop table if exists tfrm_stand_activity cascade;
*/

DROP TABLE IF EXISTS TFRM_ACTIVITY_STATUS CASCADE;
DROP TABLE IF EXISTS TFRM_ACTIVITY_STATUS_DOC CASCADE;
DROP TABLE IF EXISTS TFRM_ACTIVITY CASCADE;

DROP TABLE IF EXISTS TFRM_ANNUAL_PLANNING_STATUS CASCADE;
DROP TABLE IF EXISTS TFRM_ANNUAL_PLANNING CASCADE;
DROP TABLE IF EXISTS TFRM_STAND_HARVEST_ACTIVITY CASCADE;
DROP TABLE IF EXISTS TFRM_HARVEST_IMPL_TRANSPORT CASCADE;
DROP TABLE IF EXISTS TFRM_STAND_HARVEST_MARKED CASCADE;
DROP TABLE IF EXISTS TFRM_STAND_HARVEST_IMPL_DECLARE CASCADE;
DROP TABLE IF EXISTS TFRM_STAND_SILVICULTURE_ACTIVITY CASCADE;
DROP TABLE IF EXISTS TFRM_STAND_SILVICULTURE_IMPL_DECLARE CASCADE;
DROP TABLE IF EXISTS TFRM_STAND_PLANTING_ACTIVITY CASCADE;
DROP TABLE IF EXISTS TFRM_STAND_PLANTING_IMPL_DECLARE CASCADE;
DROP TABLE IF EXISTS TFRM_ROAD_ACTIVITY CASCADE;
DROP TABLE IF EXISTS TFRM_ROAD_IMPL_DECLARE CASCADE;
DROP TABLE IF EXISTS TFRM_SEED_ACTIVITY CASCADE;
DROP TABLE IF EXISTS TFRM_PROTECTION_ACTIVITY CASCADE;
DROP TABLE IF EXISTS TFRM_PROTECTION_IMPL_DECLARE CASCADE;
DROP TABLE IF EXISTS TFRM_PRIVATE_ACTIVITY CASCADE;
DROP TABLE IF EXISTS tfrm_private_request_doc CASCADE;
DROP TABLE IF EXISTS TFRM_PLANTING_ACTIVITY CASCADE;

DROP TABLE IF EXISTS TGIS_PARCELGEOM CASCADE;
DROP TABLE IF EXISTS TPARCEL_OWNER CASCADE;
DROP TABLE IF EXISTS TPARCEL_DETAIL CASCADE;

DROP TABLE IF EXISTS TFRM_LANDSCAP_PLAN CASCADE;
DROP TABLE IF EXISTS TFRM_SIVICULTURE_PLAN CASCADE;
DROP TABLE IF EXISTS TFRM_SILVICULTURE_DOMAIN CASCADE;

DROP TABLE IF EXISTS TFRM_BIO_DIVERSITY_NAME CASCADE;
DROP TABLE IF EXISTS TFRM_BIO_DIVERSITY CASCADE;
DROP TABLE IF EXISTS TFRM_MANAGEMENT_CLASS CASCADE;

DROP TABLE IF EXISTS TFRM_DOMAIN_NAME CASCADE;
DROP TABLE IF EXISTS TFRM_DOMAIN CASCADE;

DROP TABLE IF EXISTS TFRM_PRIVATE_REQUEST CASCADE;
DROP TABLE IF EXISTS THRM_PRIVATE_REQUEST_DOC CASCADE;
DROP TABLE IF EXISTS TFRM_PRIVATE_REQUEST_IMPL CASCADE;

DROP TABLE IF EXISTS TFRM_FIRE_REPORT CASCADE;
DROP TABLE IF EXISTS TFRM_FIRE_DETAILS CASCADE;

DROP TABLE IF EXISTS TFRM_CONFISCATION CASCADE;
DROP TABLE IF EXISTS TFRM_CONFISCATION_DETAIL CASCADE;

-- END FRM Module

-- START FAL Module
DROP TABLE IF EXISTS TFAL_CAD_PARCEL_REQUEST CASCADE;
DROP TABLE IF EXISTS TFAL_REQUEST_DOC CASCADE;
DROP TABLE IF EXISTS TFAL_REQUEST_TYPE CASCADE;
DROP TABLE IF EXISTS TFAL_REQUEST CASCADE;
DROP TABLE IF EXISTS TFAL_REQUEST_COORD CASCADE;
DROP TABLE IF EXISTS TFAL_REQUEST_STATUS CASCADE;
-- START FAL Module

DROP TABLE IF EXISTS TDHPET_WILD_ANIMALS CASCADE;
DROP TABLE IF EXISTS TDHPET_ANIMAL_LOCATION CASCADE;
DROP TABLE IF EXISTS TDHPET_TOURIST_ZONE_GEOMS CASCADE;
DROP TABLE IF EXISTS TDHPET_TOURIST_REGISTER CASCADE;
DROP TABLE IF EXISTS TDHPET_TOURIST_PURPOSE CASCADE;
DROP TABLE IF EXISTS TDHPET_LOCATION CASCADE;
DROP TABLE IF EXISTS TDHPET_MAINT_OF_MONG CASCADE;
DROP TABLE IF EXISTS TDHPET_HUNT_GROUND_EVAL CASCADE;
DROP TABLE IF EXISTS TDHPET_ANIMAL_CAPACITY CASCADE;
DROP TABLE IF EXISTS TDHPET_ACTIVITY_MANAGEMENT CASCADE;
DROP TABLE IF EXISTS TDHPET_HUNTED_ANIMALS CASCADE;
DROP TABLE IF EXISTS TDHPET_WILD_ANIMALS_REQUEST CASCADE;
DROP TABLE IF EXISTS TDHPET_ANNUAL_PLAN CASCADE;
DROP TABLE IF EXISTS TDHPET_ANIMAL_HUNT_SEASONE CASCADE;
DROP TABLE IF EXISTS TDHPET_LOCATION_LAND_TYPE CASCADE;
DROP TABLE IF EXISTS TDHPET_ANIMAL_LOCATION_DETAIL CASCADE;
DROP TABLE IF EXISTS TDHPET_HUNTED_ANIMAL_DETAIL CASCADE;
DROP TABLE IF EXISTS TDHPET_PERIOD_PLAN CASCADE;


DROP TABLE IF EXISTS TPRCMT_TENDER_REQUEST CASCADE;
DROP TABLE IF EXISTS TPRCMT_TENDER_STATUS CASCADE;
DROP TABLE IF EXISTS TPRCMT_TENDER_STATUS_DOC CASCADE;
DROP TABLE IF EXISTS TPRCMT_TENDER_ATTACHMENT CASCADE;
DROP TABLE IF EXISTS TPRCMT_TENDER_DOC CASCADE;
DROP TABLE IF EXISTS TPRCMT_TENDER_BID CASCADE;
DROP TABLE IF EXISTS TPRCMT_TENDER_BID_ATTACHMENT CASCADE;
DROP TABLE IF EXISTS TPRCMT_TENDER_BIDDER CASCADE;
DROP TABLE IF EXISTS TPRCMT_DOSSIER_REQUEST CASCADE;
DROP TABLE IF EXISTS TPRCMT_DOSSIER_QUESTION CASCADE;
DROP TABLE IF EXISTS TPRCMT_TENDER_COMPLAINT CASCADE;

DROP TABLE IF EXISTS TFRM_ACTIVITY_DOMAIN CASCADE;

DROP TABLE IF EXISTS TFRM_TREATMENT CASCADE;
DROP TABLE IF EXISTS TFRM_TREE_SPECIES CASCADE;

DROP TABLE IF EXISTS TFRM_TREATMENT_GROUP CASCADE;
DROP TABLE IF EXISTS TFRM_SEEDLING_INVENTORY CASCADE;
DROP TABLE IF EXISTS TFRM_SEEDLING_INVENTORY_POS CASCADE;

DROP TABLE IF EXISTS tad_language CASCADE;
DROP TABLE IF EXISTS talertrule CASCADE;
DROP TABLE IF EXISTS talertrule_trl CASCADE;
DROP TABLE IF EXISTS talert CASCADE;
DROP TABLE IF EXISTS talertrecipient CASCADE;

DROP TABLE IF EXISTS TUNIT_MEASUREMENT CASCADE;
DROP TABLE IF EXISTS TUOM CASCADE;
DROP TABLE IF EXISTS TUOM_TRL CASCADE;
DROP TABLE IF EXISTS TTAX CASCADE;

/*MER module*/
DROP TABLE IF EXISTS TMER_PROJECT CASCADE;
DROP TABLE IF EXISTS TMER_SUB_PROJECT CASCADE;
DROP TABLE IF EXISTS TMER_STRATEGY CASCADE;
DROP TABLE IF EXISTS TMER_PLAN_PERIOD CASCADE;
DROP TABLE IF EXISTS TMER_REF_SUB_PROJECTS CASCADE;
DROP TABLE IF EXISTS TMER_RESP_INSTITUTIONS CASCADE;
DROP TABLE IF EXISTS TMER_STRATEGY_DOC CASCADE;
DROP TABLE IF EXISTS TMER_STRATEGY_EXECUTION CASCADE;
DROP TABLE IF EXISTS TMER_FINANCE_DONOR CASCADE;
DROP TABLE IF EXISTS TMER_INDICATOR CASCADE;
DROP TABLE IF EXISTS TMER_SUB_INDICATOR CASCADE;
DROP TABLE IF EXISTS TMER_INDICATOR_TARGET CASCADE;
DROP TABLE IF EXISTS TMER_EVALUATION_PERF CASCADE;
DROP TABLE IF EXISTS TMER_EVALUATION_STRAT CASCADE;
DROP TABLE IF EXISTS TPUBLISHING CASCADE;
DROP TABLE IF EXISTS TIMPORT_STATUS CASCADE;

DROP TABLE IF EXISTS TGIS_PLOTS CASCADE;
DROP TABLE IF EXISTS TGIS_PLOT_TREE CASCADE;
DROP TABLE IF EXISTS SHAPE_PLOTS CASCADE;
DROP TABLE IF EXISTS SHAPE_PLOT_TREES CASCADE;

--TUOM Measurement TUNIT_MEASUREMENT
--  x12de355 character(2) NOT NULL,
 --uomsymbol character(3), -- --OBTG:NCHAR--

  --x12de355 character varying(4) NOT NULL,
  --uomsymbol character varying(10),
DROP TABLE IF EXISTS TABLES_AUD;
 
CREATE TABLE TABLES_AUD 
(
ID BIGSERIAL PRIMARY KEY,
ACTION VARCHAR(10) NOT NULL,
DETAIL text NOT NULL,
DIFF text,
ENTITY_ID BIGINT NOT NULL,
ENTITY_NAME VARCHAR(255) NOT NULL,
CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
CERATED_BY VARCHAR(150) NOT NULL
);

CREATE TABLE TUNIT_MEASUREMENT
(
ID SERIAL PRIMARY KEY NOT NULL,
ISACTIVE CHARACTER(1) NOT NULL DEFAULT 'Y'::BPCHAR,
SYMBOL CHARACTER VARYING(10),
UNIT DOUBLE PRECISION NOT NULL,
NAME CHARACTER VARYING(50) NOT NULL UNIQUE,
NAME_EN CHARACTER VARYING(50),
NAME_SR CHARACTER VARYING(50),
METRIC CHARACTER VARYING(20),
MEASUREMENT CHARACTER VARYING(50),
RELATIONSHIP CHARACTER VARYING(50),
WEIGHT CHARACTER(1) NOT NULL DEFAULT '0'::BPCHAR,
CONSTRAINT TUOM_ISACTIVE_CHECK CHECK (ISACTIVE = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR]))

);

/*
CREATE TABLE ad_language
(
  ad_language_id character varying(32) NOT NULL, -- --OBTG:ONCREATEDEFAULT:get_uuid()--
  ad_language character varying(6) NOT NULL,
  ad_client_id character varying(32) NOT NULL,
  ad_org_id character varying(32) NOT NULL,
  isactive character(1) NOT NULL DEFAULT 'Y'::bpchar,
  created timestamp without time zone NOT NULL DEFAULT now(),
  createdby character varying(32) NOT NULL,
  updated timestamp without time zone NOT NULL DEFAULT now(),
  updatedby character varying(32) NOT NULL,
  name character varying(60) NOT NULL, -- --OBTG:NVARCHAR--
  languageiso character(2),
  countrycode character(2),
  isbaselanguage character(1) NOT NULL DEFAULT 'N'::bpchar,
  issystemlanguage character(1) NOT NULL DEFAULT 'N'::bpchar,
  processing character(1),
  pixelsize numeric(10,0),
  translatedby character varying(255),
  isrtl character(1) NOT NULL DEFAULT 'N'::bpchar, -- --OBTG:ONCREATEDEFAULT:'N'--
  CONSTRAINT ad_language_key PRIMARY KEY (ad_language_id)
)
WITH (
  OIDS=FALSE
);
*/

CREATE TABLE TAD_LANGUAGE
(
  ID BIGSERIAL PRIMARY KEY NOT NULL,
  AD_LANGUAGE CHARACTER VARYING(6) NOT NULL,
  ISACTIVE CHARACTER(1) NOT NULL DEFAULT 'Y'::BPCHAR,
  NAME CHARACTER VARYING(60) NOT NULL, -- --OBTG:NVARCHAR--
  LANGUAGEISO CHARACTER(2),
  COUNTRYCODE CHARACTER(2),
  ISBASELANGUAGE CHARACTER(1) NOT NULL DEFAULT 'N'::BPCHAR,
  ISSYSTEMLANGUAGE CHARACTER(1) NOT NULL DEFAULT 'N'::BPCHAR,
  PROCESSING CHARACTER(1),
  PIXELSIZE NUMERIC(10,0),
  TRANSLATEDBY CHARACTER VARYING(255),
  ISRTL CHARACTER(1) NOT NULL DEFAULT 'N'::BPCHAR, -- --OBTG:ONCREATEDEFAULT:'N'--
  
  CREATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
  CREATEDBY INTEGER NOT NULL,
  UPDATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
  UPDATEDBY INTEGER NOT NULL,
  
  CONSTRAINT TAD_LANGUAGE_AD_LANGUAGE_UN UNIQUE (AD_LANGUAGE),
  CONSTRAINT TAD_LANGUAGE_ISACTIVE_CHK CHECK (ISACTIVE = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR])),
  CONSTRAINT TAD_LANGUAGE_ISBASELANGUAGE_CHK CHECK (ISBASELANGUAGE = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR])),
  CONSTRAINT TAD_LANGUAGE_ISSYSTEMLANGUA_CHK CHECK (ISSYSTEMLANGUAGE = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR]))

)
WITH (
  OIDS=FALSE
);

/*
There are two methods of making records unavailable in the system: One is to delete the record, the other is to de-activate the record. A de-activated record is not available for selection, but available for reports.
There are two reasons for de-activating and not deleting records: (1) The system requires the record for audit purposes. (2) The record is referenced by other records. E.g., you cannot delete a Business Partner, if there are invoices for this partner record existing. You de-activate the Business Partner and prevent that this record is used for future entries. 
*/

CREATE TABLE TUOM
(
  ID SERIAL PRIMARY KEY NOT NULL,
  ISACTIVE CHARACTER(1) NOT NULL DEFAULT 'Y'::BPCHAR,-- The record is active in the system --

  X12DE355 CHARACTER VARYING(4) NOT NULL, --The Unit of Measure Code indicates the EDI X12 Code Data Element 355 (Unit or Basis for Measurement)--
  UOMSYMBOL CHARACTER VARYING(10),--The Symbol identifies the Symbol to be displayed and printed for a Unit of Measure--
  NAME CHARACTER VARYING(60) NOT NULL,
  DESCRIPTION CHARACTER VARYING(255),
  STDPRECISION NUMERIC(10,0) NOT NULL, --The Standard Precision defines the number of decimal places that amounts will be rounded to for accounting transactions and documents.--
  COSTINGPRECISION NUMERIC(10,0) NOT NULL,--The Costing Precision defines the number of decimal places that amounts will be rounded to when performing costing calculations.--
  ISDEFAULT CHARACTER(1) NOT NULL DEFAULT 'N'::BPCHAR,--The Default Checkbox indicates if this record will be used as a default value.--
  UOMTYPE CHARACTER VARYING(30),
  
  CREATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
  CREATEDBY INTEGER NOT NULL,
  UPDATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
  UPDATEDBY INTEGER NOT NULL,
  
  CONSTRAINT TUOM_ISACTIVE_CHECK CHECK (ISACTIVE = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR]))
)
WITH (
  OIDS=FALSE
);

CREATE TABLE TUOM_TRL
(
  ID SERIAL PRIMARY KEY NOT NULL,
  UOM_ID INTEGER NOT NULL,
  AD_LANGUAGE CHARACTER VARYING(6) NOT NULL,
  ISACTIVE CHARACTER(1) NOT NULL DEFAULT 'Y'::BPCHAR,
  UOMSYMBOL CHARACTER VARYING(10),
  NAME CHARACTER VARYING(60) NOT NULL,
  DESCRIPTION CHARACTER VARYING(255),
  ISTRANSLATED CHARACTER(1) NOT NULL DEFAULT 'N'::BPCHAR,

  CREATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
  CREATEDBY INTEGER NOT NULL,
  UPDATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
  UPDATEDBY INTEGER NOT NULL,

  FOREIGN KEY (UOM_ID) REFERENCES TUOM(ID),
  CONSTRAINT TUOM_TRL_AD_LANGUAGE FOREIGN KEY (AD_LANGUAGE)
      REFERENCES TAD_LANGUAGE(AD_LANGUAGE) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
  CONSTRAINT TUOM_TRL_ISACTIVE_CHECK CHECK (ISACTIVE = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR])),
  CONSTRAINT TUOM_TRL_ISTRANSLATED_CHECK CHECK (ISTRANSLATED = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR]))
)
WITH (
  OIDS=FALSE
);


/*START - CREATE RBAC TABLES*/
CREATE TABLE TUSER_PASSWORD
(
	ID SERIAL PRIMARY KEY NOT NULL,
	PASSWORD VARCHAR(100) NOT NULL,
	SALT_VALUE VARCHAR(50),
	HASH_VALUE VARCHAR(50),
	PASSWORD_ANSWER VARCHAR(255), --PASSWORDANSWER
	PASSWORD_QUESTION VARCHAR(255), --PASSWORDQUESTION
	PASSWORD_STATUS VARCHAR(1) NOT NULL, --I=INITIAL, C=CHANGED, R=RESET, L=LOCKED
	ACTIVE BOOLEAN NOT NULL DEFAULT TRUE,
	CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW()
);
ALTER TABLE TUSER_PASSWORD OWNER TO POSTGRES;

CREATE TABLE TUSER
(
	ID SERIAL PRIMARY KEY NOT NULL,
	FIRST_NAME VARCHAR(30) NOT NULL,
	LAST_NAME VARCHAR(30) NOT NULL,
	USERNAME VARCHAR(50) NOT NULL UNIQUE,
	BIRTHDATE DATE NOT NULL,
	PERSONAL_ID VARCHAR(20) , 
	GENDER VARCHAR(1) NOT NULL CHECK (GENDER IN ('M', 'F')), --ENUM('M','F')
	DEGREE VARCHAR(20), --ACADEMIC DEGREE
	EMAIL VARCHAR(50) NOT NULL ,
	PHONE VARCHAR(50),
	MOBILE VARCHAR(50),
	
	CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
	ACTIVE BOOLEAN NOT NULL DEFAULT TRUE,
	PASSWORD_ID INTEGER NOT NULL, 
	PHOTO BYTEA,
	NOTES TEXT,
	
	FOREIGN KEY (PASSWORD_ID) REFERENCES TUSER_PASSWORD(ID)
);

CREATE TABLE TUSER_LOGIN_ATTEMPT --LOGINATTEMPT 
(
	ID BIGSERIAL PRIMARY KEY NOT NULL,	
	ACCOUNT_NAME VARCHAR(50) NOT NULL, --ACCOUNTNAME
	PASSWORD VARCHAR(100), --PASSWORD
	IP_NUMBER VARCHAR(50), --IPNUMBER
	BROWSER_TYPE VARCHAR(150), --BROWSERTYPE
	SUCCESS BOOLEAN NOT NULL, --SUCCESS
	CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW()
);
ALTER TABLE TUSER_LOGIN_ATTEMPT OWNER TO POSTGRES;


CREATE TABLE TUSER_LOG 
(
	ID SERIAL PRIMARY KEY NOT NULL,	
	USER_ID INTEGER UNIQUE NOT NULL,
	PASSWORD_CREATED TIMESTAMP NOT NULL DEFAULT NOW(),
	PASSWORD_GENERATED BOOLEAN,
	LOGIN_TRYS INTEGER,
	SUCCESSFUL_LOGIN TIMESTAMP,
	FAILED_LOGIN TIMESTAMP,
	IP_ACCESS VARCHAR(255),
	FOREIGN KEY (USER_ID) REFERENCES TUSER(ID)
);
ALTER TABLE TUSER_LOG OWNER TO POSTGRES;

DROP INDEX IF EXISTS IDX_TUSER_USERNAME;
CREATE INDEX IDX_TUSER_USERNAME ON TUSER (USERNAME);

/* ---------------------------------------------------------------------- */
/* ADD TABLE "ROLES"                                                      */
/* ---------------------------------------------------------------------- */

CREATE TABLE TRBAC_ROLE (
    ID SERIAL NOT NULL,
    NAME CHARACTER VARYING(100) NOT NULL,
    NAME_EN CHARACTER VARYING(100),
    NAME_SR CHARACTER VARYING(100),
    CODE CHARACTER VARYING(10) NOT NULL,
    PRIMARY KEY (ID)
);

DROP INDEX IF EXISTS IDX_TRBAC_ROLE_NAME;
DROP INDEX IF EXISTS IDX_TRBAC_ROLE_CODE;
CREATE INDEX IDX_TRBAC_ROLE_NAME ON TRBAC_ROLE (NAME);
CREATE INDEX IDX_TRBAC_ROLE_CODE ON TRBAC_ROLE (CODE);

/* ---------------------------------------------------------------------- */
/* ADD TABLE "USER_ROLE"                                                  */
/* ---------------------------------------------------------------------- */

CREATE TABLE TRBAC_USER_ROLE (
    ID SERIAL PRIMARY KEY NOT NULL,
    USER_ID INTEGER NOT NULL,
    ROLE_ID INTEGER NOT NULL,
    /*
    FOREIGN KEY (USER_ID) REFERENCES TUSER(ID),
    FOREIGN KEY (ROLE_ID) REFERENCES TROLE(ID),
    */
    UNIQUE (USER_ID, ROLE_ID)
);

DROP INDEX IF EXISTS IDX_TRBAC_USER_ROLE_1;
DROP INDEX IF EXISTS IDX_TRBAC_USER_ROLE_2;
CREATE INDEX IDX_TRBAC_USER_ROLE_1 ON TRBAC_USER_ROLE (USER_ID);
CREATE INDEX IDX_TRBAC_USER_ROLE_2 ON TRBAC_USER_ROLE (ROLE_ID);

/* ---------------------------------------------------------------------- */
/* ADD TABLE "SESSIONS"                                                   */
/* ---------------------------------------------------------------------- */

CREATE TABLE TRBAC_SESSION (
    ID SERIAL NOT NULL,
    USER_ID INTEGER  NOT NULL,
    NAME CHARACTER VARYING(64)  NOT NULL,
    CREATED DATE DEFAULT CURRENT_TIMESTAMP  NOT NULL,
    PRIMARY KEY (ID)
);

/* ---------------------------------------------------------------------- */
/* ADD TABLE "OPERATIONS"                                                 */
/* BOOLEAN VALUES ARE STORED AS INTEGERS 0 (FALSE) AND 1 (TRUE). 		  */
/* _CREATE, _READ, _UPDATE, _DELETE, _PRINT, _EXECUTE, _APPROVE, _LOCKED */
/* ---------------------------------------------------------------------- */

CREATE TABLE TRBAC_OPERATION (
    ID SERIAL NOT NULL,
    NAME CHARACTER VARYING(20) NOT NULL UNIQUE,
    PRIMARY KEY (ID)
);

/* ---------------------------------------------------------------------- */
/* ADD TABLE "OBJECTS"                                                    */
/* ---------------------------------------------------------------------- */

CREATE TABLE TRBAC_OBJECT (
    ID SERIAL NOT NULL,
    NAME CHARACTER VARYING(100) NOT NULL,
    CODE CHARACTER VARYING(20) NOT NULL UNIQUE,
    LOCKED SMALLINT DEFAULT 0  NOT NULL,
    PARENT_ID INTEGER,
    PRIMARY KEY (ID)
    --FOREIGN KEY (PARENT_ID) REFERENCES TRBAC_OBJECT(ID)
);

/* ---------------------------------------------------------------------- */
/* ADD TABLE "ROLE_PERMISSION"                                            */
/* ---------------------------------------------------------------------- */

CREATE TABLE TRBAC_PERMISSION (
    ID BIGSERIAL PRIMARY KEY NOT NULL,
    ROLE_ID INTEGER NOT NULL,
    OBJECT_ID INTEGER NOT NULL,
    OPERATION_ID INTEGER NOT NULL,
    
    FOREIGN KEY (ROLE_ID) REFERENCES TRBAC_ROLE(ID),
    FOREIGN KEY (OBJECT_ID) REFERENCES TRBAC_OBJECT(ID),
    FOREIGN KEY (OPERATION_ID) REFERENCES TRBAC_OPERATION(ID),
    
    UNIQUE (ROLE_ID, OBJECT_ID, OPERATION_ID)
);

DROP INDEX IF EXISTS IDX_TRBAC_PERMISSION_ROLE_ID;
DROP INDEX IF EXISTS IDX_TRBAC_PERMISSION_OBJECT_ID;
DROP INDEX IF EXISTS IDX_TRBAC_PERMISSION_OPERATION_ID;
CREATE INDEX IDX_TRBAC_PERMISSION_ROLE_ID ON TRBAC_PERMISSION (ROLE_ID);
CREATE INDEX IDX_TRBAC_PERMISSION_OBJECT_ID ON TRBAC_PERMISSION (OBJECT_ID);
CREATE INDEX IDX_TRBAC_PERMISSION_OPERATION_ID ON TRBAC_PERMISSION (OPERATION_ID);

/* ---------------------------------------------------------------------- */
/* ADD TABLE "SESSION_ROLE"                                               */
/* ---------------------------------------------------------------------- */

CREATE TABLE TRBAC_SESSION_ROLE (
	ID SERIAL PRIMARY KEY NOT NULL,
	ROLE_ID INTEGER  NOT NULL,
	SESSION_ID INTEGER  NOT NULL,
	UNIQUE (ROLE_ID, SESSION_ID)
);

DROP INDEX IF EXISTS IDX_TRBAC_SESSION_ROLE_ROLE_ID;
DROP INDEX IF EXISTS IDX_TRBAC_SESSION_ROLE_SESSION_ID;
CREATE INDEX IDX_TRBAC_SESSION_ROLE_ROLE_ID ON TRBAC_SESSION_ROLE (ROLE_ID);
CREATE INDEX IDX_TRBAC_SESSION_ROLE_SESSION_ID ON TRBAC_SESSION_ROLE (SESSION_ID);



/* ---------------------------------------------------------------------- */
/* ADD FOREIGN KEY CONSTRAINTS                                            */
/* ---------------------------------------------------------------------- */

ALTER TABLE TRBAC_USER_ROLE ADD CONSTRAINT TRBAC_USER_ROLE_USER 
    FOREIGN KEY (USER_ID) REFERENCES TUSER (ID) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE TRBAC_USER_ROLE ADD CONSTRAINT TRBAC_USER_ROLE_ROLE 
    FOREIGN KEY (ROLE_ID) REFERENCES TRBAC_ROLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE TRBAC_SESSION ADD CONSTRAINT TRBAC_SESSION_USER 
    FOREIGN KEY (USER_ID) REFERENCES TUSER (ID) ON DELETE CASCADE ON UPDATE CASCADE;


WITH RECURSIVE OBJECTTREE(ID, PARENT_ID, OBJECT_NAME, CODE, PATH, DEPTH) AS (
    SELECT ID, PARENT_ID, NAME, CODE, NULL::INT[] || PARENT_ID, 1 FROM TRBAC_OBJECT WHERE PARENT_ID = 1 -- SET ROOT ID

  UNION ALL

    SELECT 
    T.ID, T.PARENT_ID,
    NAME, T.CODE, RT.PATH || T.PARENT_ID, DEPTH + 1
    FROM TRBAC_OBJECT T
    JOIN OBJECTTREE RT ON RT.ID = T.PARENT_ID
  )
SELECT * FROM OBJECTTREE;


-- VIEW: PUBLIC.RBAC_OBJECT_VIEW
DROP VIEW IF EXISTS PUBLIC.RBAC_OBJECT_VIEW;

CREATE OR REPLACE VIEW PUBLIC.RBAC_OBJECT_VIEW AS 
 WITH RECURSIVE OBJECTTREE(ID, PARENT_ID, OBJECT_NAME, CODE, PATH, DEPTH) AS (
                 SELECT TRBAC_OBJECT.ID,
                    TRBAC_OBJECT.PARENT_ID,
                    TRBAC_OBJECT.NAME,
                    TRBAC_OBJECT.CODE,
                    NULL::INTEGER[] || TRBAC_OBJECT.PARENT_ID,
                    1
                   FROM TRBAC_OBJECT
                  WHERE TRBAC_OBJECT.PARENT_ID = 1
        UNION ALL
                 SELECT T.ID,
                    T.PARENT_ID,
                    T.NAME,
                    T.CODE,
                    RT.PATH || T.PARENT_ID,
                    RT.DEPTH + 1
                   FROM TRBAC_OBJECT T
              JOIN OBJECTTREE RT ON RT.ID = T.PARENT_ID
        )
 SELECT OBJECTTREE.ID,
    OBJECTTREE.PARENT_ID,
    OBJECTTREE.OBJECT_NAME,
    OBJECTTREE.CODE,
    OBJECTTREE.PATH,
    OBJECTTREE.DEPTH
   FROM OBJECTTREE
  ORDER BY OBJECTTREE.OBJECT_NAME, OBJECTTREE.PATH;

ALTER TABLE PUBLIC.RBAC_OBJECT_VIEW OWNER TO POSTGRES;
/*END - CREATE RBAC TABLES*/

CREATE TABLE TDOMAIN
(
	ID SERIAL PRIMARY KEY,
	DOMNAME VARCHAR(18) NOT NULL,
	COLNAME VARCHAR(18) NOT NULL,
	TABNAME VARCHAR(30) NOT NULL,
	DOMTYPE CHAR(1) NOT NULL,
	COLLLENGTH INTEGER NOT NULL,
	MANDATORY CHAR(1) NOT NULL
);
ALTER TABLE TDOMAIN OWNER TO POSTGRES;


CREATE TABLE TTEXTDOMAIN
(
	ID BIGSERIAL PRIMARY KEY,
	DOMNAME VARCHAR(30) NOT NULL,
	DOMVALUE VARCHAR(30) NOT NULL,
	DOMKEY VARCHAR(6) NOT NULL,
	SORT INTEGER NOT NULL,
	DOMTEXT VARCHAR(150) NOT NULL,
	DOMTEXT_EN VARCHAR(150),	
	DOMTEXT_SR VARCHAR(150),
	UNIQUE (DOMNAME, DOMVALUE)
);
ALTER TABLE TTEXTDOMAIN OWNER TO POSTGRES;

CREATE TABLE TGIS_REGION
(
	ID SERIAL PRIMARY KEY,
	NAME CHARACTER VARYING(80) NOT NULL,
	NAME_SR CHARACTER VARYING(80),
	NAME_EN CHARACTER VARYING(80),
	code character VARYING(2),
	
	THE_GEOM GEOMETRY,
	CONSTRAINT ENFORCE_DIMS_THE_GEOM CHECK ((ST_NDIMS(THE_GEOM) = 2)),
	CONSTRAINT ENFORCE_GEOTYPE_THE_GEOM CHECK (GEOMETRYTYPE(THE_GEOM) = 'POLYGON'::TEXT OR
											  (GEOMETRYTYPE(THE_GEOM) = 'MULTIPOLYGON'::TEXT) OR 
											  (THE_GEOM IS NULL)),
	CONSTRAINT ENFORCE_SRID_THE_GEOM CHECK ((ST_SRID(THE_GEOM) = 900916))
);

 CREATE TABLE TGIS_SUBREGION
(
	ID BIGSERIAL PRIMARY KEY,
	REGION_ID INTEGER NOT NULL,
	NAME CHARACTER VARYING(80) NOT NULL,
	NAME_SR CHARACTER VARYING(80),
	NAME_EN CHARACTER VARYING(80),
	THE_GEOM GEOMETRY NOT NULL,
	
	FOREIGN KEY (REGION_ID) REFERENCES TGIS_REGION(ID),
	CONSTRAINT ENFORCE_DIMS_THE_GEOM CHECK ((ST_NDIMS(THE_GEOM) = 2)),
	CONSTRAINT ENFORCE_GEOTYPE_THE_GEOM CHECK (GEOMETRYTYPE(THE_GEOM) = 'POLYGON'::TEXT OR
											  (GEOMETRYTYPE(THE_GEOM) = 'MULTIPOLYGON'::TEXT) OR 
											  (THE_GEOM IS NULL)),
	CONSTRAINT ENFORCE_SRID_THE_GEOM CHECK ((ST_SRID(THE_GEOM) = 900916))
); 

CREATE TABLE TGIS_CADASTRAL_MUNICIPALITY
(
	ID BIGSERIAL PRIMARY KEY,
	NAME VARCHAR(100) NOT NULL,
	NAME_SR VARCHAR(100),
	NAME_EN VARCHAR(100),
	NR INTEGER NOT NULL UNIQUE,
	CODE CHARACTER VARYING(3),
	REGION_ID INTEGER NOT NULL,
	THE_GEOM GEOMETRY NOT NULL ,
	FOREIGN KEY (REGION_ID) REFERENCES TGIS_REGION(ID),
	CONSTRAINT ENFORCE_GEOTYPE_THE_GEOM CHECK (GEOMETRYTYPE(THE_GEOM) = 'POLYGON'::TEXT OR
											  (GEOMETRYTYPE(THE_GEOM) = 'MULTIPOLYGON'::TEXT) OR 
											  (THE_GEOM IS NULL)),
	CONSTRAINT ENFORCE_SRID_THE_GEOM CHECK (ST_SRID(THE_GEOM) = 900916)
);
CREATE TABLE TGIS_CADASTRAL_ZONE
(
	ID BIGSERIAL PRIMARY KEY,
	NAME VARCHAR(100) NOT NULL,
	NAME_SR VARCHAR(100),
	NAME_EN VARCHAR(100),
	MUNICIPALITY_ID INTEGER NOT NULL,
	THE_GEOM GEOMETRY NOT NULL,
	CAD_ID VARCHAR(50),
	FOREIGN KEY (MUNICIPALITY_ID) REFERENCES TGIS_CADASTRAL_MUNICIPALITY(ID),
	CONSTRAINT ENFORCE_GEOTYPE_THE_GEOM CHECK (GEOMETRYTYPE(THE_GEOM) = 'POLYGON'::TEXT OR
											  (GEOMETRYTYPE(THE_GEOM) = 'MULTIPOLYGON'::TEXT) OR 
											  (THE_GEOM IS NULL)),
	CONSTRAINT ENFORCE_SRID_THE_GEOM CHECK (ST_SRID(THE_GEOM) = 900916)
);

CREATE TABLE TUNITS_METRIC
(
  ID BIGSERIAL NOT NULL,
  SYMBOL CHARACTER VARYING(10),
  UNIT DOUBLE PRECISION,
  NAME CHARACTER VARYING(50),
  NAME_SR CHARACTER VARYING(50),
  NAME_EN CHARACTER VARYING(50),
  METRIC CHARACTER VARYING(20),
  MEASUREMENT CHARACTER VARYING(50),
  RELATIONSHIP CHARACTER VARYING(50),
  ACTIVE BOOLEAN DEFAULT TRUE,
  WEIGHT CHARACTER(1) NOT NULL DEFAULT '0'::BPCHAR,
  CONSTRAINT TUNITS_METRIC_PKEY PRIMARY KEY (ID)
);

CREATE TABLE TADDRESS
(
 ID BIGSERIAL PRIMARY KEY,
 STREET CHARACTER VARYING(80) NOT NULL,
 HOME_NR CHARACTER VARYING(5) NOT NULL,
 ZIP_CODE CHARACTER(9) NOT NULL,
 PLACE CHARACTER VARYING(50) NOT NULL,
 COUNTRY CHARACTER VARYING(50) NOT NULL,
 PHONE CHARACTER VARYING(30),
 MOBILE CHARACTER VARYING(30),
 EMAIL CHARACTER VARYING(50),
 NOTE CHARACTER VARYING(255),
 LAT DOUBLE PRECISION,
 LON DOUBLE PRECISION
);


CREATE TABLE TPARTY (
 ID BIGINT PRIMARY KEY,
 PARTY_TYPE CHAR(1) NOT NULL CHECK (PARTY_TYPE IN ('P', 'O', 'E', 'D', 'B')), --P=Person, O=Organisation, E=Employee, D=Department, B=Business Partner-- 
 ADDRESS_ID BIGINT,
 ACTIVE BOOLEAN,
 --CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
 FOREIGN KEY (ADDRESS_ID) REFERENCES TADDRESS (ID)
);

CREATE TABLE TPARTY_USER
(
 ID SERIAL PRIMARY KEY NOT NULL,
 PARTY_ID INTEGER NOT NULL,
 USER_ID INTEGER NOT NULL UNIQUE,

 FOREIGN KEY (PARTY_ID) REFERENCES TPARTY(ID),
 FOREIGN KEY (USER_ID) REFERENCES TUSER(ID)
); 
	
CREATE TABLE TPARTY_ROLE (
 ID BIGSERIAL PRIMARY KEY,
 PARTY_ID INTEGER NOT NULL,
 ROLE_CODE VARCHAR(10) NOT NULL,
 DATE_FROM DATE,
 DATE_TO DATE,
 FOREIGN KEY (PARTY_ID) REFERENCES TPARTY (ID)
); 

--I.E. RELATIONSHIP 
-- EMPLOYMENT = [EMPLOYER, EMPLOYEE], MARRIAGE = [WIFE, HUSBAND], BUSINESS = [CUSTOMER, SUPPLIER], 
-- VALUE CHAIN = [PRODUCER, SUPPLIER]

CREATE TABLE TPARTY_RELATIONSHIP (
ID BIGSERIAL PRIMARY KEY,
FROM_RELATIONSHIP INTEGER NOT NULL,
TO_RELATIONSHIP INTEGER NOT NULL,

FROM_PARTY_ROLE_NAME VARCHAR(10) NOT NULL,
TO_PARTY_ROLE_NAME VARCHAR(10) NOT NULL,
START_DATA DATE NOT NULL,
END_DATE DATE,

FOREIGN KEY (FROM_RELATIONSHIP) REFERENCES TPARTY (ID),
FOREIGN KEY (TO_RELATIONSHIP) REFERENCES TPARTY (ID)
);

CREATE TABLE TPERSON (
 ID BIGSERIAL PRIMARY KEY,
 PARTY_ID INTEGER,
 FIRST_NAME VARCHAR(30) NOT NULL,
 LAST_NAME VARCHAR(30) NOT NULL,
 BIRTHDATE DATE NOT NULL,
 PERSONAL_ID VARCHAR(20) UNIQUE, 
 GENDER VARCHAR(1) NOT NULL CHECK (GENDER IN ('M', 'F')), --ENUM('M','F')
 DEGREE VARCHAR(20), --academic degree
 ETHNICITY  VARCHAR(3) NOT NULL,
 PERS_WITH_LMT_ABILITIES BOOLEAN NOT NULL,--persons with limited abilities
 
 NOTES TEXT,
 PHOTO BYTEA,
 
 FOREIGN KEY (PARTY_ID) REFERENCES TPARTY (ID) ON DELETE CASCADE
);


CREATE TABLE TORGANISATION (
ID INTEGER PRIMARY KEY,
PARENT_ID INTEGER,
ORGA_NAME VARCHAR(100) NOT NULL,
ORGA_NAME_EN VARCHAR(100),
ORGA_NAME_SR VARCHAR(100),
ORGA_TYPE CHAR(1) CHECK (ORGA_TYPE IN ('O', 'V', 'D', 'S', 'W', 'I')), --O=ORGANISATION, DIVISION=V, D=DEPARTMENT, S=SECTOR
CODE VARCHAR(20) NOT NULL,
OPER_LEVEL_VAL VARCHAR(1) NOT NULL, -- OPERATING LEVEL: CENTRAL = C, REGINAL = R, M=MUNICPALITY etc
OPER_LEVEL SMALLINT NOT NULL, -- OPERATING LEVEL: CENTRAL=1, REGINAL=2, MUNICPALITY=3 etc
ORGA_CATEGORY VARCHAR(3), --GOVERMENT, NGO, PARTNER, CHARITIES, COMMUNITIES
--LOCATION_REGION, LOCAL
START_DATE DATE,
END_DATE DATE,
LOGO BYTEA,
FOREIGN KEY (PARENT_ID) REFERENCES TPARTY (ID)
--FOREIGN KEY (PARTY_ID, PARTY_TYPE) REFERENCES PARTIES (PARTY_ID, PARTY_TYPE) ON DELETE CASCADE
);


CREATE TABLE TORGANISATION_MUN (
ID INTEGER PRIMARY KEY,
ORG_ID INTEGER NOT NULL,
MUN_ID INTEGER NOT NULL,

FOREIGN KEY (ORG_ID) REFERENCES TORGANISATION (ID),
FOREIGN KEY (MUN_ID) REFERENCES TGIS_CADASTRAL_MUNICIPALITY (ID),
UNIQUE (ORG_ID, MUN_ID)
);


-- I.E. AS BEKIM BAJRAKTARI ASSIGNET TO HR FOR ONE YEAR FROM APRIL 1ST 
CREATE TABLE THRM_EMPLOYEE (
ID INTEGER PRIMARY KEY,
ORGANISATION_ID INTEGER NOT NULL,
PERSON_ID INTEGER NOT NULL,
CONCTRACT_TYPE CHAR(3) NOT NULL CHECK (CONCTRACT_TYPE IN ('FTC', 'PTC', 'FTP', 'PTP', 'REC')), --'FTC'=FULL TIME CONTRACT, 'PTC'=PART TIME CONTRACT, 'FTP'=FULL TIME PERMANENT, 'PTP'= PART TIME PERMANENT, 'REC'=RECRUIT
JOB_TITLE  VARCHAR(3) NOT NULL, --LHL-Leading high level,'LDL'-Leading  level,'PRL'-Professional level,'ATL'-Administrative and technical level,'PSV'-Public servants
FUNCTIONAL_TITLE VARCHAR(100),
GRADE VARCHAR(100),

PAYROLL VARCHAR(20) NOT NULL DEFAULT 'TBD',
KEYCODE VARCHAR(10) NOT NULL DEFAULT '9999',
EMP_SSN_NUM VARCHAR(100) DEFAULT '',
EMP_SIN_NUM VARCHAR(100) DEFAULT '',
EMP_OTHER_ID VARCHAR(100) DEFAULT '',
WORK_STATION VARCHAR(30) DEFAULT NULL,

STEP VARCHAR(100),
DATE_FROM DATE , -- EG FROM APRIL 1ST
DATE_TO DATE , -- EG FOR ONE YEAR
ROLE_CODE VARCHAR(2) NOT NULL, -- EG AS TEAM LEADER, DIRECTOR, CHIEF

NOTE TEXT,
CREATED_BY INTEGER NOT NULL,
CREATED_DATE TIMESTAMP NOT NULL,

FOREIGN KEY (ORGANISATION_ID) REFERENCES TORGANISATION (ID),
FOREIGN KEY (PERSON_ID) REFERENCES TPERSON (ID),
FOREIGN KEY (CREATED_BY) REFERENCES TPARTY(ID)
);

CREATE TABLE THRM_EMPLOYEE_SOS_CONTACT (
ID BIGSERIAL PRIMARY KEY,
EMPLOYEE_ID BIGINT NOT NULL,
CONTACT_NAME VARCHAR(100) NOT NULL,
RELATIONSHIP VARCHAR(50) DEFAULT NULL,
HOME_PHONE VARCHAR(20) DEFAULT NULL,
WORK_PHONE VARCHAR(20) DEFAULT NULL,
MOBILE_PHONE VARCHAR(20) DEFAULT NULL,
EMAIL VARCHAR(20) DEFAULT NULL,

NOTE TEXT,
CREATED_BY INTEGER NOT NULL,
CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
FOREIGN KEY (CREATED_BY) REFERENCES TPARTY (ID),	
FOREIGN KEY (EMPLOYEE_ID) REFERENCES THRM_EMPLOYEE (ID)
);


CREATE TABLE THRM_EMPLOYEE_DOC (
ID BIGSERIAL PRIMARY KEY,
EMPLOYEE_ID BIGINT NOT NULL,
DOCUMENT_TYPE VARCHAR(2) NOT NULL CHECK (DOCUMENT_TYPE IN ('PE', 'EM', 'RE', 'OT')), --P=PERSONAL DOCS, E=EMPLOYEE DOCS, R=RECRUIT DOCS, O=OTHER, S=SKILL

DOC_TYPE VARCHAR(100) NOT NULL, 
DOC_NAME VARCHAR(100) NOT NULL, 
DOC_SIZE BIGINT NOT NULL,
DOC BYTEA NOT NULL,

NOTE TEXT,
CREATED_BY INTEGER NOT NULL,
CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),

FOREIGN KEY (CREATED_BY) REFERENCES TPARTY (ID),
FOREIGN KEY (EMPLOYEE_ID) REFERENCES THRM_EMPLOYEE (ID)
);

CREATE TABLE THRM_EMPLOYEE_SKILL (
ID BIGSERIAL PRIMARY KEY,
EMPLOYEE_ID INTEGER NOT NULL,
SKILL_TYPE VARCHAR(1) NOT NULL CHECK (SKILL_TYPE IN ('S', 'E', 'C', 'T')), -- S=Skills, E=Education, C=Certificate, T=Training
EDUCATION_TYPE VARCHAR(2) CHECK (EDUCATION_TYPE IN ('HS','HW', 'BC','FY', 'MC', 'DS')), -- HS=HIGHT SCHOOL, BC=BACHELOR, MC=MASTER DEGREES, DS=DOCTOR OF SCIENCE
SKILL_NAME VARCHAR(20) NULL,
INSTITUTE VARCHAR(400) DEFAULT NULL,
DATE_START DATE,
DATE_END DATE,
DETAILS VARCHAR(400) DEFAULT NULL,

DOC_TYPE VARCHAR(100), 
DOC_NAME VARCHAR(100), 
DOC_SIZE BIGINT,
DOC BYTEA,
	
NOTE TEXT,

CREATED_BY INTEGER NOT NULL,
CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
FOREIGN KEY (CREATED_BY) REFERENCES TPARTY (ID),	
FOREIGN KEY (EMPLOYEE_ID) REFERENCES THRM_EMPLOYEE (ID)
);


/* 
DROP TABLE IF EXISTS THRM_EMPLOYEE_EDUCATION CASCADE;
CREATE TABLE THRM_EMPLOYEE_EDUCATION (
	ID BIGSERIAL PRIMARY KEY,
	EMPLOYEE_ID INTEGER NOT NULL,
	EDUCATION_TYPE VARCHAR(2) NOT  NULL CHECK (EDUCATION_TYPE IN ('HS', 'BC', 'MC', 'DR')), -- HS=HIGHT SCHOOL, BC=BACHELOR, MC=MASTER DEGREES, DR=DOCTOR OF SCIENCE
	INSTITUTE VARCHAR(400) DEFAULT NULL,
	DATE_START DATE,
	DATE_END DATE,
	
	FOREIGN KEY (EMPLOYEE_ID) REFERENCES THRM_EMPLOYMENT (EMPLOYEE_ID) ,
 	UNIQUE (EMPLOYEE_ID,EDUCATION_TYPE)
); */
/* 
DROP TABLE IF EXISTS THRM_EMPLOYEE_CERT_TRAINING CASCADE;
CREATE TABLE THRM_EMPLOYEE_CERT_TRAINING (
	ID BIGSERIAL PRIMARY KEY,
	EMPLOYEE_ID INTEGER NOT NULL,
	CT_TYPE VARCHAR(1) NOT  NULL CHECK (CT_TYPE IN ('C', 'T')), -- C=CERTIFICATION, T=TRAINING
	CT_NAME VARCHAR(20) NULL,
	INSTITUTE VARCHAR(400) DEFAULT NULL,
	DATE_START DATE,
	DATE_END DATE,
	ATTACHMENT BYTEA,
	
	FOREIGN KEY (EMPLOYEE_ID) REFERENCES THRM_EMPLOYMENT (EMPLOYEE_ID)
); */


CREATE TABLE THRM_NATIONALITY (
ID SERIAL PRIMARY KEY,
NAME VARCHAR(120) NOT NULL,
NAME_EN VARCHAR(120) DEFAULT NULL,
NAME_SR VARCHAR(120) DEFAULT NULL
);

CREATE TABLE THRM_LANGUAGE (
ID SERIAL PRIMARY KEY,
NAME VARCHAR(120) NOT NULL,
NAME_EN VARCHAR(120) DEFAULT NULL,
NAME_SR VARCHAR(120) DEFAULT NULL
);

CREATE TABLE THRM_EMPLOYEE_LANGUAGE (
ID BIGSERIAL PRIMARY KEY,
EMPLOYEE_ID INTEGER NOT NULL,
LANGUAGE_ID INTEGER NOT NULL,
READING VARCHAR(3) NOT NULL CHECK (READING IN ('EP', 'LWP', 'PWP', 'FPP', 'NBP')), --EP='ELEMENTARY PROFICIENCY', LWP='LIMITED WORKING PROFICIENCY', PWP='PROFESSIONAL WORKING PROFICIENCY', FPP='FULL PROFESSIONAL PROFICIENCY','NATIVE OR BILINGUAL PROFICIENCY'
SPEAKING VARCHAR(3) NOT NULL CHECK (SPEAKING IN ('EP', 'LWP', 'PWP', 'FPP', 'NBP')), --EP='ELEMENTARY PROFICIENCY', LWP='LIMITED WORKING PROFICIENCY', PWP='PROFESSIONAL WORKING PROFICIENCY', FPP='FULL PROFESSIONAL PROFICIENCY','NATIVE OR BILINGUAL PROFICIENCY'
WRITING VARCHAR(3) NOT NULL CHECK (WRITING IN ('EP', 'LWP', 'PWP', 'FPP', 'NBP')), --EP='ELEMENTARY PROFICIENCY', LWP='LIMITED WORKING PROFICIENCY', PWP='PROFESSIONAL WORKING PROFICIENCY', FPP='FULL PROFESSIONAL PROFICIENCY','NATIVE OR BILINGUAL PROFICIENCY'
UNDERSTANDING VARCHAR(3) NOT NULL CHECK (UNDERSTANDING IN ('EP', 'LWP', 'PWP', 'FPP', 'NBP')), --EP='ELEMENTARY PROFICIENCY', LWP='LIMITED WORKING PROFICIENCY', PWP='PROFESSIONAL WORKING PROFICIENCY', FPP='FULL PROFESSIONAL PROFICIENCY','NATIVE OR BILINGUAL PROFICIENCY'

FOREIGN KEY (EMPLOYEE_ID) REFERENCES THRM_EMPLOYEE (ID),
FOREIGN KEY (LANGUAGE_ID) REFERENCES THRM_LANGUAGE (ID)
);

CREATE TABLE THRM_LEAVE_TYPE (
ID BIGSERIAL PRIMARY KEY,
CODE VARCHAR(3) NOT NULL UNIQUE,
NAME VARCHAR(50) NOT NULL,
NAME_EN VARCHAR(50), 
NAME_SR VARCHAR(50),
ISPAID SMALLINT NOT NULL DEFAULT 0,
ISAWOL SMALLINT NOT NULL DEFAULT 0,
ISANNUAL SMALLINT NOT NULL DEFAULT 0,	
DELETED SMALLINT NOT NULL DEFAULT 0,
EXCLUDE_IN_REPORTS_IF_NO_ENTITLEMENT SMALLINT NOT NULL DEFAULT 0,
OPERATIONAL_COUNTRY_ID INTEGER DEFAULT NULL,
BG_COLOR VARCHAR(20) DEFAULT NULL,

NOTE TEXT,
CREATED_BY INTEGER NOT NULL,
CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
FOREIGN KEY (CREATED_BY) REFERENCES TPARTY (ID)
); 

/*
leave 			- das Abwesenheitsergebnis
leave entitlement	- der Urlaubsanspruch
entitlement 		- die Anspruchsberechtigung
entitlement to benefits - Anspruch auf eine Leistung
entitlement to benefits - die Anspruchsberechtigung
entitlement to benefits - die Leistungsberechtigung
entitlement to damages	- Anspruch auf Schadenersatz (auch: Schadensersatz)
entitlement to disposal - das Verfügungsrecht
entitlement to holidays - der Urlaubsanspruch, die Urlaubsberechtigung 
*/

CREATE TABLE THRM_LEAVE_ENTITLEMENT (
ID BIGSERIAL PRIMARY KEY,
EMPLOYEE_ID INTEGER NOT NULL,
--LEAVE_TYPE VARCHAR(2) NOT NULL CHECK (LEAVE_TYPE IN ('AN', 'MT', 'ME', 'OT')), -- AN=ANNUAL, MT=MATERNITY, ME=MEDICAL, OT=OTHER
LEAVE_TYPE_ID INTEGER NOT NULL,
NO_OF_DAYS DOUBLE PRECISION NOT NULL,
DAYS_USED DOUBLE PRECISION NOT NULL DEFAULT 0,
FROM_DATE DATE NOT NULL,
TO_DATE DATE,

NOTE TEXT,
CREATED_BY INTEGER NOT NULL,
CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
FOREIGN KEY (CREATED_BY) REFERENCES TPARTY (ID),
FOREIGN KEY (EMPLOYEE_ID) REFERENCES THRM_EMPLOYEE (ID),
FOREIGN KEY (LEAVE_TYPE_ID) REFERENCES THRM_LEAVE_TYPE (ID)
	
);

/*
leave - das Abwesenheitsergebnis
*/

CREATE TABLE THRM_LEAVE (
	ID BIGSERIAL PRIMARY KEY,
	EMPLOYEE_ID INTEGER NOT NULL,
	--LEAVE_TYPE VARCHAR(2) NOT NULL CHECK (LEAVE_TYPE IN ('AN', 'MT', 'ME', 'OT')), -- AN=ANNUAL, MT=MATERNITY, ME=MEDICAL, OT=OTHER
	LEAVE_TYPE_ID INTEGER NOT NULL,
	FROM_DATE DATE NOT NULL,
	TO_DATE DATE NOT NULL,
	DAYS_REQUESTED DOUBLE PRECISION NOT NULL,
	STATUS VARCHAR(2) NOT NULL DEFAULT 'P' CHECK (STATUS IN ('A', 'P', 'R')), -- A=APPROVED', P='PENDING', R='REJECTED'
	REQUESTED_USER_ID INTEGER NOT NULL,
	REQUESTED_DATE DATE DEFAULT NOW(),
	REQUESTED_COMMENTS VARCHAR(256) DEFAULT NULL,
	DAYS_APPROVED DOUBLE PRECISION,
	APPROVED_USER_ID INTEGER NOT NULL,
	APPROVED_DATE DATE ,
	APPROVED_COMMENTS VARCHAR(256) DEFAULT NULL,
	RETURN_DATE DATE,
	DAYS_SPENT DOUBLE PRECISION,
	
	DOC_TYPE VARCHAR(100), 
	DOC_NAME VARCHAR(100), 
	DOC_SIZE BIGINT,
	DOC BYTEA,

	NOTE TEXT,
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
	
	FOREIGN KEY (EMPLOYEE_ID) REFERENCES THRM_EMPLOYEE (ID),
	FOREIGN KEY (LEAVE_TYPE_ID) REFERENCES THRM_LEAVE_TYPE (ID),
	FOREIGN KEY (APPROVED_USER_ID) REFERENCES TPARTY (ID),
	FOREIGN KEY (CREATED_BY) REFERENCES TPARTY (ID)
);

CREATE TABLE THRM_DECISION_TYPE(
	ID BIGSERIAL PRIMARY KEY,
	NAME_AL VARCHAR(255) NOT NULL,
	NAME_EN VARCHAR(255) NOT NULL,
	NAME_SR VARCHAR(255) ,
	NOTE TEXT,
 	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
	FOREIGN KEY (CREATED_BY) REFERENCES TPERSON (ID)

);

CREATE TABLE THRM_DECISION (
	ID BIGSERIAL PRIMARY KEY,
	DECISION_TYPE INTEGER NOT NULL,
	CURRENT_STATUS INTEGER , 
	DATE_OF_REQUEST DATE NOT NULL,
	NOTE TEXT,
	FOREIGN KEY (DECISION_TYPE) REFERENCES THRM_DECISION_TYPE (ID)
);

CREATE TABLE THRM_DECISION_EMPLOYEE(
 ID BIGSERIAL PRIMARY KEY NOT NULL,
 EMPLOYEE_ID INTEGER NOT NULL,
 DECISION_ID INTEGER NOT NULL,
 FOREIGN KEY (EMPLOYEE_ID) REFERENCES THRM_EMPLOYEE(ID),
 FOREIGN KEY (DECISION_ID) REFERENCES THRM_DECISION(ID)
 );


CREATE TABLE THRM_DECISION_STATUS (
	ID SERIAL PRIMARY KEY NOT NULL,
	DECISION_ID INTEGER NOT NULL, 
	STATUS VARCHAR(3) NOT NULL,  --CRE=CREATED ,APP=APPROVAL, REJ=REJECTED ,REL=RELEASE
	NOTE TEXT,
	CREATE_BY INTEGER NOT NULL,
	CREATE_DATE TIMESTAMP NOT NULL DEFAULT now(),
	FOREIGN KEY (CREATE_BY) REFERENCES THRM_EMPLOYEE(ID)
);

ALTER TABLE THRM_DECISION ADD CONSTRAINT THRM_DECISION_STATUS_ID_FKEY FOREIGN KEY (CURRENT_STATUS) REFERENCES THRM_DECISION_STATUS(ID);
ALTER TABLE THRM_DECISION_STATUS ADD CONSTRAINT THRM_DECISION_ID_FKEY FOREIGN KEY (DECISION_ID) REFERENCES THRM_DECISION (ID);


 


CREATE TABLE THRM_DECISION_DOC (
	ID BIGSERIAL PRIMARY KEY,
	DECISION_ID BIGINT NOT NULL,
	STATUS_NAME VARCHAR(3),
	DOC_TYPE VARCHAR(100) NOT NULL, 
	DOC_NAME VARCHAR(100) NOT NULL, 
	DOC_SIZE BIGINT NOT NULL,
	DOC BYTEA NOT NULL,
	
	NOTE TEXT,
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
	
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE (ID),
	FOREIGN KEY (DECISION_ID) REFERENCES THRM_DECISION (ID)
	);

	
 CREATE TABLE THRM_ANNUAL_PLAN(
	ID BIGSERIAL PRIMARY KEY,
	ANNUAL_PLAN_AL VARCHAR(50) NOT NULL,
	ANNUAL_PLAN_EN VARCHAR(50) NOT NULL,
	ANNUAL_PLAN_SR VARCHAR(50) NOT NULL,
	SUBMISSION_DATE DATE ,
	CURRENT_STATUS INTEGER ,
	COMMENT TEXT
);



CREATE TABLE THRM_ANNUAL_PLAN_STATUS (
	ID SERIAL PRIMARY KEY NOT NULL,
	ANNUAL_PLAN_ID INTEGER NOT NULL, 
	STATUS VARCHAR(3) NOT NULL,  --CRE=CREATED ,APP=APPROVAL, REJ=REJECTED ,MYE=MID YEAR EVALUATION ,YEE=YEAR EVALUATION
	NOTE TEXT,
	CREATE_BY INTEGER NOT NULL,
	CREATE_DATE TIMESTAMP NOT NULL DEFAULT now(),
	FOREIGN KEY (CREATE_BY) REFERENCES THRM_EMPLOYEE(ID)
);


ALTER TABLE THRM_ANNUAL_PLAN ADD CONSTRAINT THRM_ANNUAL_PLAN_STATUS_ID_FKEY FOREIGN KEY (CURRENT_STATUS) REFERENCES THRM_ANNUAL_PLAN_STATUS(ID);
ALTER TABLE THRM_ANNUAL_PLAN_STATUS ADD CONSTRAINT THRM_ANNUAL_PLAN_ID_FKEY FOREIGN KEY (ANNUAL_PLAN_ID) REFERENCES THRM_ANNUAL_PLAN (ID);

CREATE TABLE THRM_ANNUAL_PLAN_DOC (
	ID BIGSERIAL PRIMARY KEY,
	ANNUAL_PLAN_ID BIGINT NOT NULL,
	STATUS_NAME VARCHAR(3),
	DOC_TYPE VARCHAR(100) NOT NULL, 
	DOC_NAME VARCHAR(100) NOT NULL, 
	DOC_SIZE BIGINT NOT NULL,
	DOC BYTEA NOT NULL,
	
	NOTE TEXT,
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
	
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE (ID),
	FOREIGN KEY (ANNUAL_PLAN_ID) REFERENCES THRM_ANNUAL_PLAN (ID)
	);

CREATE TABLE THRM_ANN_PLAN_EMPLOYEE(
	 ID BIGSERIAL PRIMARY KEY NOT NULL,
	 EMPLOYEE_ID INTEGER NOT NULL,
	 ANN_PLAN_ID INTEGER NOT NULL,
	 FOREIGN KEY (EMPLOYEE_ID) REFERENCES THRM_EMPLOYEE(ID),
	 FOREIGN KEY (ANN_PLAN_ID) REFERENCES THRM_ANNUAL_PLAN(ID)
 );




CREATE TABLE  THRM_OFFICAL_TRAVEL (
	ID BIGSERIAL PRIMARY KEY,
	EMPLOYEE_ID INTEGER NOT NULL,
	TRAVEL_TYPE VARCHAR(2) NOT NULL CHECK (TRAVEL_TYPE IN ('BG', 'VG', 'TR', 'AP', 'PV', 'OT')), -- BG=GOVERMENT BUS,  VG= VEHICLE GOVERNMENT, TR=TRAIN, AP=AIRPLAN, PV=PRIVATE VEHICLE, OT=OTHER
	REIMBURSEMENT_EXPENSES BOOLEAN NOT NULL,
	FROM_DATE DATE NOT NULL,
	TO_DATE DATE NOT NULL,
	FROM_DESTINATION VARCHAR(150) NOT NULL,
	TO_DESTINATION VARCHAR(150) NOT NULL, 
	REASON TEXT, 
	DAYS_REQUESTED DOUBLE PRECISION NOT NULL,
	STATUS VARCHAR(2) NOT NULL DEFAULT 'P' CHECK (STATUS IN ('A', 'P', 'R')), -- A=APPROVED', P='PENDING', R='REJECTED'
	REQUESTED_USER_ID INTEGER NOT NULL,
	REQUESTED_DATE DATE DEFAULT NOW(),
	REQUESTED_COMMENTS VARCHAR(256) DEFAULT NULL,
	DAYS_APPROVED DOUBLE PRECISION,
	APPROVED_USER_ID INTEGER,
	APPROVED_DATE DATE ,
	APPROVED_COMMENTS VARCHAR(256) DEFAULT NULL,
	RETURN_DATE DATE,
	DAYS_SPENT DOUBLE PRECISION,
	
	DOC_TYPE VARCHAR(100), 
	DOC_NAME VARCHAR(100), 
	DOC_SIZE BIGINT,
	DOC BYTEA,	

	NOTE TEXT,
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
	
	FOREIGN KEY (EMPLOYEE_ID) REFERENCES THRM_EMPLOYEE (ID),
	FOREIGN KEY (REQUESTED_USER_ID) REFERENCES TPARTY (ID),
	FOREIGN KEY (APPROVED_USER_ID) REFERENCES TPARTY (ID),
	FOREIGN KEY (CREATED_BY) REFERENCES TPARTY (ID)
); 


CREATE TABLE THRM_ATTENDANCE_RECORD(
	ID BIGSERIAL PRIMARY KEY,
	EMPLOYEE_ID INTEGER NOT NULL,
	PUNCH_IN_UTC_TIME TIMESTAMP,
	PUNCH_IN_NOTE VARCHAR(255),
	PUNCH_IN_USER_TIME TIMESTAMP,
	PUNCH_OUT_UTC_TIME TIMESTAMP,
	PUNCH_OUT_NOTE VARCHAR(255),
	PUNCH_OUT_USER_TIME TIMESTAMP,
	STATUS VARCHAR(2) NOT NULL  CHECK (STATUS IN ('P', 'HP', 'A', 'H', 'AN', 'MT', 'ME', 'AA', 'S')), -- P=PRESENT', HP=HALFT PRESENT(DAY), A=ABSENT(MISSING), H=HOLIDAY, -- AN=ANNUAL, MT=MATERNITY, ME=MEDICAL, AA=ABSENCE ALLOWED, S=SICK(SEMURE),
	SUPERVISOR_ID INTEGER,
	SUPERVISOR_DATE TIMESTAMP ,
	
	NOTE TEXT,
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),	
	
	UNIQUE (EMPLOYEE_ID, PUNCH_IN_UTC_TIME, PUNCH_OUT_UTC_TIME),
	FOREIGN KEY (EMPLOYEE_ID) REFERENCES THRM_EMPLOYEE (ID),
	FOREIGN KEY (SUPERVISOR_ID) REFERENCES TPERSON (ID),
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE (ID)
);

/*
CREATE TABLE TDOCUMENT (
	ID BIGSERIAL NOT NULL,
	TABLE_ID INTEGER NOT NULL,
	TABLE_NAME VARCHAR(50) NOT NULL, 
	TABLE_ROW_ID BIGINTER NOT NULL, 
	DOC_TYPE VARCHAR(100) NOT NULL, 
	DOC_NAME VARCHAR(100) NOT NULL, 
	DOC_NAME VARCHAR(100) NOT NULL, 
	DOC BYTEA NOT NULL,

	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
);
*/
 

/*
--TFIN_ANNUAL_BUDGET_ALLOCATION
DROP TABLE IF EXISTS TFIN_ANNU_BUDGET_ALLOC CASCADE;
CREATE TABLE TFIN_ANNU_BUDGET_ALLOC (
	ID SERIAL PRIMARY KEY NOT NULL,
	MUNICIPALITY_ID INTEGER NOT NULL,
	INCOME_SALE_WOOD NUMERIC(10,2),
	INCOME_OTHER NUMERIC(10,2),
	TOTAL_INCOME NUMERIC (10,2),
	CREATED_BY INTEGER,
	CREATED_TIME TIMESTAMP,
	FOREIGN KEY (MUNICIPALITY_ID) REFERENCES TORGANISATION(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
);
*/


/*
DROP TABLE IF EXISTS TFIN_OUTPUT CASCADE;
CREATE TABLE TFIN_OUTPUT (
	ID SERIAL PRIMARY KEY NOT NULL,
	YEAR INTEGER NOT NULL, 
	MONTH INTEGER NOT NULL, 
	MUNICIPALITY_ID INTEGER NOT NULL,
	CUMULATIVE_VALUE NUMERIC (10,2),
	CREATED_BY INTEGER,
	CREATED_TIME TIMESTAMP,
	FOREIGN KEY (MUNICIPALITY_ID) REFERENCES TGIS_CADASTRAL_MUNICIPALITY(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
);
*/

--LOGISTICS PREFIX "LOG"


CREATE TABLE TLOG_VEHICLES (
	ID SERIAL PRIMARY KEY NOT NULL,
	DEPARTMENT_ID INTEGER NOT NULL, 
	BRAND VARCHAR(50),
	TYPE VARCHAR(50), 
	YEAR_PRODUCT INTEGER,
	PLATE_NUMBER VARCHAR(50),
	FIRST_REGISTRATION TIMESTAMP,
	NUMBER_OF_SEATS INTEGER,
	COLOR VARCHAR(50),
	ENGINE_CODE  VARCHAR(50),
	DESTINATION VARCHAR(50),
	WEIGHT VARCHAR(50),
	TYPE_ENGINE VARCHAR(50),
	VOLUME_CAPACITY VARCHAR(50),
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
    FOREIGN KEY (DEPARTMENT_ID) REFERENCES TORGANISATION(ID),
    FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE (ID)
    
);

CREATE TABLE TLOG_TRIPS
(
  ID BIGSERIAL NOT NULL,
  DEVICE_NAME CHARACTER VARYING(128),
  UNIQUEID CHARACTER VARYING(128),
  PHONE CHARACTER VARYING(128),
  MIN_ID INTEGER,
  MAX_ID INTEGER,
  PROTOCOL CHARACTER VARYING(128),
  DEVICEID INTEGER,
  START_TIME TIMESTAMP WITHOUT TIME ZONE,
  END_TIME TIMESTAMP WITHOUT TIME ZONE,
  DURATION_TIME CHARACTER VARYING(128),
  START_DEVICE_TIME TIMESTAMP WITHOUT TIME ZONE,
  END_DEVICE_TIME TIMESTAMP WITHOUT TIME ZONE,
  AVERAGE_SPEED DOUBLE PRECISION,
  MAX_SPEED DOUBLE PRECISION,
  GEOM GEOMETRY(LINESTRINGZM,900916),
  CONSTRAINT TLOG_TRIPS_PKEY PRIMARY KEY (ID)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE TLOG_TRIPS
  OWNER TO POSTGRES;



---start TRACING

	CREATE TABLE TLOG_PROTOCOL_PORTS(
	
		ID SERIAL PRIMARY KEY NOT NULL,
		PROTOCOL_TYPE VARCHAR(50) NOT NULL,
		PROTOCOL_NAME VARCHAR(50) NOT NULL,
		CREATED_BY INTEGER NOT NULL,
	    CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
	    FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE (ID)
	
	);

	
	CREATE TABLE TLOG_DEVICES
	(
	  ID INTEGER PRIMARY KEY,
	  DEVICE_API_ID INTEGER NOT NULL,
	  VEHICLE_ID INTEGER NOT NULL,
	--PROTOCOL_TYPE_ID INTEGER NOT NULL,
	  ACTIVE_DEVICE BOOLEAN NOT NULL,
	  ACTIVE_START_DATE DATE NOT NULL,
	  ACTIVE_END_DATE DATE NOT NULL,
	  PHONE CHARACTER VARYING(50),
	  NAME CHARACTER VARYING(128) NOT NULL,
	  UNIQUEID CHARACTER VARYING(128) NOT NULL,
	  STATUS CHARACTER VARYING(128),
	  LASTUPDATE TIMESTAMP WITHOUT TIME ZONE,
	  POSITIONID INTEGER,
	  CREATED_BY INTEGER NOT NULL,
	  CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
	  FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID),
	  FOREIGN KEY (VEHICLE_ID) REFERENCES TLOG_VEHICLES(ID)
	  
	--  FOREIGN KEY (PROTOCOL_TYPE_ID) REFERENCES TLOG_PROTOCOL_PORTS(ID)
	  
	);
	
	CREATE TABLE TLOG_POSITIONS
	(
	  ID INTEGER PRIMARY KEY  ,
	  PROTOCOL CHARACTER VARYING(128),
	  DEVICEID INTEGER NOT NULL,
	  SERVERTIME TIMESTAMP WITHOUT TIME ZONE NOT NULL,
	  DEVICETIME TIMESTAMP WITHOUT TIME ZONE NOT NULL,
	  FIXTIME TIMESTAMP WITHOUT TIME ZONE NOT NULL,
	  VALID BOOLEAN NOT NULL,
	  LATITUDE DOUBLE PRECISION NOT NULL,
	  LONGITUDE DOUBLE PRECISION NOT NULL,
	  ALTITUDE DOUBLE PRECISION NOT NULL,
	  SPEED DOUBLE PRECISION NOT NULL,
	  COURSE DOUBLE PRECISION NOT NULL,
	  ADDRESS CHARACTER VARYING(512),
	  ATTRIBUTES CHARACTER VARYING(4096) NOT NULL,

	  CONSTRAINT FK_POSITION_DEVICEID FOREIGN KEY (DEVICEID)
	      REFERENCES TLOG_DEVICES (ID) MATCH SIMPLE
	      ON UPDATE NO ACTION ON DELETE CASCADE
	);
	
/**	
	CREATE TABLE user_device
		(
		  userid integer NOT NULL,
		  deviceid integer NOT NULL,
		  CONSTRAINT fk_user_device_deviceid FOREIGN KEY (deviceid)
		      REFERENCES public.devices (id) MATCH SIMPLE
		      ON UPDATE NO ACTION ON DELETE CASCADE,
		  CONSTRAINT fk_user_device_userid FOREIGN KEY (userid)
		      REFERENCES public.users (id) MATCH SIMPLE
		      ON UPDATE NO ACTION ON DELETE CASCADE
		);
**/

---end TRACING

CREATE TABLE TVEHICLES_STAFF_ASSIGN (
	ID SERIAL PRIMARY KEY NOT NULL,
	VEHICLES_ID INTEGER NOT NULL, 
	EMPLOYEE_ID INTEGER NOT NULL,
	AUTORIZATION BOOLEAN NOT NULL,
	CREATED_BY INTEGER,
	CREATED_TIME TIMESTAMP,
	DATE_OF_AUTORIZATION TIMESTAMP,
  FOREIGN KEY (VEHICLES_ID) REFERENCES TLOG_VEHICLES(ID),
  FOREIGN KEY (EMPLOYEE_ID) REFERENCES THRM_EMPLOYEE(ID),
  FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
);


CREATE TABLE TLOG_VEHICLES_REGISTER (
	ID SERIAL PRIMARY KEY NOT NULL,
	VEHICLES_ID INTEGER NOT NULL, 
	REGISTERED_DATE DATE NOT NULL,
	VALIDE_TO_DATE DATE NOT NULL, 
	MILEAGE_AT_REGISTER VARCHAR(20),
	CREATED_BY INTEGER NOT NULL,
	CREATED_TIME TIMESTAMP NOT NULL,

  FOREIGN KEY (VEHICLES_ID) REFERENCES TLOG_VEHICLES(ID),
    FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
  
);


CREATE TABLE TLOG_VEHICLES_SERVICE_MAINTENANCE (
	ID SERIAL PRIMARY KEY NOT NULL,
	VEHICLES_ID INTEGER NOT NULL, 
	EXPENDITURE_TYPE VARCHAR(50), 
	VALUE DOUBLE PRECISION,
	DATE_SERVICE DATE,
	DATE_VALID DATE,
	CREATED_BY INTEGER NOT NULL,
	CREATED_TIME TIMESTAMP NOT NULL,

  	FOREIGN KEY (VEHICLES_ID) REFERENCES TLOG_VEHICLES(ID),
    FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
);

CREATE TABLE TFUELL_CONSUM (
	ID SERIAL PRIMARY KEY NOT NULL,
	VEHICLES_ID INTEGER NOT NULL, 
	VENDOR VARCHAR(50),
	INVOICE_NO VARCHAR(25),
	DATE TIMESTAMP,
	TYPE_FEUL VARCHAR(25),
	DRIVER_ID INTEGER NOT NULL,
	LITER NUMERIC(10,2) NOT NULL,
	MILEAGE_WHEN_FILLED VARCHAR(20),
	TOTAL_MILEAGE VARCHAR(20),  
	CREATED_BY INTEGER NOT NULL,
	CREATED_TIME TIMESTAMP NOT NULL,

  FOREIGN KEY (VEHICLES_ID) REFERENCES TLOG_VEHICLES(ID),
  FOREIGN KEY (DRIVER_ID) REFERENCES THRM_EMPLOYEE(ID),
  FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
);


CREATE TABLE TVEHICLES_TRACKING (
	ID SERIAL PRIMARY KEY NOT NULL,
	VEHICLES_ID INTEGER NOT NULL, 
	LATITUDE DOUBLE PRECISION,
	LONGITUDE DOUBLE PRECISION,
	ALTIDUDE DOUBLE PRECISION,
	TIME_LOCATION TIMESTAMP,
	STATUS VARCHAR(50),

	CREATED_BY INTEGER NOT NULL,
	CREATED_TIME TIMESTAMP NOT NULL,
	
	FOREIGN KEY (VEHICLES_ID) REFERENCES TLOG_VEHICLES(ID)
);
  
CREATE TABLE TASSETS (
	ID SERIAL PRIMARY KEY NOT NULL,
	BARCODE VARCHAR(50),
	NAME VARCHAR(100) NOT NULL,
	DEPARTMENT_ID INTEGER,
	LOCATION VARCHAR(255),
	IN_FUNCTION BOOLEAN NOT NULL,
	DAMAGED BOOLEAN,    --DAMAGED/OUT OF ORDER
	DATE_OF_PURCHASE TIMESTAMP,  
	QUANTITY DOUBLE PRECISION,
	PURCHASE_VALUE DOUBLE PRECISION, -- purchasing value per unit
	PURCHASE_TOTAL DOUBLE PRECISION,	--purchasing value total
	AMORTIZATION_GRADE DOUBLE PRECISION, 
	NET_AFTER_DEVAL_YEAR DOUBLE PRECISION, -- Net value after devaluation per year
	SERIAL_NO VARCHAR(100),
	COMMENTS VARCHAR(500),
	
	DELETED BOOLEAN NOT NULL DEFAULT FALSE,
	NOTE TEXT,
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE (ID),
	
	FOREIGN KEY (DEPARTMENT_ID) REFERENCES TORGANISATION(ID)
	--FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
); 


CREATE TABLE TASSETS_DEVALUATION (
	ID SERIAL PRIMARY KEY NOT NULL,
	ASSET_ID INTEGER NOT NULL,
	YEAR_OF_DEVAL INTEGER NOT NULL, --YEAR OF DEVALUATION
	NET_AFTER_DEVAL_YEAR DOUBLE PRECISION, -- Net value after devaluation per year
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE DATE NOT NULL,
	FOREIGN KEY (ASSET_ID) REFERENCES TASSETS(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
);

CREATE TABLE TASSETS_STAFF_ASSIGN (
	ID SERIAL PRIMARY KEY NOT NULL,
	ASSETS_ID INTEGER NOT NULL, 
	EMPLOYEE_ID INTEGER NOT NULL,
	CREATED_BY INTEGER,
	CREATED_TIME TIMESTAMP,
    DATE_OF_AUTORIZATION TIMESTAMP,
    FOREIGN KEY (ASSETS_ID) REFERENCES TASSETS(ID),
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES THRM_EMPLOYEE(ID),
    FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
);

CREATE TABLE TFRM_TREE_SPECIES (
  ID SERIAL PRIMARY KEY NOT NULL,
  CODE INTEGER NOT NULL,
  NAME_EN Varchar(100) NOT NULL,
  NAME_AL VARCHAR(100) NOT NULL,
  NAME_SR VARCHAR (100) NOT NULL,
  NAME_LA VARCHAR (100) NOT NULL,
  SPECIES_GROUP VARCHAR (100), -- Conifers, Broadleaves
  SPECIES_BONITET DOUBLE PRECISION NOT NULL,
  MAX_DIAMETER DOUBLE PRECISION NOT NULL --Measure unit dm(decim
);

--LEGAL SECTOR PREFIX "LEGSEC"
CREATE TABLE TLEGSEC_LAWSUIT (
	ID SERIAL PRIMARY KEY NOT NULL,
	OFFICE_ID INTEGER NOT NULL, 
	CURRENT_STATUS INTEGER,
	LAWSUIT_NO VARCHAR(20) NOT NULL UNIQUE,  -- n/mm/yyyy  
	SUIT_TYPE VARCHAR(2) NOT NULL, -- CV=CIVIL  PE=PENAL  base on damage volume PE>2m³
	DAMAGE_TYPE VARCHAR(50) NOT NULL, --FE=FELLING, TR=TRANSPORT ...
	NAME VARCHAR(50) NOT NULL,
	PARENT_NAME VARCHAR(50),
	LAST_NAME VARCHAR(50) NOT NULL,
	PERSONAL_ID VARCHAR(20),
	BIRTHDATE DATE,
	ADDRESS VARCHAR(100),
	PROFESSION VARCHAR(50),
	PLACE_OF_EMPLOYMENT VARCHAR(50),
	ACCOMPLICE VARCHAR(255),
	MANAGMENT_UNIT VARCHAR(50),
	STAND VARCHAR(10),  --NENNGASTRA
	ORIGIN VARCHAR(2) NOT NULL, --PU=PUBLIC FOREST, PR=PRIVATE FOREST
	TOTAL_DAMAGE DOUBLE PRECISION NOT NULL,
	TOTAL_DAMAGE_EURO DOUBLE PRECISION NOT NULL,
	EVIDENCE TEXT,
	PLACENAME VARCHAR(100),
	DATE DATE NOT NULL, 
	CLAIMANT_ID INTEGER NOT NULL,
	NOTE TEXT,
  FOREIGN KEY (OFFICE_ID) REFERENCES TORGANISATION(ID),
  FOREIGN KEY (CLAIMANT_ID) REFERENCES THRM_EMPLOYEE(ID)
);

CREATE TABLE TLEGSEC_LAWSUIT_DAMAGE (
	ID SERIAL PRIMARY KEY NOT NULL,
	LAWSUIT_ID INTEGER NOT NULL,  -- n/mm/yyyy  
	TREE_SPECIES_ID INTEGER NOT NULL, 
	TIMBER_NUMBER INTEGER,
	TIMBER_DIAMETER_STUMP DOUBLE PRECISION,  --units cm
	TIMBER_DIAMETER_13 DOUBLE PRECISION,     --units cm
	TIMBER_HEIGHT DOUBLE PRECISION,
	VOLUME_DAMAGE DOUBLE PRECISION NOT NULL,  --units m³
	VOLUME_UNIT_PRICE DOUBLE PRECISION,	
	DAMAGE_EURO DOUBLE PRECISION NOT NULL,
  	FOREIGN KEY (LAWSUIT_ID) REFERENCES TLEGSEC_LAWSUIT(ID),
  	FOREIGN KEY (TREE_SPECIES_ID) REFERENCES TFRM_TREE_SPECIES(ID)
);



CREATE TABLE TLEGSEC_LAWSUIT_STATUS (
	ID SERIAL PRIMARY KEY NOT NULL,
	LAWSUIT_ID INTEGER NOT NULL,  -- n/mm/yyyy  
	STATUS VARCHAR(2) NOT NULL,  --RE=REPORTED, SU=SUE, AM=AMNESTY, CO=CONVICTED
	COURT_SESSION_DATE TIMESTAMP,  -- FILL ONLY IN STATUS AM OR CO

	DOC_TYPE VARCHAR(100) NOT NULL, 
	DOC_NAME VARCHAR(100) NOT NULL, 
	DOC_SIZE BIGINT NOT NULL,
	DOC BYTEA NOT NULL,
	NOTE TEXT,
		
	ACTIVE BOOLEAN NOT NULL,
	CREATE_BY INTEGER NOT NULL,
	CREATE_DATE TIMESTAMP NOT NULL DEFAULT now(),
	
	FOREIGN KEY (CREATE_BY) REFERENCES THRM_EMPLOYEE(ID)
);

ALTER TABLE TLEGSEC_LAWSUIT ADD CONSTRAINT TLEGSEC_LAWSUIT_STATUS_ID_FKEY FOREIGN KEY (CURRENT_STATUS) REFERENCES TLEGSEC_LAWSUIT_STATUS (ID);
ALTER TABLE TLEGSEC_LAWSUIT_STATUS ADD CONSTRAINT TLEGSEC_LAWSUIT_ID_FKEY FOREIGN KEY (LAWSUIT_ID) REFERENCES TLEGSEC_LAWSUIT (ID);



--finance  
CREATE TABLE TFIN_TYPE 
(
	ID SERIAL PRIMARY KEY NOT NULL,	
	CODE VARCHAR(6),
	NAME VARCHAR(100) NOT NULL,
	NAME_EN VARCHAR(100),
	NAME_SR VARCHAR(100),
	TYPE VARCHAR(2),
	FOR_MUN_ALLOC BOOLEAN,
	DESCRIPTION TEXT
);
ALTER TABLE TFIN_TYPE OWNER TO POSTGRES;


CREATE TABLE TFIN_INPUT (
	ID SERIAL PRIMARY KEY NOT NULL,
	INPUT_TYPE_ID INTEGER NOT NULL,
	YEAR INTEGER NOT NULL, 
	MONTH VARCHAR(2) NOT NULL, 
	MUNICIPALITY_ID INTEGER NOT NULL,
	CUMULATIVE_VALUE NUMERIC (10,2),
	CURRENT_STATUS INTEGER, 
	ALLOCATED BOOLEAN NOT NULL,
	ALLOCATED_DATE DATE,
	CREATED_BY INTEGER NOT NULL,
	CREATED_TIME TIMESTAMP NOT NULL,
	FOREIGN KEY (MUNICIPALITY_ID) REFERENCES TORGANISATION(ID),
	FOREIGN KEY (INPUT_TYPE_ID) REFERENCES TFIN_TYPE(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
);



CREATE TABLE TFIN_INPUT_STATUS (
	ID SERIAL PRIMARY KEY NOT NULL,
	INPUT_ID INTEGER NOT NULL, 
	STATUS VARCHAR(2) NOT NULL,  --CR=CREATED , RV=REGIONAL VALIDATED, RC=CENTRAL APPROVAL
	DOC_TYPE VARCHAR(100), 
	DOC_NAME VARCHAR(100), 
	DOC_SIZE BIGINT,
	DOC BYTEA,
	NOTE TEXT,
	CREATE_BY INTEGER NOT NULL,
	CREATE_DATE TIMESTAMP NOT NULL DEFAULT now(),
	FOREIGN KEY (CREATE_BY) REFERENCES THRM_EMPLOYEE(ID)
);


ALTER TABLE TFIN_INPUT ADD CONSTRAINT TFIN_INPUT_STATUS_ID_FKEY FOREIGN KEY (CURRENT_STATUS) REFERENCES TFIN_INPUT_STATUS(ID);
ALTER TABLE TFIN_INPUT_STATUS ADD CONSTRAINT TFIN_INPUT_ID_FKEY FOREIGN KEY (INPUT_ID) REFERENCES TFIN_INPUT (ID);



CREATE TABLE TFIN_OUTPUT (
	ID SERIAL PRIMARY KEY NOT NULL,
	UOP_NUMBER VARCHAR(50) NOT NULL,
	FREE_BALANCE INTEGER NOT NULL,
	DATE_OF_COMMITMENT DATE,
	EXPENDITURE_TYPE INTEGER,
	DEPARTMENT INTEGER,
	ECONOMIC_CODE VARCHAR(100) NOT NULL,
	DESCRIPTION_OF_ECONOMIC_CODE TEXT,
	VALUE_IN_EURO DOUBLE PRECISION  NOT NULL,
	DESCRIPTION_CPO TEXT,	
	SOUCE_FUND INTEGER,
	BENEFICIARY VARCHAR(100),
	NRB_CODE VARCHAR(100),
	INVOICE_NUMBER VARCHAR(100),
	PAYMENT_DATE DATE,
	MONTH VARCHAR(2),
	OUTPUT_TYPE VARCHAR(2) NOT NULL,
	CREATED_BY INTEGER NOT NULL,
	CREATED_TIME TIMESTAMP NOT NULL,
	FOREIGN KEY (EXPENDITURE_TYPE) REFERENCES TFIN_TYPE(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID),
	FOREIGN KEY (DEPARTMENT) REFERENCES TORGANISATION(ID)
);
ALTER TABLE TFIN_OUTPUT OWNER TO POSTGRES;

CREATE TABLE TFIN_CONTRACTOR 
(
	ID SERIAL PRIMARY KEY NOT NULL,	
	
	COMOPANY_NAME VARCHAR(100) NOT NULL,
	FISCAL_NUMBER VARCHAR(50) NOT NULL,
	BUSINESS_NUMBER VARCHAR(50) NOT NULL,
	
	ATTACHMENT BYTEA,
	ADDRESS VARCHAR(100),
	
	PHONE VARCHAR(20),
	E_MAIL VARCHAR(50),
	CONTACT_PERSON VARCHAR(50),

	CREATED_BY INTEGER NOT NULL,
	CREATED_TIME TIMESTAMP NOT NULL,
	NOTE TEXT,
	
	FOREIGN KEY (CREATED_BY) REFERENCES TPARTY(ID)
);
ALTER TABLE TFIN_CONTRACTOR OWNER TO POSTGRES;

CREATE TABLE TFIN_CONTRACT 
(
	ID SERIAL PRIMARY KEY NOT NULL,	
	CONTRACTOR_ID INTEGER NOT NULL,
	
	CONTRACT_NUMBER VARCHAR(50) NOT NULL,
	CONTRACT_NAME VARCHAR(150) NOT NULL,
	
	CONTRACT_COSTS DOUBLE PRECISION NOT NULL,
	
	ORGANISATION_ID INTEGER NOT NULL,
	
	APPROVED_DATE DATE,
	
	DATE_DUE_FOR_START DATE,
	DATE_DUE_FOR_COMPLETION DATE,

	DATE_COMPLETED DATE,--DATE THAT CONTRACT IS ACTUALLY FINISHED
	NOTIFICATION_DATE DATE,--DATE PRIOR TO CONTRACT TO NOTIFY
	
	DELAYED BOOLEAN,
	
	CREATED_BY INTEGER NOT NULL,
	CREATED_TIME TIMESTAMP NOT NULL,
	
	FOREIGN KEY (ORGANISATION_ID) REFERENCES TORGANISATION(ID),	
	FOREIGN KEY (CONTRACTOR_ID) REFERENCES TFIN_CONTRACTOR(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES TPARTY(ID)
);
ALTER TABLE TFIN_CONTRACT OWNER TO POSTGRES;

CREATE TABLE TFIN_CONTRACT_DOC (
	ID BIGSERIAL NOT NULL PRIMARY KEY,
	CONTRACT_ID BIGINT NOT NULL,
	
	DOC_TYPE VARCHAR(100) NOT NULL, 
	DOC_NAME VARCHAR(100) NOT NULL, 
	DOC BYTEA NOT NULL,

	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID),
	FOREIGN KEY (CONTRACT_ID) REFERENCES TFIN_CONTRACT(ID)
);

CREATE TABLE TFIN_PAYMENT_PERIOD 
(
	ID SERIAL PRIMARY KEY NOT NULL,	
	CONTRACT_ID INTEGER NOT NULL,
	START_DATE DATE,--DATE_DUE_FOR_START_PERIOD
	COMPLETION_DATE DATE,--DATE_DUE_FOR_COMPLETION_PERIOD
	PAYMENT_PERIOD DOUBLE PRECISION,
	PAYMENT_REALIZED BOOLEAN,
	PAYMENT_BALANCE DOUBLE PRECISION,
	CREATED_BY INTEGER,
	CREATED_TIME TIMESTAMP,
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID),
	FOREIGN KEY (CONTRACT_ID) REFERENCES TFIN_CONTRACT(ID)
	
);
ALTER TABLE TFIN_PAYMENT_PERIOD OWNER TO POSTGRES;

--TFIN_ANNUAL_BUDGET_ALLOCATION
CREATE TABLE TFIN_ANNU_BUDGET_ALLOC 
(
	ID SERIAL PRIMARY KEY NOT NULL,	
	MUNICIPALITY_ID INTEGER NOT NULL ,
	WOOD_SALES DOUBLE PRECISION,
	OTHER_INCOME DOUBLE PRECISION,
	TOTAL DOUBLE PRECISION,
	ALLOCATION_36 DOUBLE PRECISION,-- TOTAL*36.83%
	MUNICIPALITY_30_PORTION DOUBLE PRECISION,--WOOD_SALES * 30%
	KFA_REMAINDER DOUBLE PRECISION,--ALLOCATION_36-MUNICIPALITY_30_PORTION
	MONTH VARCHAR(2) NOT NULL, 
	YEAR INTEGER NOT NULL,
	CREATED_BY INTEGER,
	CREATED_TIME TIMESTAMP,
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID),
	FOREIGN KEY (MUNICIPALITY_ID) REFERENCES TORGANISATION(ID),
	UNIQUE (MUNICIPALITY_ID, MONTH,YEAR)
);

ALTER TABLE TFIN_ANNU_BUDGET_ALLOC OWNER TO POSTGRES;


CREATE TABLE TFIN_BUDGET_MAINNTENANCE 
(
	ID SERIAL PRIMARY KEY NOT NULL,	
	FIN_TYPE_ID INTEGER NOT NULL,
	BUDGET_CODE VARCHAR(50) NOT NULL,
	INITIAL_ANNUAL_BUDGET DOUBLE PRECISION,
	ANNUAL_ALLOCATION DOUBLE PRECISION,
	CURRENT_EXPENDITURE DOUBLE PRECISION,
	COMMITMENT  DOUBLE PRECISION,
	AVAILABLE_BALANCE DOUBLE PRECISION,
	BUGET_UTILIZATION_IN_PERCENT DOUBLE PRECISION, -- (CURRENT_EXPENDITURE/ANNUAL_ALLOCATION) *100
	CREATED_BY INTEGER,
	CREATED_DATE TIMESTAMP,
	
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID),
	FOREIGN KEY (FIN_TYPE_ID) REFERENCES TFIN_TYPE(ID)
);
ALTER TABLE TFIN_BUDGET_MAINNTENANCE OWNER TO POSTGRES;


/* FOR DETAIL ON PROCESSES AND VARIABLES, KFA/FAO SHALL BE CONSULTED DURING THE CONTRACT IMPLEMENTATION*/
/** MANAGEMENT FOREST MODULE */



/**
DROP TABLE IF EXISTS TLITTERCOV CASCADE;

CREATE TABLE TLITTERCOV (
  ID SERIAL PRIMARY KEY NOT NULL,
  CODE INTEGER NOT NULL, 
  NAME VARCHAR(50),
  NAME_EN VARCHAR(50),
  NAME_SR VARCHAR(50),
  NAME_LT VARCHAR(50)
);

DROP TABLE IF EXISTS TMINEHAZARD CASCADE;

CREATE TABLE TMINEHAZARD (
  ID SERIAL PRIMARY KEY NOT NULL,
  CODE INTEGER NOT NULL, 
  NAME VARCHAR(50),
  NAME_EN VARCHAR(50),
  NAME_SR VARCHAR(50),
  NAME_LT VARCHAR(50)
);

DROP TABLE IF EXISTS TAGECLASS CASCADE;

CREATE TABLE TAGECLASS (
  ID SERIAL PRIMARY KEY NOT NULL,
  CODE INTEGER NOT NULL, 
  NAME VARCHAR(50),
  NAME_EN VARCHAR(50),
  NAME_SR VARCHAR(50),
  NAME_LT VARCHAR(50)
);


DROP TABLE IF EXISTS TORIGIN CASCADE;

CREATE TABLE TORIGIN (
  ID SERIAL PRIMARY KEY NOT NULL,
  CODE INTEGER NOT NULL, 
  NAME VARCHAR(50),
  NAME_EN VARCHAR(50),
  NAME_SR VARCHAR(50),
  NAME_LT VARCHAR(50)
);

DROP TABLE IF EXISTS TLAYERS CASCADE;
CREATE TABLE TLAYERS (
  ID SERIAL PRIMARY KEY NOT NULL,
  CODE INTEGER NOT NULL, 
  NAME VARCHAR(50),
  NAME_EN VARCHAR(50),
  NAME_SR VARCHAR(50),
  NAME_LT VARCHAR(50)
);



DROP TABLE IF EXISTS TACCESSIBLE CASCADE;

CREATE TABLE TACCESSIBLE (
  ID SERIAL PRIMARY KEY NOT NULL,
  CODE INTEGER NOT NULL, 
  NAME VARCHAR(50),
  NAME_EN VARCHAR(50),
  NAME_SR VARCHAR(50),
  NAME_LT VARCHAR(50)
);

DROP TABLE IF EXISTS TTAKSATOR CASCADE;

CREATE TABLE TTAKSATOR (
  ID SERIAL PRIMARY KEY NOT NULL,
  USER_NAME VARCHAR(50),
  FIRST_NAME VARCHAR(50),
  LASTNAME VARCHAR(50)
);

DROP TABLE IF EXISTS FOREST_L CASCADE;
DROP TABLE IF EXISTS TFOREST_L CASCADE;

CREATE TABLE TFOREST_L (
  ID SERIAL PRIMARY KEY NOT NULL, 
  MU_ID INTEGER NOT NULL, 
  LTHEME INTEGER, 
  LTHEME1 INTEGER, 
  LTHEME2 INTEGER, 
  POLYGON BOOLEAN NOT NULL, 
  DATE_ TIMESTAMP, 
  QUALITY_CL VARCHAR(20), 
  MAINTENANC VARCHAR(20), 
  LENGTH DOUBLE PRECISION NULL,
  TAKSATOR_ID INTEGER NOT NULL,
  THE_GEOM GEOMETRY,
  FOREIGN KEY (MU_ID) REFERENCES TMANAGEMENT_UNIT(ID),
  	FOREIGN KEY (TAKSATOR_ID) REFERENCES TTAKSATOR(ID)
);


DROP TABLE IF EXISTS TSTANDDESCRIPTION CASCADE;
DROP TABLE IF EXISTS TSTAND_DESCRIPTION CASCADE;

CREATE TABLE TSTAND_DESCRIPTION (
  ID SERIAL PRIMARY KEY NOT NULL, 
  MU_ID INTEGER NOT NULL,
  COMP_NR INTEGER, 
  STAND_NR VARCHAR(3), 
  ORIGIN_ID INTEGER, 
  MINEHAZARD_ID INTEGER, 
  ACCESSIBLE_ID INTEGER, 
  LAYERS_ID INTEGER, 
  MNGMNTCLAS_ID INTEGER, 
  TREATMENT INTEGER, 
  TREAT_AREA INTEGER, 
  AGE_CLASS_ID INTEGER, 
  VOLUM_EST INTEGER, 
  NR_OF_STEM INTEGER, 
  MEAN_TREEH INTEGER, 
  TREE_SP_1 INTEGER, 
  TREE_SP_2 INTEGER, 
  TREE_SP_3 INTEGER, 
  BIODIVERSI BOOLEAN NOT NULL, 
  DATEFORM TIMESTAMP, 
  TAKSATOR_ID INTEGER NOT NULL, 
  AREA DOUBLE PRECISION NULL,
  THE_GEOM GEOMETRY,
  	FOREIGN KEY (MU_ID) REFERENCES TMANAGEMENT_UNIT(ID),
	FOREIGN KEY (MNGMNTCLAS_ID) REFERENCES TMENAGMENT_CLASS(ID),
	FOREIGN KEY (LAYERS_ID) REFERENCES TLAYERS(ID),
	FOREIGN KEY (AGE_CLASS_ID) REFERENCES TAGECLASS(ID),
	FOREIGN KEY (ORIGIN_ID) REFERENCES TORIGIN(ID),
	FOREIGN KEY (ACCESSIBLE_ID) REFERENCES TACCESSIBLE(ID),
	FOREIGN KEY (TAKSATOR_ID) REFERENCES TTAKSATOR(ID)
);
-- FOR FOREST MANAGMENT MODULE

DROP TABLE IF EXISTS TGIS_BIODIV CASCADE;
DROP TABLE IF EXISTS TBIODIV CASCADE;

CREATE TABLE TBIODIV (
  ID SERIAL PRIMARY KEY NOT NULL, 
  STAND_ID INTEGER NOT NULL,
  BIOCODE INTEGER, 
  TAKSATOR_ID INTEGER NOT NULL, 
  REMARKS VARCHAR(150), 
  COMP_NR INTEGER, 
  STAND_NR INTEGER, 
  AREA DOUBLE PRECISION NULL, 
  THE_GEOM GEOMETRY,
    	FOREIGN KEY (STAND_ID) REFERENCES TSTAND_DESCRIPTION(ID),
	FOREIGN KEY (TAKSATOR_ID) REFERENCES TTAKSATOR(ID)
);


DROP TABLE IF EXISTS TPLOTS CASCADE;

CREATE TABLE TPLOTS (
  ID SERIAL PRIMARY KEY NOT NULL, 
  STAND_ID INTEGER NOT NULL, 
  PLOT_NR INTEGER, 
  COMP_NR INTEGER, 
  STAND_NR VARCHAR(3), 
  VISITED INTEGER, 
  PLOTTYPE INTEGER, 
  SLOPE INTEGER, 
  LITTERCOV INTEGER, 
  AGE INTEGER, 
  CROWNCOV INTEGER, 
  C_STEMS1 INTEGER, 
  C_STEMS2 INTEGER, 
  C_DAMAGE INTEGER, 
  C_SUPRESS INTEGER, 
  C_DISTRIB INTEGER, 
  B_STEMS1 INTEGER, 
  B_STEMS2 INTEGER, 
  B_DAMAGE INTEGER, 
  B_SUPRESS INTEGER, 
  B_DISTRIB INTEGER, 
  X DOUBLE PRECISION NULL, 
  Y DOUBLE PRECISION NULL, 
  DATE_ TIMESTAMP, 
  TAKSATOR_ID INTEGER NOT NULL, 
  THE_GEOM GEOMETRY ,
      	FOREIGN KEY (STAND_ID) REFERENCES TSTAND_DESCRIPTION(ID),
	FOREIGN KEY (TAKSATOR_ID) REFERENCES TTAKSATOR(ID)
);

DROP TABLE IF EXISTS TBLTREESURVEY CASCADE;

CREATE TABLE TBLTREESURVEY (
  ID SERIAL PRIMARY KEY NOT NULL, 
  STAND_ID INTEGER NOT NULL, 
  COMP_NR INTEGER, 
  STAND_NR VARCHAR(3),  
  PLOT_ID INTEGER, 
  TREEID INTEGER, 
  HEALTH INTEGER, 
  NAME VARCHAR(28), 
  INCOMPLETE DOUBLE PRECISION NULL, 
  HEIGHT INTEGER, 
  INCREMENT DOUBLE PRECISION NULL, 
  DIAMETER DOUBLE PRECISION NULL, 
  TESTMARK DOUBLE PRECISION NULL, 
  ODSEK VARCHAR(7), 
  PLOTTREEID VARCHAR(12), 
  SPECCODE INTEGER, 
  TECHCODE INTEGER,
   TAKSATOR_ID INTEGER NOT NULL, 
      	FOREIGN KEY (STAND_ID) REFERENCES TSTAND_DESCRIPTION(ID),
	FOREIGN KEY (PLOT_ID) REFERENCES TPLOTS(ID),
	FOREIGN KEY (TAKSATOR_ID) REFERENCES TTAKSATOR(ID)
);

*/

CREATE TABLE TFRM_TREATMENT_GROUP (
  ID SERIAL PRIMARY KEY NOT NULL
  ,CODE INTEGER
  ,NAME_EN Varchar(100)
  ,NAME_AL VARCHAR(100)
  ,NAME_SR VARCHAR (100)

);

CREATE TABLE TFRM_TREATMENT (
  ID SERIAL PRIMARY KEY NOT NULL
  ,TREAT_GROUP_ID INTEGER 
  ,CODE INTEGER
  ,NAME_EN Varchar(100)
  ,NAME_AL VARCHAR(100)
  ,NAME_SR VARCHAR (100)
  ,UNITS VARCHAR(2) -- Volume m³, Area ha, Length km, cope pc, 
	,FOREIGN KEY (TREAT_GROUP_ID) REFERENCES TFRM_TREATMENT_GROUP(ID)

);

--start FRM Module

-- I.E. FOREST_PLANNING::HARVEST_TYPE::ACTION
--	FOREST_PLANNING::HARVEST_TYPE::CLEAR CUT

CREATE TABLE TFRM_DOMAIN(
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  DOMAIN_CODE VARCHAR(50) NOT NULL UNIQUE,
  DOMAIN_VALUE VARCHAR(50) NOT NULL UNIQUE,
  DOMAIN_CATEGORY VARCHAR(50) NOT NULL,
  DOMAIN_TYPE VARCHAR(50) NOT NULL,
  DOMAIN_ACTIVITY VARCHAR(50) NOT NULL,
  DOMAIN_CATEGORY_SORT SMALLINT NOT NULL,
  DOMAIN_TYPE_SORT SMALLINT NOT NULL,
  DOMAIN_ACTIVITY_SORT SMALLINT NOT NULL
);

CREATE TABLE TFRM_DOMAIN_NAME(
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  DOMAIN_ID INTEGER NOT NULL,
  DOMAIN_CATEGORY VARCHAR(50) NOT NULL,
  DOMAIN_TYPE VARCHAR(50) NOT NULL,
  DOMAIN_ACTIVITY VARCHAR(50) NOT NULL,
  LANG_CODE VARCHAR(2) NOT NULL, --sq, en, sr
  DOMAIN_SORT SMALLINT NOT NULL,
  FOREIGN KEY (DOMAIN_ID) REFERENCES TFRM_DOMAIN(ID)
);

CREATE TABLE TFRM_ACTIVITY_DOMAIN(
	ID BIGSERIAL PRIMARY KEY NOT NULL, 
	PARENT_ID INTEGER ,
	CODE VARCHAR(5),
	NAME_AL VARCHAR(50) NOT NULL,
	NAME_EN VARCHAR(50) NOT NULL,
	NAME_SR VARCHAR(50) NOT NULL,
	TYPE CHAR(1) NOT NULL,--G-for group and A-for Activity
	SORT SMALLINT NOT NULL,
	FOREIGN KEY (PARENT_ID) REFERENCES TFRM_ACTIVITY_DOMAIN(ID)
);

CREATE TABLE TFRM_MANAGEMENT_CLASS(
  ID SERIAL PRIMARY KEY NOT NULL, 
  MNGMT_CLASS_CODE INTEGER NOT NULL,
  CREATED_DATE DATE NOT NULL,
  REMARKS VARCHAR(255)
);

CREATE TABLE TGIS_MANAGEMENT_UNIT(
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  REGION_ID INTEGER NOT NULL,
  MU_NAME VARCHAR(150) NOT NULL,
  
  
  REMARKS VARCHAR(255),
  MU_CODE VARCHAR(10),
  
-- THE_GEOM GEOMETRY,
-- THE_GEOM_AREA DOUBLE PRECISION,
--  THE_GEOM_LENGTH DOUBLE PRECISION,
    
  FOREIGN KEY (REGION_ID) REFERENCES TGIS_REGION(ID)
);

CREATE TABLE TGIS_MU_PERIOD(
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  MU_ID INTEGER NOT NULL,
  TRNX_ID CHARACTER VARYING(36) NOT NULL, --transaction id in order to track
  THE_GEOM GEOMETRY,
  ISACTIVE CHARACTER(1) NOT NULL DEFAULT 'Y'::BPCHAR,
  START_DATE TIMESTAMP NOT NULL,
  END_DATE TIMESTAMP NOT NULL,

  CREATED_BY INTEGER NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
  UPDATED_BY INTEGER ,
  UPDATED_DATE TIMESTAMP ,

  NOTE VARCHAR(255),  
  
  FOREIGN KEY (MU_ID) REFERENCES TGIS_MANAGEMENT_UNIT(ID),
  FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID),
  FOREIGN KEY (UPDATED_BY) REFERENCES THRM_EMPLOYEE(ID),   
  CONSTRAINT TGIS_MU_PERIOD_ISACTIVE_CHECK CHECK (ISACTIVE = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR]))

);

CREATE TABLE TGIS_COMPARTMENT(
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  MU_ID INTEGER NOT NULL,
  MUP_ID INTEGER NOT NULL,
  MUN_ID INTEGER NOT NULL,
  COMP_NR CHARACTER VARYING(3) NOT NULL,
  REMARKS VARCHAR(255),
    
  THE_GEOM GEOMETRY,

  UNIQUE (MU_ID, MUP_ID, COMP_NR),
  FOREIGN KEY (MU_ID) REFERENCES TGIS_MANAGEMENT_UNIT(ID),
  FOREIGN KEY (MUP_ID) REFERENCES TGIS_MU_PERIOD(ID),
  FOREIGN KEY (MUN_ID) REFERENCES TGIS_CADASTRAL_MUNICIPALITY(ID)

);


/*
KAVEKO Campain
1) tcampain
2) tcampain_criteria
	2.1) Farmer Vineyard's area
	2.2)  
	2.3)
3) tfarmer_subvention
	tcampain+famer
4) subvention is possible only if declarion is done by farmer

*/

/*
Functionality as business logic:
-----------------------------------------------------
1) Estimated volume
2) Volume per Hektar
3) Manual input of groath volume (impact of point 2)

4) Validation against planning activities regarding stand volume


Example for Estimated volume as text domain
code description
500	<500m3
150	500-2000m3
*/

CREATE TABLE TFRM_ESTIMATE_VOLUME(
  CODE INTEGER PRIMARY KEY NOT NULL UNIQUE,
  DESCRIPTION VARCHAR(100) NOT NULL,
  MINIMUM INTEGER NOT NULL,
  MAXIMUM INTEGER NOT NULL
);

CREATE TABLE TGIS_STAND(
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  COMPARTMENT_ID INTEGER NOT NULL, 
  STAND_ID CHARACTER VARYING(15) NOT NULL,
  STAND_NR CHARACTER VARYING(2) NOT NULL,
  MNGM_CLASS VARCHAR(4) NOT NULL, --KLASA MENAXHUESE
  
  NO_PLOTS INTEGER,
  MINEHAZARD CHARACTER VARYING(3),
  LAYERS INTEGER,
  --FOREST_TYP VARCHAR(20) NOT NULL, --DOMAIN FOREST_TYPE
  --STOCK_LEVEL VARCHAR(20) NOT NULL, --DOMAIN STOCK_LEVEL
  ACCESS_TYPE VARCHAR(20) NOT NULL, --DOMAIN ACCESS_TYPE
 
  BASAL_AREA DOUBLE PRECISION NOT NULL,
  --ESTABILISHED_YEAR SMALLINT NOT NULL,
  --STAND_HEIGHT DOUBLE PRECISION NOT NULL,
  --STAND_ACRES DOUBLE PRECISION NOT NULL,
  --PERIMETER DOUBLE PRECISION NOT NULL,

  STAND_TYPE VARCHAR(1),  --TYPE OF STAND AREA--OLDYOUNGTREE , 2. OPEN AREA, 0. WITH PLOTS AND  1. WITHOUT PLOTS
  CROWNCOVER DOUBLE PRECISION, 
  SLOPE DOUBLE PRECISION, 
  LITTERCOV DOUBLE PRECISION, 
  AGE INTEGER,
  ORIGIN   VARCHAR(1),
  CONIFER INTEGER, --HALOR
  CONIFER_BON DOUBLE PRECISION, 
  DECIDOUSE INTEGER, --FLETOR
  DECIDOUSE_BON DOUBLE PRECISION,
  TREES INTEGER,
  VOLUME_M3HA DOUBLE PRECISION, --VOLUME PER HECTAR M³/Ha
  CONIFER_PERC DOUBLE PRECISION, --PERQINDJA E HALOREVE 
  DECIDOUSE_PERC DOUBLE PRECISION, --PERQINDJA E FLETOREVE 
  PERC_0_30 DOUBLE PRECISION, --PERQINDJA DIAMETRIKE 0-30
  PERC_30_50 DOUBLE PRECISION, --PERQINDJA DIAMETRIKE 30-50
  PERC_50_70 DOUBLE PRECISION, --PERQINDJA DIAMETRIKE 50-70
  PERC_70_100 DOUBLE PRECISION, --PERQINDJA DIAMETRIKE 70-100
  INCR_PERC DOUBLE PRECISION,	--RRITJA VJETORE
  M2_HA  DOUBLE PRECISION, --?
  DS_CON DOUBLE PRECISION,
  DS_BRO DOUBLE PRECISION,
  CL1_PERC_CON DOUBLE PRECISION, -- Halor Klasa e Kualitetit I ne perqindje
  CL2_PERC_CON DOUBLE PRECISION, -- Halor Klasa e Kualitetit II ne perqindje
  CL3_PERC_CON DOUBLE PRECISION, -- Halor Klasa e Kualitetit III ne perqindje
  CL4_PERC_CON DOUBLE PRECISION, -- Halor Klasa e Kualitetit IV ne perqindje
  CL1_PERC_DEC DOUBLE PRECISION, -- Fletor Klasa e Kualitetit I ne perqindje
  CL2_PERC_DEC DOUBLE PRECISION, -- Fletor Klasa e Kualitetit II ne perqindje 
  CL3_PERC_DEC DOUBLE PRECISION,  -- Fletor Klasa e Kualitetit III ne perqindje
  CL4_PERC_DEC DOUBLE PRECISION,  -- Fletor Klasa e Kualitetit IV ne perqindje
  DAMAGE_PERC DOUBLE PRECISION,  --demtimet ne perqindje
  ESTEMATE_VOLUME INTEGER, -- vellimi i vlersuar te dhenat  nga textdomain ose nje tabel 
  ESTIMATE_TREES_PER_HA VARCHAR(10), -- Numri i drureve te vleresuar per hektar   te dhenat  nga textdomain ose nje tabel 
  HEIGHT_MEAN INTEGER, 
  TREE1 INTEGER, -- Lloji i druve dominues
  TREE2 INTEGER, -- Lloji i druve dominues 
  TREE3 INTEGER,  -- Lloji i druve dominues
  SURVEY_DATE TIMESTAMP,
  REMARKS VARCHAR(255),
  STATUS VARCHAR(3), -- UCH nese te dhenat nuk jane kontrolluar,
  THE_GEOM GEOMETRY,

  FOREIGN KEY (COMPARTMENT_ID) REFERENCES TGIS_COMPARTMENT(ID),
  FOREIGN KEY (ESTEMATE_VOLUME) REFERENCES TFRM_ESTIMATE_VOLUME(CODE),
  FOREIGN KEY (TREE1) REFERENCES TFRM_TREE_SPECIES(ID),
  FOREIGN KEY (TREE2) REFERENCES TFRM_TREE_SPECIES(ID),
  FOREIGN KEY (TREE3) REFERENCES TFRM_TREE_SPECIES(ID),
  FOREIGN KEY (CONIFER) REFERENCES TFRM_TREE_SPECIES(ID),
  FOREIGN KEY (DECIDOUSE) REFERENCES TFRM_TREE_SPECIES(ID),
  
  /*
  FOREIGN KEY (MNGMNTCLAS_ID) REFERENCES TMENAGMENT_CLASS(ID),
  FOREIGN KEY (LAYERS_ID) REFERENCES TLAYERS(ID),
  FOREIGN KEY (AGE_CLASS_ID) REFERENCES TAGECLASS(ID),
  FOREIGN KEY (ORIGIN_ID) REFERENCES TORIGIN(ID),
  FOREIGN KEY (ACCESSIBLE_ID) REFERENCES TACCESSIBLE(ID),
  */

  CONSTRAINT ENFORCE_DIMS_THE_GEOM CHECK ((ST_NDIMS(THE_GEOM) = 2)),
  CONSTRAINT ENFORCE_GEOTYPE_THE_GEOM CHECK (GEOMETRYTYPE(THE_GEOM) = 'POLYGON'::TEXT OR
										  (GEOMETRYTYPE(THE_GEOM) = 'MULTIPOLYGON'::TEXT) OR 
										  (THE_GEOM IS NULL)),
  CONSTRAINT ENFORCE_SRID_THE_GEOM CHECK ((ST_SRID(THE_GEOM) = 900916))  
);

CREATE TABLE TGIS_STAND_AUD(
 id bigint NOT NULL,
 rev integer NOT NULL,
 revtype smallint NOT NULL,  

    COMPARTMENT_ID INTEGER NOT NULL, 
  STAND_ID CHARACTER VARYING(255),
  MNGM_CLASS INTEGER, --KLASA MENAXHUESE
  
  NO_PLOTS INTEGER,
  MINEHAZARD CHARACTER VARYING(3),
  LAYERS INTEGER,
  --FOREST_TYP VARCHAR(20) NOT NULL, --DOMAIN FOREST_TYPE
  --STOCK_LEVEL VARCHAR(20) NOT NULL, --DOMAIN STOCK_LEVEL
  ACCESS_TYPE VARCHAR(20) NOT NULL, --DOMAIN ACCESS_TYPE
 
  BASAL_AREA DOUBLE PRECISION NOT NULL,
  --ESTABILISHED_YEAR SMALLINT NOT NULL,
  --STAND_HEIGHT DOUBLE PRECISION NOT NULL,
  --STAND_ACRES DOUBLE PRECISION NOT NULL,
  --PERIMETER DOUBLE PRECISION NOT NULL,

  STAND_TYPE INTEGER,  --TYPE OF STAND AREA--OLDYOUNGTREE , 2. OPEN AREA, 0. WITH PLOTS AND  1. WITHOUT PLOTS
  CROWNCOVER DOUBLE PRECISION, 
  SLOPE DOUBLE PRECISION, 
  LITTERCOV DOUBLE PRECISION, 
  AGE INTEGER,
  ORIGIN  INTEGER,
  CONIFER VARCHAR(50), --HALOR
  CONIFER_BON DOUBLE PRECISION, 
  DECIDOUSE VARCHAR(50), --FLETOR
  DECIDOUSE_BON DOUBLE PRECISION,
  TREES INTEGER,
  VOLUME_M3HA DOUBLE PRECISION, --VOLUME PER HECTAR M³/Ha
  CONIFER_PERC DOUBLE PRECISION, --PERQINDJA E HALOREVE 
  DECIDOUSE_PERC DOUBLE PRECISION, --PERQINDJA E FLETOREVE 
  PERC_0_30 DOUBLE PRECISION, --PERQINDJA DIAMETRIKE 0-30
  PERC_30_50 DOUBLE PRECISION, --PERQINDJA DIAMETRIKE 30-50
  PERC_50_70 DOUBLE PRECISION, --PERQINDJA DIAMETRIKE 50-70
  PERC_70_100 DOUBLE PRECISION, --PERQINDJA DIAMETRIKE 70-100
  INCR_PERC DOUBLE PRECISION,	--RRITJA VJETORE
  M2_HA  DOUBLE PRECISION, --?
  DS_CON DOUBLE PRECISION,
  DS_BRO DOUBLE PRECISION,
  CL1_PERC_CON DOUBLE PRECISION, -- Halor Klasa e Kualitetit I ne perqindje
  CL2_PERC_CON DOUBLE PRECISION, -- Halor Klasa e Kualitetit II ne perqindje
  CL3_PERC_CON DOUBLE PRECISION, -- Halor Klasa e Kualitetit III ne perqindje
  CL4_PERC_CON DOUBLE PRECISION, -- Halor Klasa e Kualitetit IV ne perqindje
  CL1_PERC_DEC DOUBLE PRECISION, -- Fletor Klasa e Kualitetit I ne perqindje
  CL2_PERC_DEC DOUBLE PRECISION, -- Fletor Klasa e Kualitetit II ne perqindje 
  CL3_PERC_DEC DOUBLE PRECISION,  -- Fletor Klasa e Kualitetit III ne perqindje
  CL4_PERC_DEC DOUBLE PRECISION,  -- Fletor Klasa e Kualitetit IV ne perqindje
  DAMAGE_PERC DOUBLE PRECISION,  --demtimet ne perqindje
  ESTEMATE_VOLUME INTEGER, -- vellimi i vlersuar te dhenat  nga textdomain ose nje tabel 
  ESTIMATE_TREES_PER_HA VARCHAR(10), -- Numri i drureve te vleresuar per hektar   te dhenat  nga textdomain ose nje tabel 
  HEIGHT_MEAN INTEGER, 
  TREE1 INTEGER, -- Lloji i druve dominues
  TREE2 INTEGER, -- Lloji i druve dominues 
  TREE3 INTEGER,  -- Lloji i druve dominues
  SURVEY_DATE TIMESTAMP,
  REMARKS VARCHAR(255),
  
  THE_GEOM GEOMETRY,

  FOREIGN KEY (COMPARTMENT_ID) REFERENCES TGIS_COMPARTMENT(ID),
  FOREIGN KEY (ESTEMATE_VOLUME) REFERENCES TFRM_ESTIMATE_VOLUME(CODE),
  FOREIGN KEY (TREE1) REFERENCES TFRM_TREE_SPECIES(ID),
  FOREIGN KEY (TREE2) REFERENCES TFRM_TREE_SPECIES(ID),
  FOREIGN KEY (TREE3) REFERENCES TFRM_TREE_SPECIES(ID),
  
  /*
  FOREIGN KEY (MNGMNTCLAS_ID) REFERENCES TMENAGMENT_CLASS(ID),
  FOREIGN KEY (LAYERS_ID) REFERENCES TLAYERS(ID),
  FOREIGN KEY (AGE_CLASS_ID) REFERENCES TAGECLASS(ID),
  FOREIGN KEY (ORIGIN_ID) REFERENCES TORIGIN(ID),
  FOREIGN KEY (ACCESSIBLE_ID) REFERENCES TACCESSIBLE(ID),
  */

  CONSTRAINT ENFORCE_DIMS_THE_GEOM CHECK ((ST_NDIMS(THE_GEOM) = 2)),
  CONSTRAINT ENFORCE_GEOTYPE_THE_GEOM CHECK (GEOMETRYTYPE(THE_GEOM) = 'POLYGON'::TEXT OR
										  (GEOMETRYTYPE(THE_GEOM) = 'MULTIPOLYGON'::TEXT) OR 
										  (THE_GEOM IS NULL)),
  CONSTRAINT ENFORCE_SRID_THE_GEOM CHECK ((ST_SRID(THE_GEOM) = 900916)),   

  PRIMARY KEY (ID, REV)
 
);

CREATE TABLE TGIS_STAND_GROWTH(
	ID BIGSERIAL PRIMARY KEY NOT NULL,
	STAND_ID INTEGER NOT NULL,
	YEAR INTEGER NOT NULL,
	OLD_VOLUME DOUBLE PRECISION,
	NEW_VOLUME DOUBLE PRECISION,
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE DATE NOT NULL,
	
	FOREIGN KEY (STAND_ID) REFERENCES TGIS_STAND(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
);

CREATE TABLE TFRM_ANNUAL_PLANNING_STATUS (
  ID BIGSERIAL PRIMARY KEY NOT NULL,
  ANNUAL_PLANNING_ID BIGINT NOT NULL,
  STATUS VARCHAR(6) NOT NULL,
  CREATED_BY BIGINT NOT NULL, 
  CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
  REMARKS VARCHAR(255),

  FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID)
);

CREATE TABLE TFRM_ANNUAL_PLANNING (
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  MUN_ID INTEGER,
  YEAR SMALLINT NOT NULL,
  OPERATION_LEVEL SMALLINT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
  CREATED_BY BIGINT NOT NULL,  
  STATUS_ID BIGINT,
  REMARKS TEXT,
  
  FOREIGN KEY (MUN_ID) REFERENCES TGIS_CADASTRAL_MUNICIPALITY(ID),
  FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID),
  FOREIGN KEY (STATUS_ID) REFERENCES TFRM_ANNUAL_PLANNING_STATUS(ID)
);

ALTER TABLE TFRM_ANNUAL_PLANNING_STATUS ADD FOREIGN KEY (ANNUAL_PLANNING_ID) REFERENCES TFRM_ANNUAL_PLANNING(ID);


CREATE TABLE TFRM_ACTIVITY(
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  ACTIVITY_NO VARCHAR(30) NOT NULL,
  ACTIVITY_DOMAIN_ID INTEGER NOT NULL,
  ANNUAL_PLANNING_ID BIGINT NOT NULL,
  ACTIVITY_FIELD VARCHAR(3) NOT NULL, --HAR=Harvest,SIV=Siviculture,PLA=Planting,INF=Infrastructure,PRI=Private,SEE=Seedling
  OPERATION_LEVEL SMALLINT NOT NULL,
  QR_CODE BYTEA NOT NULL,
  PLANED_GEOM GEOMETRY,
  IMPLEMENTED_GEOM GEOMETRY,
  CREATED_BY BIGINT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
  
  FOREIGN KEY (ACTIVITY_DOMAIN_ID) REFERENCES TFRM_ACTIVITY_DOMAIN(ID),
  FOREIGN KEY (ANNUAL_PLANNING_ID) REFERENCES TFRM_ANNUAL_PLANNING(ID),
  FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID)
);

--status: SUBMIT, APPROVE
CREATE TABLE TFRM_ACTIVITY_STATUS(
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  ACTIVITY_ID BIGINT NOT NULL,
  STATUS VARCHAR(6) NOT NULL,
  CREATED_BY BIGINT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
  REMARKS VARCHAR(255),
  
  FOREIGN KEY (ACTIVITY_ID) REFERENCES TFRM_ACTIVITY(ID),
  FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID)
);

CREATE TABLE TFRM_ACTIVITY_STATUS_DOC (
  ID BIGSERIAL PRIMARY KEY NOT NULL,
  STATUS_ID BIGINT NOT NULL,
  DOC_TYPE VARCHAR(100) NOT NULL, 
  DOC_NAME VARCHAR(100) NOT NULL, 
  DOC BYTEA NOT NULL,
  REMARK TEXT,

  CREATED_BY INTEGER NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,

  FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID),
  FOREIGN KEY (STATUS_ID) REFERENCES TFRM_ACTIVITY_STATUS(ID)
);


--P=Planning, I=Implementation, O=Others (Fire, Insect) 
CREATE TABLE TFRM_STAND_HARVEST_ACTIVITY(
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  ACTIVITY_ID BIGINT NOT NULL,
  STAND_ID BIGINT NOT NULL,
  STATUS_ID BIGINT NOT NULL,
  TREE_SPECIES_ID INTEGER NOT NULL,
  REMARKS TEXT,
  WORK_STAGE CHAR(1) NOT NULL DEFAULT 'P', -- P=Planning, I=Implementation

  --PLANNED
  PL_TECH_VOLUME DOUBLE PRECISION,
  PL_FIRE_VOLUME DOUBLE PRECISION,
  PL_PULP_VOLUME DOUBLE PRECISION,
  PL_CREATED_DATE TIMESTAMP,
  PL_CREATED_BY INTEGER,

  --IMPLEMENTED
  IM_TECH_VOLUME DOUBLE PRECISION,
  IM_FIRE_VOLUME DOUBLE PRECISION,
  IM_PULP_VOLUME DOUBLE PRECISION,
  IM_CREATED_DATE TIMESTAMP,
  IM_CREATED_BY INTEGER,

  DAMAGE_VOLUME DOUBLE PRECISION,-- FILL IN CASE OF EVIDENT ACTIVITY ILEGAL FELLING OR FIRE OR DISASTER ETC
   
  FOREIGN KEY (ACTIVITY_ID) REFERENCES TFRM_ACTIVITY(ID),
  FOREIGN KEY (STAND_ID) REFERENCES TGIS_STAND(ID),
  FOREIGN KEY (TREE_SPECIES_ID) REFERENCES TFRM_TREE_SPECIES(ID),
  FOREIGN KEY (STATUS_ID) REFERENCES TFRM_ACTIVITY_STATUS(ID),
  FOREIGN KEY (PL_CREATED_BY) REFERENCES TPERSON(ID),
  FOREIGN KEY (IM_CREATED_BY) REFERENCES TPERSON(ID)
);

CREATE TABLE TFRM_STAND_HARVEST_MARKED(
	ID SERIAL PRIMARY KEY,
	HARVEST_ID INTEGER NOT NULL,
	TREE_SPECIES_ID INTEGER NOT NULL,
	DIAMETER_1_3  DOUBLE PRECISION NOT NULL,
	HEIGHT DOUBLE PRECISION NOT NULL,
	TECH_VOLUME DOUBLE PRECISION, 
	FIRE_VOLUME DOUBLE PRECISION,
	PULP_VOLUME DOUBLE PRECISION,
	VOLUME_TOTAL DOUBLE PRECISION,
	REMARKS VARCHAR(255),
	CREATED_DATE TIMESTAMP,
	CREATED_BY INTEGER,
	
	FOREIGN KEY (HARVEST_ID) REFERENCES TFRM_STAND_HARVEST_ACTIVITY(ID),
	FOREIGN KEY (TREE_SPECIES_ID) REFERENCES TFRM_TREE_SPECIES(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
	
);	
        
CREATE TABLE tfrm_harvest_impl_transport
(
  id bigserial NOT NULL,
  doc_type character varying(100),
  doc_name character varying(100),
  doc bytea,
  remark text,
  trans_date date NOT NULL,
  created_date timestamp without time zone NOT NULL,
  created_by integer NOT NULL,
  CONSTRAINT tfrm_harvest_impl_transport_pkey PRIMARY KEY (id),
  CONSTRAINT tfrm_harvest_impl_transport_created_by_fkey FOREIGN KEY (created_by)
      REFERENCES tperson (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

 CREATE TABLE TFRM_STAND_HARVEST_IMPL_DECLARE(
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  HARVEST_ACTIVITY_ID  INTEGER  NOT NULL,
  TRANSPORT_ID INTEGER,
  --IMPLEMENTED	
  TECH_VOLUME DOUBLE PRECISION NOT NULL,
  FIRE_VOLUME DOUBLE PRECISION NOT NULL,
  PULP_VOLUME DOUBLE PRECISION NOT NULL,
  IM_DATE DATE NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  CREATED_BY INTEGER NOT NULL,
  FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID),
  FOREIGN KEY (HARVEST_ACTIVITY_ID) REFERENCES TFRM_STAND_HARVEST_ACTIVITY(ID),
  FOREIGN KEY (TRANSPORT_ID) REFERENCES TFRM_HARVEST_IMPL_TRANSPORT(ID)
 );
 



CREATE TABLE TFRM_STAND_SILVICULTURE_ACTIVITY (
  ID BIGSERIAL PRIMARY KEY NOT NULL,
  ACTIVITY_ID BIGINT NOT NULL,
  STAND_ID INTEGER NOT NULL,
  STATUS_ID BIGINT NOT NULL,
  TREE_SPECIES_GROUP VARCHAR, --FLETORE TE BUTE, FLETORE TE FORTE, HALORE
  WORK_STAGE CHAR(1) NOT NULL DEFAULT 'P', -- P=Planning, I=Implementation
  
  --PLANNED
  PL_AREA DOUBLE PRECISION,
  PL_CREATED_DATE TIMESTAMP,
  PL_CREATED_BY INTEGER,

  --IMPLEMENTED
  IM_AREA DOUBLE PRECISION,
  IM_CREATED_DATE TIMESTAMP,
  IM_CREATED_BY INTEGER,

  FOREIGN KEY (ACTIVITY_ID) REFERENCES TFRM_ACTIVITY(ID),
  FOREIGN KEY (STAND_ID) REFERENCES TGIS_STAND(ID),
  FOREIGN KEY (STATUS_ID) REFERENCES TFRM_ACTIVITY_STATUS(ID),
  FOREIGN KEY (PL_CREATED_BY) REFERENCES TPERSON(ID),
  FOREIGN KEY (IM_CREATED_BY) REFERENCES TPERSON(ID)
);

 CREATE TABLE TFRM_STAND_SILVICULTURE_IMPL_DECLARE(
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  SLV_ACTIVITY_ID  INTEGER  NOT NULL,
  IM_AREA DOUBLE PRECISION NOT NULL,
  IM_GEOM GEOMETRY NOT NULL,
  IM_DATE DATE NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  CREATED_BY INTEGER NOT NULL,
  FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID),
  FOREIGN KEY (SLV_ACTIVITY_ID) REFERENCES TFRM_STAND_SILVICULTURE_ACTIVITY(ID)
 );

CREATE TABLE TFRM_SEED_ACTIVITY(
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  INSTITUTE VARCHAR(100), --INSTITUI QE PRODHON FIDANE
  ACTIVITY_ID BIGINT NOT NULL,
  STATUS_ID BIGINT NOT NULL,
  YEAR SMALLINT NOT NULL,
  
  PROD_TYPE VARCHAR(50) NOT NULL, -- PRODHIM KALSIK, PRODHIM INDUSTRIAL
  TREE_SPECIES_ID INTEGER NOT NULL, --LLOJI U FIDANEVE(DRUVE)
  WORK_STAGE CHAR(1) NOT NULL DEFAULT 'R', -- R=Request/Proposal, P=Planning, I=Implementation, D=Depo
  
  PR_VALUE INTEGER, --FIDANET E PROPOZUARA NGA INSTITUTI I PYJEVE
  PL_VALUE INTEGER, --FIDANET E MBJELLUR
  EX_VALUE INTEGER, --FIDENAT TE PRITURA
  IM_VALUE INTEGER, --FIDANET E GATSHME/IMPLEMENTUARA
  
  PR_CREATED_DATE TIMESTAMP,
  PR_CREATED_BY INTEGER,
  
  PL_CREATED_DATE TIMESTAMP,
  PL_CREATED_BY INTEGER,

  IM_CREATED_DATE TIMESTAMP,
  IM_CREATED_BY INTEGER, 
  
  FOREIGN KEY (ACTIVITY_ID) REFERENCES TFRM_ACTIVITY(ID),
  FOREIGN KEY (TREE_SPECIES_ID) REFERENCES TFRM_TREE_SPECIES(ID),
  FOREIGN KEY (STATUS_ID) REFERENCES TFRM_ACTIVITY_STATUS(ID),
  FOREIGN KEY (PR_CREATED_BY) REFERENCES TPERSON(ID),
  FOREIGN KEY (PL_CREATED_BY) REFERENCES TPERSON(ID),
  FOREIGN KEY (IM_CREATED_BY) REFERENCES TPERSON(ID),
   UNIQUE (YEAR,PROD_TYPE,TREE_SPECIES_ID)
);


CREATE TABLE TFRM_SEEDLING_INVENTORY(
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  SEED_ACTIVITY_ID BIGINT,
  PROD_TYPE VARCHAR(50) NOT NULL, -- PRODHIM KALSIK, PRODHIM INDUSTRIAL
  TREE_SPECIES_ID INTEGER NOT NULL, --LLOJI U FIDANEVE(DRUVE)
  AGE SMALLINT NOT NULL,
  SEED_YEAR INTEGER NOT NULL,
  STOCK INTEGER NOT NULL,
  PRICE decimal(10,2),
  
  CREATED_DATE TIMESTAMP NOT NULL,
  CREATED_BY INTEGER NOT NULL,
  CHANGED_DATE TIMESTAMP,
  CHANGED_BY INTEGER, 

  FOREIGN KEY (SEED_ACTIVITY_ID) REFERENCES TFRM_SEED_ACTIVITY(ID),
  FOREIGN KEY (TREE_SPECIES_ID) REFERENCES TFRM_TREE_SPECIES(ID),
  FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID),
  FOREIGN KEY (CHANGED_BY) REFERENCES TPERSON(ID)
    
);

CREATE TABLE TFRM_SEEDLING_INVENTORY_POS(
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  INVENTORY_ID BIGINT NOT NULL,
  
  PROD_TYPE VARCHAR(50),
  TREE_SPECIES_ID INTEGER NOT NULL, 
  AGE SMALLINT NOT NULL,
  QUANTITY NUMERIC(10,0) NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  CREATED_BY INTEGER NOT NULL,
  NOTE VARCHAR(255),

  CHANGED_DATE TIMESTAMP,
  CHANGED_BY INTEGER,
  ISAPPROVED CHARACTER(1) NOT NULL DEFAULT 'O'::BPCHAR,
  APPROVED_DATE TIMESTAMP,
  APPROVED_BY INTEGER,  
  ISDELIVERED CHARACTER(1) NOT NULL DEFAULT 'N'::BPCHAR,
  PICKUP_DATE TIMESTAMP,
  PICKUP_CONTACT VARCHAR(255),

  FOREIGN KEY (INVENTORY_ID) REFERENCES TFRM_SEEDLING_INVENTORY(ID),
  FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID),
  FOREIGN KEY (CHANGED_BY) REFERENCES TPERSON(ID),  
  FOREIGN KEY (APPROVED_BY) REFERENCES TPERSON(ID),
  FOREIGN KEY (TREE_SPECIES_ID) REFERENCES TFRM_TREE_SPECIES(ID),
  
  CONSTRAINT TFRM_SEEDLING_INVENTORY_POS_ISAPPROVED_CHECK CHECK (ISAPPROVED = ANY (ARRAY['O'::BPCHAR, 'Y'::BPCHAR, 'N'::BPCHAR])), --O=Open,Y=Yes,N=No
  CONSTRAINT TFRM_SEEDLING_INVENTORY_POS_ISDELIVERED_CHECK CHECK (ISDELIVERED = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR]))
  
);

CREATE TABLE TFRM_STAND_PLANTING_ACTIVITY (
  ID BIGSERIAL PRIMARY KEY NOT NULL,
  ACTIVITY_ID BIGINT NOT NULL,
  STAND_ID INTEGER NOT NULL,
  STATUS_ID BIGINT NOT NULL,
  TREE_SPECIES_ID INTEGER NOT NULL, 
  PROD_TYPE VARCHAR(50),
  INVENTORY_POS_ID BIGINT,
  
  WORK_STAGE CHAR(1) NOT NULL DEFAULT 'P', -- P=Planning, I=Implementation
  SEEDLING_AGE VARCHAR(10),
  --PLANNED
  PL_AREA DOUBLE PRECISION, --PLAN PLANNTING AREA
  PL_TREES INTEGER, --PLAN  PLANTING NUMBER OF TREES
  PL_CREATED_DATE TIMESTAMP,
  PL_CREATED_BY INTEGER,

  --IMPLEMENTED
  IM_AREA DOUBLE PRECISION, --IMPLEMENTED PLANNTING AREA
  IM_TREES INTEGER, --IMPLEMENTED  PLANTING NUMBER OF TREES
  IM_CREATED_DATE TIMESTAMP,
  IM_CREATED_BY INTEGER,
  
  IM_CONTR_ID INTEGER, ----> TFIN_CONTRACTOR
  IM_CONTR_ASSIGN_DATE TIMESTAMP WITHOUT TIME ZONE, -- when contractor id is assigned, please set assigned date
  IM_CONTR_DONE_DATE TIMESTAMP WITHOUT TIME ZONE, --date of work done by contracotr 
  IM_CONTR_NOTES VARCHAR(255),

  FOREIGN KEY (ACTIVITY_ID) REFERENCES TFRM_ACTIVITY(ID),
  FOREIGN KEY (STAND_ID) REFERENCES TGIS_STAND(ID),
  FOREIGN KEY (TREE_SPECIES_ID) REFERENCES TFRM_TREE_SPECIES(ID),
  FOREIGN KEY (INVENTORY_POS_ID) REFERENCES TFRM_SEEDLING_INVENTORY_POS(ID),
  FOREIGN KEY (STATUS_ID) REFERENCES TFRM_ACTIVITY_STATUS(ID),
  FOREIGN KEY (PL_CREATED_BY) REFERENCES TPERSON(ID),
  FOREIGN KEY (IM_CREATED_BY) REFERENCES TPERSON(ID),
  FOREIGN KEY (IM_CONTR_ID) REFERENCES TFIN_CONTRACTOR(ID)
);

CREATE TABLE TFRM_STAND_PLANTING_IMPL_DECLARE(
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  PLANT_ACTIVITY_ID  INTEGER  NOT NULL,
  IM_AREA DOUBLE PRECISION NOT NULL, --IMPLEMENTED PLANNTING AREA
  IM_TREES INTEGER NOT NULL, --IMPLEMENTED  PLANTING NUMBER OF TREES
  IM_DATE DATE NOT NULL,
  IM_GEOM GEOMETRY NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  CREATED_BY INTEGER NOT NULL,
  FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID),
  FOREIGN KEY (PLANT_ACTIVITY_ID) REFERENCES TFRM_STAND_PLANTING_ACTIVITY(ID)
);

CREATE TABLE TGIS_ROAD (
  ID BIGSERIAL PRIMARY KEY NOT NULL,
  MUN_ID INTEGER NOT NULL, -- MUNICIPALITY ID
  MU_ID INTEGER, -- MANAGMENT UNIT ID
  ROAD_NAME VARCHAR, 
  ROAD_TYPE VARCHAR(10), --RRUGE KAMIONI , RRUGE TRAKTORI, SHTEG, ETC
  ACCESS_TYPE VARCHAR(10), --RRUGE PUBLIKE, RRUGE PRIVATE, E PA NJOHUR
  --ROAD_STATUS VARCHAR(10) NOT NULL, --ASFALT, ZAVORE, TOKE E FORT, TOKE E BUTE, ETC
  QUALITY_CL VARCHAR(20),
  MAINTENANC VARCHAR(20),
  LAST_ACTIVITY_YEAR SMALLINT, -- MIREBAJTJA E FUNDIT APO AKTIVITETI I FUNDIT
  ROAD_LENGTH DOUBLE PRECISION NOT NULL, --UNITS METERS
  CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
  CREATED_BY INTEGER NOT NULL, 
  
  THE_GEOM GEOMETRY,
  --THE_GEOM_AREA DOUBLE PRECISION,
  --THE_GEOM_LENGTH DOUBLE PRECISION,  
  
  FOREIGN KEY (MUN_ID) REFERENCES TGIS_CADASTRAL_MUNICIPALITY(ID),
  FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID)
);


CREATE TABLE TFRM_ROAD_ACTIVITY(
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  ROAD_ID INTEGER NOT NULL, 
  ACTIVITY_ID BIGINT NOT NULL,
  STATUS_ID BIGINT NOT NULL,
  WORK_STAGE CHAR(1) NOT NULL DEFAULT 'P', -- P=Planning, I=Implementation
  
  --PLANED
  PL_LENGHT DOUBLE PRECISION NOT NULL, --PLANED LENGHT (METER)
  PL_START_M DOUBLE PRECISION NOT NULL, --PL ACTIVITY START FROM (METER)
  PL_END_M DOUBLE PRECISION NOT NULL, --PL ACTIVITY END IN (METER)
  PL_WIDTH DOUBLE PRECISION NOT NULL, --PL ACTIVITY LENGTH IN (METER)
  PL_CREATED_DATE TIMESTAMP,
  PL_CREATED_BY INTEGER,

  --IMPLEMETED
  IM_LENGHT DOUBLE PRECISION, --IMPLEMENTED LENGTH (METER)
  IM_START_M DOUBLE PRECISION, --IM ACTIVITY START FROM (METER)
  IM_END_M DOUBLE PRECISION, --IM ACTIVITY END IN (METER)
  IM_WIDTH DOUBLE PRECISION, --IM ACTIVITY LENGTH IN (METER)
  IM_CREATED_DATE TIMESTAMP,
  IM_CREATED_BY INTEGER, 

  FOREIGN KEY (ACTIVITY_ID) REFERENCES TFRM_ACTIVITY(ID),
  FOREIGN KEY (ROAD_ID) REFERENCES TGIS_ROAD(ID),
  FOREIGN KEY (STATUS_ID) REFERENCES TFRM_ACTIVITY_STATUS(ID),
  FOREIGN KEY (PL_CREATED_BY) REFERENCES TPERSON(ID),
  FOREIGN KEY (IM_CREATED_BY) REFERENCES TPERSON(ID)
);

CREATE TABLE TFRM_ROAD_IMPL_DECLARE(
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  ROAD_ID  INTEGER  NOT NULL,
  --IMPLEMETED
  IM_LENGHT DOUBLE PRECISION NOT NULL, --IMPLEMENTED LENGTH (METER)
  IM_START_M DOUBLE PRECISION NOT NULL, --IM ACTIVITY START FROM (METER)
  IM_END_M DOUBLE PRECISION NOT NULL, --IM ACTIVITY END IN (METER)
  IM_WIDTH DOUBLE PRECISION NOT NULL, --IM ACTIVITY LENGTH IN (METER)

  IM_DATE DATE NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  CREATED_BY INTEGER NOT NULL,
  FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID),
  FOREIGN KEY (ROAD_ID) REFERENCES TFRM_ROAD_ACTIVITY(ID)
);


--TFRM_PROTECTION_ACTIVITY

CREATE TABLE TFRM_PROTECTION_ACTIVITY(
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  ACTIVITY_ID BIGINT NOT NULL, 
  STATUS_ID BIGINT NOT NULL,
  MUN_ID INTEGER NOT NULL, 
  MU_ID INTEGER, 

  WORK_STAGE CHAR(1) NOT NULL DEFAULT 'P', -- P=Planning, I=Implementation
    
  PL_VALUE DOUBLE PRECISION NOT NULL, --Vlera e planifikuara
  IM_VALUE DOUBLE PRECISION, --Vlera e Realizuar/Implementuara

  MEASURE_UNIT_ID INTEGER NOT NULL, 
  
  PL_CREATED_DATE TIMESTAMP,
  PL_CREATED_BY INTEGER,

  IM_CREATED_DATE TIMESTAMP,
  IM_CREATED_BY INTEGER,
  
  FOREIGN KEY (ACTIVITY_ID) REFERENCES TFRM_ACTIVITY(ID),
  FOREIGN KEY (MUN_ID) REFERENCES TGIS_CADASTRAL_MUNICIPALITY(ID),
  FOREIGN KEY (MU_ID) REFERENCES TGIS_MANAGEMENT_UNIT(ID),
  FOREIGN KEY (STATUS_ID) REFERENCES TFRM_ACTIVITY_STATUS(ID),
  FOREIGN KEY (MEASURE_UNIT_ID) REFERENCES TUNITS_METRIC(ID),
  FOREIGN KEY (PL_CREATED_BY) REFERENCES TPERSON(ID),
  FOREIGN KEY (IM_CREATED_BY) REFERENCES TPERSON(ID)
);


CREATE TABLE TFRM_PROTECTION_IMPL_DECLARE(
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  PROTECTION_ID  INTEGER  NOT NULL,
  IM_VALUE DOUBLE PRECISION NOT NULL, --Vlera e Realizuar/Implementuara
  IM_GEOM GEOMETRY,
  IM_DATE DATE NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  CREATED_BY INTEGER NOT NULL,
  FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID),
  FOREIGN KEY (PROTECTION_ID) REFERENCES TFRM_PROTECTION_ACTIVITY(ID)
);

CREATE TABLE TFRM_PRIVATE_ACTIVITY(
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  ACTIVITY_ID BIGINT NOT NULL,
  STATUS_ID BIGINT NOT NULL,
  ACTIVITY_UNIT VARCHAR(10) NOT NULL,
  MUN_ID INTEGER NOT NULL, -- MUNICIPALITY ID
  WORK_STAGE CHAR(1) NOT NULL DEFAULT 'P', -- P=Planning, I=Implementation
  
  --PLANED
  PL_TECH_VOLUME DOUBLE PRECISION,
  PL_FIRE_VOLUME DOUBLE PRECISION,
  PL_CREATED_DATE TIMESTAMP,
  PL_CREATED_BY INTEGER,

  --IMPLEMETED
  IM_TECH_VOLUME DOUBLE PRECISION,
  IM_FIRE_VOLUME DOUBLE PRECISION,
  IM_CREATED_DATE TIMESTAMP,
  IM_CREATED_BY INTEGER, 
  
  
  START_CMPGN_DATE DATE NOT NULL,
  END_CMPGN_DATE DATE NOT NULL,
  

  FOREIGN KEY (ACTIVITY_ID) REFERENCES TFRM_ACTIVITY(ID),
  FOREIGN KEY (STATUS_ID) REFERENCES TFRM_ACTIVITY_STATUS(ID),
  FOREIGN KEY (MUN_ID) REFERENCES TGIS_CADASTRAL_MUNICIPALITY(ID),
  FOREIGN KEY (PL_CREATED_BY) REFERENCES TPERSON(ID),
  FOREIGN KEY (IM_CREATED_BY) REFERENCES TPERSON(ID)
);

--
--End Milaimi
--

/*
aktivitete potelnciale:
1) Road Planning
*/


CREATE TABLE TFRM_LANDSCAP_PLAN(
  ID BIGSERIAL PRIMARY KEY NOT NULL
);

CREATE TABLE TFRM_SIVICULTURE_PLAN(
  ID BIGSERIAL PRIMARY KEY NOT NULL
);

/*
CREATE TABLE TFRM_STAND_ACTIVITY_VOLUME(
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  ACTIVITY_ID BIGINT NOT NULL,
  CON_TECH DOUBLE PRECISION,
  CON_FIRE DOUBLE PRECISION,
  CON_PULP DOUBLE PRECISION,
  CON_ILEGAL DOUBLE PRECISION,
  BRO_TECH DOUBLE PRECISION,
  BRO_FIRE DOUBLE PRECISION,
  BRO_PULP DOUBLE PRECISION,
  BRO_ILEGAL DOUBLE PRECISION,
  REMARKS TEXT,

  FOREIGN KEY (ACTIVITY_ID) REFERENCES TFRM_STAND_ACTIVITY(ID)
);
*/

--assortment or products or goods, ertrag=yield, 
/*
CREATE TABLE TFRM_STAND_VOLUME_TYPE(
  ID SERIAL PRIMARY KEY NOT NULL, 
  VOLUME_TYPE_NAME VARCHAR(50) NOT NULL,
  VOLUME_TYPE_NAME_EN VARCHAR(50),
  VOLUME_TYPE_NAME_SR VARCHAR(50)  
); 

CREATE TABLE TFRM_STAND_ACTIVITY_VOLUME(
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  STAND_ACTIVITY_ID BIGINT NOT NULL,
  VOLUME_TYPE_ID BIGINT NOT NULL,
  VOLUMEN DOUBLE PRECISION NOT NULL,
  REMAKRS VARCHAR(255), 

  FOREIGN KEY (STAND_ACTIVITY_ID) REFERENCES TFRM_STAND_ACTIVITY(ID),
  FOREIGN KEY (VOLUME_TYPE_ID) REFERENCES TFRM_STAND_VOLUME_TYPE(ID)
);
*/

CREATE TABLE TFRM_BIO_DIVERSITY (
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  STAND_ID BIGINT NOT NULL,
  BIO_CODE INTEGER NOT NULL,
  SURVEYOR VARCHAR(150) NOT NULL, --Vermessungstechniker, Vermesser
  REMARKS VARCHAR(255),
  
  FOREIGN KEY (STAND_ID) REFERENCES TGIS_STAND(ID)
);

CREATE TABLE TFRM_BIO_DIVERSITY_NAME (
  ID BIGSERIAL PRIMARY KEY NOT NULL, 
  BIO_DIV_ID BIGINT NOT NULL,
  BIO_DIV_NAME VARCHAR(150) NOT NULL,
  LANG_CODE VARCHAR(2) NOT NULL DEFAULT 'sq', --sq=shqip, en=english, sr=serbian
  
  FOREIGN KEY (BIO_DIV_ID) REFERENCES TFRM_BIO_DIVERSITY(ID)
);

DROP SEQUENCE IF EXISTS FISKOS_VERSION; 
CREATE SEQUENCE FISKOS_VERSION START 1;


CREATE TABLE TFRM_FISKOS_IMPORT(
  ID SERIAL PRIMARY KEY NOT NULL,
  TRNX_ID CHARACTER VARYING(36) NOT NULL, --transaction id in order to track the tranaction of import
  VERSION_NR INTEGER NOT NULL,
  ISACTIVE CHARACTER(1) NOT NULL DEFAULT 'Y'::BPCHAR,
  REGION_ID INTEGER NOT NULL, 
  MU_ID INTEGER NOT NULL,
  START_DATE TIMESTAMP NOT NULL,
  END_DATE TIMESTAMP NOT NULL,
  CREATED_BY INTEGER NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  CHANGED_BY INTEGER NOT NULL,
  CHANGED_DATE TIMESTAMP NOT NULL,
  
  NOTE VARCHAR(255),

  FOREIGN KEY (REGION_ID) REFERENCES TGIS_REGION(ID),
  FOREIGN KEY (MU_ID) REFERENCES TGIS_MANAGEMENT_UNIT(ID),
  FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID),
  FOREIGN KEY (CHANGED_BY) REFERENCES TPERSON(ID),
  CONSTRAINT TFRM_FISKOS_IMPORT_ISACTIVE_CHECK CHECK (ISACTIVE = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR]))
);

CREATE TABLE SHAPE_STAND
(
  OGC_FID SERIAL NOT NULL,
  WKB_GEOMETRY GEOMETRY,
  STAND_ID CHARACTER VARYING(254),
  FMR CHARACTER VARYING(2),
  --FMRNAME CHARACTER VARYING(50),
  MUNICI CHARACTER VARYING(3),
  --MUNICINAME CHARACTER VARYING(50),
  MU CHARACTER VARYING(2),
  --MUNAME CHARACTER VARYING(50),
  COMP CHARACTER VARYING(3),
  --SUBCOMP CHARACTER VARYING(1),
  STAND CHARACTER VARYING(2),
  STANDAREA NUMERIC(19,11),
  MC NUMERIC(4,0),
  --MCNAME CHARACTER VARYING(254),
  NO_PLOTS NUMERIC(9,0),
  ACCESS NUMERIC(4,0),
  --ACCESSNAME CHARACTER VARYING(254),
  MINEHAZARD CHARACTER VARYING(254),
  LAYERS NUMERIC(9,0),
  --LAYERSNAME CHARACTER VARYING(254),
  --BIODIVERSI NUMERIC(9,0),
  CROWNCOVER NUMERIC(19,11),
  SLOPE NUMERIC(19,11),
  LITTERCOV NUMERIC(19,11),
  AGE NUMERIC(19,11),
  ORIGIN NUMERIC(4,0),
  --ORIGINNAME CHARACTER VARYING(254),
  DOMSPC NUMERIC(4,0),
  CONSI NUMERIC(19,11),
  DOMSPB NUMERIC(4,0),
  BROSI NUMERIC(19,11),
  TREES NUMERIC(19,11),
  TREATM NUMERIC(9,0),
  --TREATMNAME CHARACTER VARYING(254),
  TREATMAREA NUMERIC(19,11),
  M3CONHA NUMERIC(19,11),
  M3BROHA NUMERIC(19,11),
  M3_0_30 NUMERIC(19,11),
  M3_30_50 NUMERIC(19,11),
  M3_50_70 NUMERIC(19,11),
  M3_70_ NUMERIC(19,11),
  M3TOT_HA NUMERIC(19,11),
  M3STAND NUMERIC(19,11),
  RELERROR NUMERIC(19,11),
  CONPERC NUMERIC(19,11),
  BROPERC NUMERIC(19,11),
  M3ILCUTCON NUMERIC(19,11),
  M3ILCUTBRO NUMERIC(19,11),
  INCRCONHA NUMERIC(19,11),
  INCRBROHA NUMERIC(19,11),
  INCRTOT_HA NUMERIC(19,11),
  INCRSTAND NUMERIC(19,11),
  M3_M_CON NUMERIC(19,11),
  M3_M_BRO NUMERIC(19,11),
  M3_M_TOT NUMERIC(19,11),
  M3_M_STAND NUMERIC(19,11),
  M2_HA NUMERIC(19,11),
  DS_CON NUMERIC(19,11),
  DS_BRO NUMERIC(19,11),
  CL1_CON NUMERIC(19,11),
  CL2_CON NUMERIC(19,11),
  CL3_CON NUMERIC(19,11),
  CL4_CON NUMERIC(19,11),
  CL1_BRO NUMERIC(19,11),
  CL2_BRO NUMERIC(19,11),
  CL3_BRO NUMERIC(19,11),
  CL4_BRO NUMERIC(19,11),
  DAMAGEPERC NUMERIC(19,11),
  M3EST NUMERIC(13,11),
  STEMSHA NUMERIC(4,0),
  HEIGHTMEAN NUMERIC(4,0),
  YOUNGTREE1 NUMERIC(9,0),
  YOUNGTREE2 NUMERIC(9,0),
  YOUNGTREE3 NUMERIC(9,0),
  SURVEY_DAT DATE,
  CONSTRAINT SHAPE_STAND_PKEY PRIMARY KEY (OGC_FID)
);
	
CREATE TABLE TSHAPE_TREATMENT_NAME(
	  ID SERIAL PRIMARY KEY,
	  CODE INTEGER NOT NULL,
	  NAME VARCHAR(255) NOT NULL,
	  NAME_EN VARCHAR(255),
	  NAME_SR VARCHAR(255)
);

CREATE TABLE TSHAPE_STAND_TREATMENT(
	ID SERIAL PRIMARY KEY,
	TREATMENT_ID INTEGER NOT NULL,-- treatm shape stand
	STAND_ID INTEGER NOT NULL,--id_stand tgis_stand
	TREATMENT_DATE TIMESTAMP,
	TREATMENT_AREA_PERC DOUBLE PRECISION,-- round(treatmarea/st_area(wkb_geometry)::numeric,0) shape_stand
	FOREIGN KEY(TREATMENT_ID) REFERENCES TSHAPE_TREATMENT_NAME(ID),
	FOREIGN KEY(STAND_ID) REFERENCES TGIS_STAND(ID)
);

		
CREATE TABLE TBIODIV_NAME(
	  ID SERIAL PRIMARY KEY,
	  CODE INTEGER NOT NULL,
	  NAME VARCHAR(255) NOT NULL,
	  NAME_EN VARCHAR(255),
	  NAME_SR VARCHAR(255)
);

CREATE TABLE TGIS_BIODIV
(
  ID SERIAL NOT NULL,
  STAND_ID INTEGER,
  BIODIV_ID INTEGER,
  REMARKS CHARACTER VARYING(150),
  COMP_NR CHARACTER VARYING(3),
  STAND_NR CHARACTER VARYING(3),
  TIMEFORM CHARACTER VARYING(10),
  TAKSATOR CHARACTER VARYING(25),
  THE_GEOM GEOMETRY(POINT,900916),
  CONSTRAINT TGIS_BIODIV_PKEY PRIMARY KEY (ID),
  CONSTRAINT TGIS_BIODIV_BIODIV_ID_FKEY FOREIGN KEY (BIODIV_ID)
      REFERENCES TBIODIV_NAME (ID) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT TGIS_BIODIV_STAND_ID_FKEY FOREIGN KEY (STAND_ID)
      REFERENCES TGIS_STAND (ID) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE TABLE SHAPE_BIODIVERSITY
(
  OGC_FID SERIAL NOT NULL,
  WKB_GEOMETRY GEOMETRY(POINT),
  BIOCODE NUMERIC(4,0),
  REMARKS CHARACTER VARYING(150),
  COMP_NR NUMERIC(19,11),
  STAND_NR CHARACTER VARYING(3),
  BIODIVERSI NUMERIC(4,0),
  TIMEFORM CHARACTER VARYING(10),
  TAKSATOR CHARACTER VARYING(25),
  CONSTRAINT SHAPE_BIODIVERSITY_PKEY PRIMARY KEY (OGC_FID)
);




CREATE TABLE TGIS_STATE
(
  ID SERIAL NOT NULL,
  NAME CHARACTER VARYING(80) NOT NULL,
  NAME_SR CHARACTER VARYING(80),
  NAME_EN CHARACTER VARYING(80),
  THE_GEOM GEOMETRY,
  CONSTRAINT TGIS_STATE_PKEY PRIMARY KEY (ID),
  CONSTRAINT ENFORCE_DIMS_THE_GEOM CHECK (ST_NDIMS(THE_GEOM) = 2),
  CONSTRAINT ENFORCE_GEOTYPE_THE_GEOM CHECK (GEOMETRYTYPE(THE_GEOM) = 'POLYGON'::TEXT OR GEOMETRYTYPE(THE_GEOM) = 'MULTIPOLYGON'::TEXT OR THE_GEOM IS NULL),
  CONSTRAINT ENFORCE_SRID_THE_GEOM CHECK (ST_SRID(THE_GEOM) = 900916)
);

CREATE TABLE TFRM_FISKOS_DATA (
  ID BIGSERIAL PRIMARY KEY NOT NULL,
  IMPORT_ID INTEGER NOT NULL,

  REGION_ID INTEGER NOT NULL, 
  MU_ID INTEGER NOT NULL
  
  ,MUN_ID INTEGER -- for the moment must ignore add column municipality as varchar
  
  ,MNGM_CLASS_ID INTEGER -- for the moment must ignore add column MNGMT_CLASS as varchar
  ,ACTIVE BOOLEAN NOT NULL DEFAULT TRUE
  ,VERSION_NR INTEGER NOT NULL --BIGINT
  ,MODYFIED_DATE  TIMESTAMP
  ,IMPORTED_BY	INTEGER NOT NULL
  ,IMPORTED_DATE TIMESTAMP NOT NULL DEFAULT NOW()
  ,NOTES varchar(255)
  
  /*Original data from import excel file FISKOS */	
  ,REGION VARCHAR(150)
  ,MANAGMENT_UNIT VARCHAR(150)
  ,MUNICIPALITY VARCHAR (100)
  ,COMP VARCHAR(20) --ngasra  
  ,STAND VARCHAR(20) --STAND OR SUB-COMPARTMENT or nen-ngasra
  ,STANDAREA DOUBLE PRECISION
  ,MNGMNT_CLASS INTEGER	--MANAGEMENT CLASS
  ,ALB_SHORT VARCHAR(150)
  ,PLOTS_NR VARCHAR (100) --NUMBER OF SURVEYED PLOTS IN STAND,
  ,ACCESSIBLE VARCHAR(100) -- ACCESIBLE OF STAND 
  ,MINEHAZARD  VARCHAR(100) -- MINEHAZARD OF STAND  
  ,LAYERS VARCHAR(50)  
  ,STAND_TYPE VARCHAR(50)  --TYPE OF STAND AREA , 1. OPEN AREA, 2. WITH PLOTS AND WITHOUT PLOTS
  ,CROWNCOVER DOUBLE PRECISION --kurordensia
  ,SLOPE DOUBLE PRECISION --pjerresia
  ,LITTERCOV DOUBLE PRECISION --legushe
  ,AGE INTEGER --mosha
  ,ORIGIN  VARCHAR(50) --origjina
  ,CONIFER VARCHAR(50) --HALOR
  ,CONIFER_BON DOUBLE PRECISION 
  ,DECIDOUSE VARCHAR(50) --FLETOR
  ,DECIDOUSE_BON DOUBLE PRECISION
  ,TREES INTEGER
  ,VOLUME_M3HA DOUBLE PRECISION --VOLUME PER HECTAR M³/Ha
  ,CONIFER_PERC DOUBLE PRECISION --PERQINDJA E HALOREVE 
  ,DECIDOUSE_PERC DOUBLE PRECISION --PERQINDJA E FLETOREVE 
  ,PERC_0_30 DOUBLE PRECISION --PERQINDJA DIAMETRIKE 0-30
  ,PERC_30_50 DOUBLE PRECISION --PERQINDJA DIAMETRIKE 30-50
  ,PERC_50_70 DOUBLE PRECISION --PERQINDJA DIAMETRIKE 50-70
  ,PERC_70_100 DOUBLE PRECISION --PERQINDJA DIAMETRIKE 70-100
  ,INCR_PERC DOUBLE PRECISION	--RRITJA VJETORE
  ,M2_HA  DOUBLE PRECISION --?
  ,DS_CON DOUBLE PRECISION
  ,DS_BRO DOUBLE PRECISION
  ,CL1_PERC_CON DOUBLE PRECISION -- Halor Klasa e Kualitetit I ne perqindje
  ,CL2_PERC_CON DOUBLE PRECISION -- Halor Klasa e Kualitetit II ne perqindje
  ,CL3_PERC_CON DOUBLE PRECISION -- Halor Klasa e Kualitetit III ne perqindje
  ,CL4_PERC_CON DOUBLE PRECISION -- Halor Klasa e Kualitetit IV ne perqindje
  ,CL1_PERC_DEC DOUBLE PRECISION -- Fletor Klasa e Kualitetit I ne perqindje
  ,CL2_PERC_DEC DOUBLE PRECISION -- Fletor Klasa e Kualitetit II ne perqindje 
  ,CL3_PERC_DEC DOUBLE PRECISION  -- Fletor Klasa e Kualitetit III ne perqindje
  ,CL4_PERC_DEC DOUBLE PRECISION  -- Fletor Klasa e Kualitetit IV ne perqindje
  ,DAMAGE_PERC DOUBLE PRECISION  --demtimet ne perqindje
  ,ESTEMATE_VOLUME INTEGER -- veliimi i vlersuar te dhenat  nga textdomain ose nje tabel 
  ,ESTIMATE_TREES_PER_HA INTEGER -- Numri i drureve te vleresuar per hektar   te dhenat  nga textdomain ose nje tabel 
  ,HEIGHT_MEAN INTEGER 
  ,TREE_SPECIES1 VARCHAR(50)
  ,TREE_SPECIES2 VARCHAR(50)
  ,TREE_SPECIES3 VARCHAR(50)
  ,TREE1 INTEGER -- Lloji i druve dominues
  ,TREE2 INTEGER 
  ,TREE3 INTEGER 
  ,TERRAIN_DATE TIMESTAMP  
  ,SURVEY_DATE TIMESTAMP
  ,MSGTEXT VARCHAR(255)

  ,FOREIGN KEY (MU_ID) REFERENCES TGIS_MANAGEMENT_UNIT(ID)
  ,FOREIGN KEY (MUN_ID) REFERENCES TGIS_CADASTRAL_MUNICIPALITY(ID)
  ,FOREIGN KEY (IMPORTED_BY) REFERENCES TPERSON(ID)
  ,FOREIGN KEY (IMPORT_ID) REFERENCES TFRM_FISKOS_IMPORT(ID)
  
);

CREATE TABLE TFRM_ANNUAL_PROTECTION_PLAN (
  ID SERIAL PRIMARY KEY NOT NULL, 
  MUN_ID INTEGER,
  MU_ID INTEGER,   
  DISEASES VARCHAR(50),
  INSECTS VARCHAR(50),
  YEAR INTEGER, 
  FOREIGN KEY (MU_ID) REFERENCES TGIS_MANAGEMENT_UNIT(ID),
  FOREIGN KEY (MUN_ID) REFERENCES TGIS_CADASTRAL_MUNICIPALITY(ID)
);

/*INSPECTION OFFICE*/

CREATE TABLE TFRM_INSP_ACTION_TYPE(
	ID BIGSERIAL PRIMARY KEY NOT NULL,
	NAME_AL VARCHAR(50) NOT NULL,
	NAME_EN VARCHAR(50) NOT NULL,
	NAME_SR VARCHAR(50),
	DESCRIPTION TEXT
);
/**
CREATE TABLE TFRM_INSPECTION(
	ID SERIAL PRIMARY KEY NOT NULL, 
	INSPECTION_NO VARCHAR(20) NOT NULL,
	REGION_ID INTEGER,
	MUN_ID INTEGER,
	UNIT_METRIC_ID INTEGER,
	INSPECTION_TYPE CHAR(3),
	REFERENCE_NO VARCHAR(30),
	PARENT_ID INTEGER,
	
	--INSPECT_NO VARCHAR(50) NOT NULL
	OFFICE_IN_CHARGE VARCHAR(50),
	TYPE_ACTION INTEGER,
	QUANTITY_CONCERNED DOUBLE PRECISION,
	CONTACT_PERSON VARCHAR(150),
	

	INSPECTION_DATE DATE NOT NULL,
	NOTES VARCHAR(500),
	NARRATIVE_REPORT TEXT,
	
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	
	FOREIGN KEY (UNIT_METRIC_ID) REFERENCES TUNITS_METRIC(ID),
	FOREIGN KEY (TYPE_ACTION) REFERENCES TFRM_INSP_ACTION_TYPE(ID),
	FOREIGN KEY (MUN_ID) REFERENCES TGIS_CADASTRAL_MUNICIPALITY(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID),
	FOREIGN KEY (REGION_ID) REFERENCES TGIS_REGION(ID),
	FOREIGN KEY (PARENT_ID) REFERENCES TFRM_INSPECTION(ID)
	
);
**/
CREATE TABLE TFRM_INSPECTION(
	ID SERIAL PRIMARY KEY NOT NULL,
	INSPECTION_NO VARCHAR(20) NOT NULL,
	INSPECTION_TYPE CHAR(3),
	
	--CONTROL CTR
	REGION_ID INTEGER,
	MUN_ID INTEGER,
	NOTES VARCHAR(500),
	DATE TIMESTAMP NOT NULL,
	--PROCESVERBAL NO
	PROCESVERBAL BOOLEAN,
	PROCESVERBAL_NO INTEGER,
	CONTACT_PERSON VARCHAR(150),
	PROCESVERBAL_NOTE TEXT,
	--SEQUESTRATION SEQ
	SEQUESTRATION BOOLEAN ,
	SEQ_TEACH_VOLUME DOUBLE PRECISION,
	SEQ_FIRE_VOLUME DOUBLE PRECISION,
	SEQ_NOTE TEXT,
	
	--Fleteparaqitje /charges
	CHARGES BOOLEAN,
	CHARGES_TYPE VARCHAR(2), --OFFENDER OR PENAL
	CHARGES_REF_NO VARCHAR(30),
	CHARGES_NOTE TEXT,
	--CONTROL CTR
	
	PARENT_ID INTEGER,
	TYPE_ACTION INTEGER,
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	FOREIGN KEY (TYPE_ACTION) REFERENCES TFRM_INSP_ACTION_TYPE(ID),
	FOREIGN KEY (MUN_ID) REFERENCES TGIS_CADASTRAL_MUNICIPALITY(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID),
	FOREIGN KEY (REGION_ID) REFERENCES TGIS_REGION(ID),
	FOREIGN KEY (PARENT_ID) REFERENCES TFRM_INSPECTION(ID)

);
CREATE TABLE TFRM_INSPECTOR(
 ID BIGSERIAL PRIMARY KEY NOT NULL,
 EMPLOYEE_ID INTEGER NOT NULL,
 OFFICE_ACTIVITY_ID INTEGER NOT NULL,
 FOREIGN KEY (EMPLOYEE_ID) REFERENCES THRM_EMPLOYEE(ID),
 FOREIGN KEY (OFFICE_ACTIVITY_ID) REFERENCES TFRM_INSPECTION(ID)
 );


CREATE TABLE TFRM_INSPECTION_DOC (
	ID SERIAL PRIMARY KEY NOT NULL,
	INSPECTION_ID BIGINT NOT NULL,
	
	DOC_TYPE VARCHAR(100) NOT NULL, 
	DOC_NAME VARCHAR(100) NOT NULL, 
	DOC BYTEA NOT NULL,

	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,

	FOREIGN KEY (INSPECTION_ID) REFERENCES TFRM_INSPECTION(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
);

CREATE TABLE TFRM_FIRE_REPORT (
	ID SERIAL PRIMARY KEY NOT NULL,
	
	REGION_ID INTEGER NOT NULL,
	MUN_ID INTEGER NOT NULL,
	MU_ID INTEGER NOT NULL,
	
	FIRE_TYPE VARCHAR(255),
	FIRE_CAUSE VARCHAR(255),
	OCCURRENCE_DATE TIMESTAMP NOT NULL,
	EXTINGUISH_DATE TIMESTAMP NOT NULL,
	EXTINGUISHED_BY VARCHAR(100),
	
	PUB_DAMAGE_M3 DOUBLE PRECISION,
	PUB_DAMAGE_EURO DOUBLE PRECISION,
	PUB_DAMAGE_M2 DOUBLE PRECISION,
	
	PVT_DAMAGE_M3 DOUBLE PRECISION,
	PVT_DAMAGE_EURO DOUBLE PRECISION,
	PVT_DAMAGE_M2 DOUBLE PRECISION,
	
	PROPOSED_ACTION VARCHAR(255),
	
	DOC_TYPE VARCHAR(100), 
	DOC_NAME VARCHAR(100), 
	DOC BYTEA,
	
	COMMENT TEXT,
	
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	
	FOREIGN KEY (REGION_ID) REFERENCES TGIS_REGION(ID),
	FOREIGN KEY (MUN_ID) REFERENCES TGIS_CADASTRAL_MUNICIPALITY(ID),
	FOREIGN KEY (MU_ID) REFERENCES TGIS_MANAGEMENT_UNIT(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID)
);

CREATE TABLE TFRM_FIRE_DETAILS (
	ID SERIAL PRIMARY KEY NOT NULL,
	FIRE_REPORT_ID INTEGER NOT NULL,
	COMP_ID INTEGER NOT NULL,
	STAND_ID INTEGER NOT NULL,
	DAMAGE_M2 DOUBLE PRECISION,
	DAMAGE_M3 DOUBLE PRECISION,
	DAMAGE_EURO DOUBLE PRECISION,
	
	FOREIGN KEY (FIRE_REPORT_ID) REFERENCES TFRM_FIRE_REPORT(ID),
	FOREIGN KEY (COMP_ID) REFERENCES TGIS_COMPARTMENT(ID),
	FOREIGN KEY (STAND_ID) REFERENCES tgis_stand(ID)
);


DROP TABLE TFRM_FIRE_POINT;
DROP TABLE TFRM_FIRE_POLYGON;

CREATE TABLE TFRM_FIRE_POINT(
  ID BIGINT PRIMARY KEY  NOT NULL ,
  POINT GEOMETRY,
  FIRE_ID INTEGER NOT NULL,
  CONSTRAINT TFRM_FIRE_POINT_FIRE_ID_FKEY FOREIGN KEY (FIRE_ID)
      REFERENCES TFRM_FIRE_REPORT(ID)
);

CREATE TABLE TFRM_FIRE_POLYGON(
  ID BIGINT PRIMARY KEY  NOT NULL ,
  POLYGON GEOMETRY,
  FIRE_ID INTEGER NOT NULL,
  CONSTRAINT TFRM_FIRE_POLYGON_FIRE_ID_FKEY FOREIGN KEY (FIRE_ID)
      REFERENCES TFRM_FIRE_REPORT(ID)
);



CREATE TABLE TFRM_CONFISCATION (
	ID SERIAL PRIMARY KEY  NOT NULL, 
	MUN_ID INTEGER NOT NULL,
	CONFISCATION_DATE DATE,
	TYPE CHAR(2) NOT NULL, --CO (CINFISCATION) , SA (SALE)
	REMARKS TEXT,
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	FOREIGN KEY (MUN_ID) REFERENCES TGIS_CADASTRAL_MUNICIPALITY(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
);

CREATE TABLE TFRM_CONFISCATION_DETAIL(
	ID SERIAL PRIMARY KEY  NOT NULL,
	CONFISCATION_ID INTEGER NOT NULL,
	TREE_SPECIES_ID INTEGER  NOT NULL,
	TREE_TECH_VOLUME DOUBLE PRECISION,
	TREE_FIRE_VOLUME DOUBLE PRECISION,
	TOTAL_VOLUME DOUBLE PRECISION NOT NULL,
	FOREIGN KEY (TREE_SPECIES_ID) REFERENCES TFRM_TREE_SPECIES(ID),
	FOREIGN KEY (CONFISCATION_ID) REFERENCES TFRM_CONFISCATION(ID)
	
);



CREATE TABLE TB_MONITOR_EVAL (
	ID SERIAL PRIMARY KEY  NOT NULL, 

	SOURCE VARCHAR(255), 
	PILLAR VARCHAR(255), 
	PSP_CODE VARCHAR(255), 
	PROJECT VARCHAR(255), 
	SUB_PROJECT VARCHAR(255), 
	INDICATOR VARCHAR(255), 
	UNIT VARCHAR(255), 
	TARGET_ACTUAL VARCHAR(255), 
	ENTRY_TYPE VARCHAR(255), 
	CALC_FORMULA VARCHAR(255), 
	BASELINE VARCHAR(255), 
	"2010" VARCHAR(255), 
	"2011" VARCHAR(255), 
	"2012" VARCHAR(255), 
	"2013" VARCHAR(255), 
	"2014" VARCHAR(255), 
	"2015" VARCHAR(255), 
	"2016" VARCHAR(255), 
	"2017" VARCHAR(255), 
	"2018" VARCHAR(255), 
	"2019" VARCHAR(255), 
	"2020" VARCHAR(255), 
	"2021" VARCHAR(255), 
	"2022" VARCHAR(255), 
	"2023" VARCHAR(255),

	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
);


/*
CREATE TABLE TEQUIPMENT
(
   ID UUID PRIMARY KEY DEFAULT UUID_GENERATE_V4(),
   EQUIPMENT_NAME VARCHAR(10) NOT NULL
);


INSERT INTO TEQUIPMENT VALUES(UUID_GENERATE_V4(), 'EQ1');
INSERT INTO TEQUIPMENT VALUES(UUID_GENERATE_V4(), 'EQ2');
*/


/*
ALTER TABLE TPARTY_USER ADD CONSTRAINT TPARTY_USER_PARTY 
    FOREIGN KEY (PARTY_ID) REFERENCES TPARTY (ID) ON DELETE CASCADE ON UPDATE CASCADE;
 
ALTER TABLE TPARTY_USER ADD CONSTRAINT TPARTY_USER_USER
    FOREIGN KEY (USER_ID) REFERENCES TUSER (ID) ON DELETE CASCADE ON UPDATE CASCADE;
*/    
 
-- TORGANISATION_TREE_VIEW
DROP VIEW IF EXISTS PUBLIC.TORGANISATION_TREE_VIEW;
CREATE OR REPLACE VIEW PUBLIC.TORGANISATION_TREE_VIEW AS 
 WITH RECURSIVE TORGANISATION_TREE(ID, PARENT_ID, ORGA_NAME, CODE, PATH, DEPTH) AS (
                 SELECT TORGANISATION.ID,
                    TORGANISATION.PARENT_ID,
                    TORGANISATION.ORGA_NAME,
                    TORGANISATION.CODE,
                    NULL::INTEGER[] || TORGANISATION.PARENT_ID,
                    1
                   FROM TORGANISATION
                  WHERE TORGANISATION.PARENT_ID = 1
        UNION ALL
                 SELECT T.ID,
                    T.PARENT_ID,
                    T.ORGA_NAME,
                    T.CODE,
                    RT.PATH || T.PARENT_ID,
                    RT.DEPTH + 1
                   FROM TORGANISATION T
              JOIN TORGANISATION_TREE RT ON RT.ID = T.PARENT_ID
        )
 SELECT TORGANISATION_TREE.ID,
    TORGANISATION_TREE.PARENT_ID,
    TORGANISATION_TREE.ORGA_NAME,
    TORGANISATION_TREE.CODE,
    TORGANISATION_TREE.PATH,
    TORGANISATION_TREE.DEPTH
   FROM TORGANISATION_TREE
  ORDER BY TORGANISATION_TREE.ORGA_NAME, TORGANISATION_TREE.PATH;

ALTER TABLE PUBLIC.TORGANISATION_TREE_VIEW OWNER TO POSTGRES;

-- TPERSON_TREE_VIEW
DROP VIEW IF EXISTS PUBLIC.TPERSON_TREE_VIEW;
CREATE OR REPLACE VIEW PUBLIC.TPERSON_TREE_VIEW AS 
 WITH RECURSIVE TPERSON_TREE(ID, PARTY_ID, PERSONAL_ID, PATH, DEPTH) AS (
                 SELECT TPERSON.ID,
                    TPERSON.PARTY_ID,
                    TPERSON.PERSONAL_ID,
                    NULL::INTEGER[] || TPERSON.PARTY_ID,
                    1
                   FROM TPERSON
                  WHERE TPERSON.PARTY_ID = 1
        UNION ALL
                 SELECT T.ID,
                    T.PARTY_ID,
                    T.PERSONAL_ID,
                    RT.PATH || T.PARTY_ID,
                    RT.DEPTH + 1
                   FROM TPERSON T
              JOIN TPERSON_TREE RT ON RT.ID = T.PARTY_ID
        )
 SELECT TPERSON_TREE.ID,
    TPERSON_TREE.PARTY_ID,
    TPERSON_TREE.PERSONAL_ID,
    TPERSON_TREE.PATH,
    TPERSON_TREE.DEPTH
   FROM TPERSON_TREE
  ORDER BY TPERSON_TREE.PERSONAL_ID, TPERSON_TREE.PATH;

ALTER TABLE PUBLIC.TPERSON_TREE_VIEW OWNER TO POSTGRES;
END;
--PASTURE HUNTED AND ECOTOURISM
   CREATE TABLE TDHPET_LOCATION(
		ID SERIAL PRIMARY KEY,
		HABITAT_LOCATION VARCHAR(50) NOT NULL,
		MUN_ID INTEGER NOT NULL,
		SUPERINTEND_BY INTEGER NOT NULL,
		HUNTER_NO INTEGER,
		HUNTING_AREA_TYPE VARCHAR(3) NOT NULL,--PHA(Private Hunting Area),JHA(Joint Hunting Areas), SHA (Hunting Areas of Special Importance)
		THE_GEOM GEOMETRY  NOT NULL,
		AREA DOUBLE PRECISION NOT NULL,
		COMMENTS TEXT,
		CREATED_BY INTEGER NOT NULL,
		CREATED_DATE TIMESTAMP NOT NULL,
		FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID),
		FOREIGN KEY (SUPERINTEND_BY) REFERENCES TPERSON(ID),
		FOREIGN KEY (MUN_ID) REFERENCES TGIS_CADASTRAL_MUNICIPALITY (ID),
		CONSTRAINT ENFORCE_GEOTYPE_THE_GEOM CHECK (GEOMETRYTYPE(THE_GEOM) = 'POLYGON'::TEXT OR
												(GEOMETRYTYPE(THE_GEOM) = 'MULTIPOLYGON'::TEXT) OR 
												(THE_GEOM IS NULL))
	);
	CREATE TABLE TDHPET_TOURIST_PURPOSE(
		ID SERIAL PRIMARY KEY,
		NAME VARCHAR(50) NOT NULL,
		NAME_EN VARCHAR(50) NULL,
		NAME_SR VARCHAR(50) NULL,	
		NOTE TEXT,
		CREATED_BY INTEGER NOT NULL,
		CREATED_DATE TIMESTAMP NOT NULL,
		FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
	);	
	
	CREATE TABLE TDHPET_TOURIST_REGISTER(
		ID SERIAL PRIMARY KEY,
		LOCATION_ID INTEGER NOT NULL,
		START_DATE DATE NOT NULL,
		END_DATE DATE NOT NULL,
		PURPOSE_ID INTEGER NOT NULL,
		PAYMENT DOUBLE PRECISION,
		TOURIST_NUMBER INTEGER NOT NULL,
		--USED_VEHICLES VARCHAR(50),
		NOTE TEXT,
		CREATED_BY INTEGER NOT NULL,
		CREATED_DATE TIMESTAMP NOT NULL,
		FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID),
		FOREIGN KEY (PURPOSE_ID) REFERENCES TDHPET_TOURIST_PURPOSE(ID),
		FOREIGN KEY (LOCATION_ID) REFERENCES TDHPET_LOCATION(ID)
	
	 );
	CREATE TABLE TDHPET_TOURIST_ZONE_GEOMS(
		ID SERIAL PRIMARY KEY,
		LOCATION_ID INTEGER NOT NULL,
		ZONE_TYPE VARCHAR(3) NOT NULL,--TOURIST OBJECTS(TO);DANGEROUS ZONE(DZ); VISITED AREAS(VA)
		THE_GEOM GEOMETRY  NOT NULL,
		AREA DOUBLE PRECISION,
		NOTE TEXT,
		CREATED_BY INTEGER NOT NULL,
		CREATED_DATE TIMESTAMP NOT NULL,
		FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID),
		FOREIGN KEY (LOCATION_ID) REFERENCES TDHPET_LOCATION(ID)
	);	
	

	CREATE TABLE TDHPET_LOCATION_LAND_TYPE(
		ID SERIAL PRIMARY KEY,
		LOCATION_ID INTEGER NOT NULL,
		LAND_TYPE VARCHAR(2) NOT NULL, -- FL-Forest Land, AL-Agriculture Land ,WS-Water Surface
		PRIVATE_LAND_AREA DOUBLE PRECISION, 
		PUBLIC_LAND_AREA DOUBLE PRECISION,
		TOTAL_AREA DOUBLE PRECISION,
		CREATED_BY INTEGER NOT NULL,
		CREATED_DATE TIMESTAMP NOT NULL,
		FOREIGN KEY (LOCATION_ID) REFERENCES TDHPET_LOCATION(ID),
		FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
	);
	
	--TEN YEAR PLAN 
	CREATE TABLE TDHPET_PERIOD_PLAN(
		ID SERIAL PRIMARY KEY,
		LOCATION_ID INTEGER NOT NULL,
		START_YEAR INTEGER NOT NULL,
		END_YEAR INTEGER NOT NULL,
    --	CURRENT_STATUS INTEGER,
		DOC BYTEA,
		DOC_NAME VARCHAR,
		DOC_TYPE VARCHAR(10),
		REMARK TEXT,
		CREATED_BY INTEGER NOT NULL,
		CREATED_DATE TIMESTAMP NOT NULL,
		FOREIGN KEY (LOCATION_ID) REFERENCES TDHPET_LOCATION(ID),
		FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
	);
/**	CREATE TABLE TDHPET_PERIOD_PLAN_STATUS (
		ID SERIAL PRIMARY KEY,
		PERIOD_PLAN_ID INTEGER NOT NULL,
		STATUS VARCHAR(3),
		COMMENT TEXT,
		CREATED_DATE DATE NOT NULL,
		CREATED_BY INTEGER NOT NULL,
		FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
		);
		
	ALTER TABLE TDHPET_PERIOD_PLAN ADD CONSTRAINT TDHPET_PERIOD_PLAN_STATUS_ID_FKEY FOREIGN KEY (CURRENT_STATUS) REFERENCES TDHPET_PERIOD_PLAN_STATUS(ID);
    ALTER TABLE TDHPET_PERIOD_PLAN_STATUS ADD CONSTRAINT TDHPET_PERIOD_PLAN_ID_FKEY FOREIGN KEY (PERIOD_PLAN_ID) REFERENCES TDHPET_PERIOD_PLAN (ID);
**/
	
	CREATE TABLE TDHPET_ANNUAL_PLAN(
		ID SERIAL PRIMARY KEY,
		PERIOD_PLAN_ID INTEGER NOT NULL,
		YEAR INTEGER NOT NULL,
		DOC BYTEA,
		DOC_NAME VARCHAR,
		DOC_TYPE VARCHAR(10),
		REMARK TEXT,
		CREATED_BY INTEGER NOT NULL,
		CREATED_DATE TIMESTAMP NOT NULL,
		FOREIGN KEY (PERIOD_PLAN_ID) REFERENCES TDHPET_PERIOD_PLAN(ID),
		FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
	);

	
	CREATE TABLE TDHPET_WILD_ANIMALS(
		ID SERIAL PRIMARY KEY,
		NAME_LA VARCHAR(50) DEFAULT NULL,
		NAME_AL VARCHAR(50) NOT NULL,
		NAME_EN VARCHAR(50) DEFAULT NULL,
		NAME_SR VARCHAR(50) DEFAULT NULL,	
		--Hunting seasone period
		HUNT_SEASONE_START VARCHAR(5) ,--DD.MM
		HUNT_SEASONE_END VARCHAR(5) ,--DD.MM
		-- Huntiong ForBidden seasone period
		HUNT_FORBIDDEN_SEASONE_START VARCHAR(5) ,--DD.MM
		HUNT_FORBIDDEN_SEASONE_END VARCHAR(5),--DD.MM
		NOTE TEXT,
		CREATED_BY INTEGER NOT NULL,
		CREATED_DATE TIMESTAMP NOT NULL,
		FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
	);	
	

	
/**	CREATE TABLE TDHPET_ANIMAL_HUNT_SEASONE(
		ID SERIAL PRIMARY KEY,
		ANNU_PLAN_ID INTEGER NOT NULL,
		ANIMAL_ID INTEGER NOT NULL,
		START_DATE DATE  NOT NULL,
		END_DATE DATE  NOT NULL,
		GENDER VARCHAR(1),
		
		--Number of animal for hunting
		PL_ONE_YEARS_OLD  INTEGER,
		PL_TWO_YEARS_OLD  INTEGER, 
		PL_YOUNG INTEGER,
		PL_MEDIUM INTEGER,
		PL_ADULTS INTEGER,
		PL_TOTAL INTEGER,
		
		--Number of hanted animals
		IM_ONE_YEARS_OLD  INTEGER,
		IM_TWO_YEARS_OLD  INTEGER, 
		IM_YOUNG INTEGER,
		IM_MEDIUM INTEGER,
		IM_ADULTS INTEGER,
		IM_TOTAL INTEGER,
		CREATED_BY INTEGER NOT NULL,
		CREATED_DATE TIMESTAMP NOT NULL,
		
		FOREIGN KEY (ANNU_PLAN_ID) REFERENCES TDHPET_ANNUAL_PLAN(ID),
		FOREIGN KEY (ANIMAL_ID) REFERENCES TDHPET_WILD_ANIMALS(ID),
		FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
	);
	
**/


CREATE TABLE TDHPET_WILD_ANIMALS_REQUEST(
    ID SERIAL PRIMARY KEY,
    ANIMAL_ID INTEGER NOT NULL,
	REQUEST_FOR VARCHAR(2) NOT NULL,
	MAX_POINT DOUBLE PRECISION NOT NULL,
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	NOTE TEXT ,
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID),
	FOREIGN KEY (ANIMAL_ID) REFERENCES TDHPET_WILD_ANIMALS(ID)
);

CREATE TABLE TDHPET_ANIMAL_LOCATION(
	ID SERIAL PRIMARY KEY,
	ANNU_PLAN_ID INTEGER NOT NULL,
	ANIMAL_ID INTEGER NOT NULL,
	QUANTITY INTEGER NOT NULL,
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID),
	FOREIGN KEY (ANNU_PLAN_ID) REFERENCES TDHPET_ANNUAL_PLAN(ID),
	FOREIGN KEY (ANIMAL_ID) REFERENCES TDHPET_WILD_ANIMALS(ID)
);

CREATE TABLE TDHPET_ANIMAL_LOCATION_DETAIL(
	ID SERIAL PRIMARY KEY,
	ANIMAL_LOCATION_ID INTEGER NOT NULL,
	GENDER VARCHAR(1) NOT NULL,
	AGE_TYPE VARCHAR(3) NOT NULL,
	QUANTITY INTEGER NOT NULL,
	NOTE TEXT,
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID),
	FOREIGN KEY (ANIMAL_LOCATION_ID) REFERENCES TDHPET_ANIMAL_LOCATION(ID)
	
);


--HUNTING GROUND EVALUATION (TOR 6.23 NEEDS)
CREATE TABLE TDHPET_HUNT_GROUND_EVAL(
	ID SERIAL PRIMARY KEY,
	ANIMAL_LOCATION_ID  INTEGER NOT NULL,
	ANIMAL_REQUEST_ID INTEGER NOT NULL,
	DEFINED_POINT INTEGER,
	NOTE TEXT,
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	FOREIGN KEY (ANIMAL_LOCATION_ID) REFERENCES TDHPET_ANIMAL_LOCATION(ID),
	FOREIGN KEY (ANIMAL_REQUEST_ID) REFERENCES TDHPET_WILD_ANIMALS_REQUEST(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)

);

CREATE TABLE TDHPET_ANIMAL_CAPACITY(
	ID SERIAL PRIMARY KEY,
	ANIMAL_LOCATION_ID INTEGER NOT NULL,
	USE_OF_LAND VARCHAR(2) NOT NULL ,
	AREA DOUBLE  PRECISION NOT NULL,
	PERCENTAGE DOUBLE PRECISION NOT NULL,
	GEOM GEOMETRY,
	NOTE TEXT,
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID),
	FOREIGN KEY (ANIMAL_LOCATION_ID) REFERENCES TDHPET_ANIMAL_LOCATION(ID)   
);

--tracking hunted animals
CREATE TABLE TDHPET_HUNTED_ANIMALS(
	ID SERIAL PRIMARY KEY,
	ANNU_PLAN_ID INTEGER NOT NULL, 
	ANIMAL_ID  INTEGER NOT NULL,
	DATE DATE NOT NULL,
	ANIMALS_NUMBER INTEGER NOT NULL,
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID),
	FOREIGN KEY (ANNU_PLAN_ID) REFERENCES TDHPET_ANNUAL_PLAN(ID),
	FOREIGN KEY (ANIMAL_ID) REFERENCES TDHPET_WILD_ANIMALS(ID)
);

CREATE TABLE TDHPET_HUNTED_ANIMAL_DETAIL(
	ID SERIAL PRIMARY KEY,
	HUNTED_ANIMAL_ID INTEGER NOT NULL,
	GENDER VARCHAR(1) NOT NULL CHECK (GENDER IN ('M', 'F')),
	AGE INTEGER,
	WEIGHT DOUBLE PRECISION,
	DEATH_CAUSE VARCHAR(3) NOT NULL,
	ANIMALS_NUMBER INTEGER NOT NULL,
	NOTES TEXT,
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID),
	FOREIGN KEY (HUNTED_ANIMAL_ID) REFERENCES TDHPET_HUNTED_ANIMALS(ID)
);

-- TDHPET_ACTIVITY_MANAGEMENT need more analise, i didn't understand table in For Sharing with bidders/App5_additional information on Monitoring_alb.doc
CREATE TABLE TDHPET_ACTIVITY_MANAGEMENT(
	ID SERIAL PRIMARY KEY,
	ANIMAL_ID  INTEGER NOT NULL,
	THE_PURPOSE_OF_HUNTING VARCHAR(100),
	OBJECTIVE VARCHAR(250),
	METHOD_OF_PROPAGATION VARCHAR(100),
	SEX_RATIOS_MA SMALLINT,
	SEX_RATIOS_FM SMALLINT,
	SMALL_UP_TO_1 DOUBLE PRECISION,
	YOUNG_2_3_4 DOUBLE PRECISION,
	MEDIUM_5_6_7_8 DOUBLE PRECISION,
	AGING_9_AND_MORE DOUBLE PRECISION,
	PROD_AREA_FOR_HUNT_ID INTEGER,
	QUALITY_OF_LOCATION VARCHAR(20),
	NUMBER_OF_ANIMALS_100HA INTEGER,
	MAIN_STOCK INTEGER,
	RATE_OF_GROWTH DOUBLE PRECISION,
	GROWTH INTEGER,
	NORMAL_STOCK INTEGER,
	HUNTING_SEASON VARCHAR(2),
	ANULA_DECLINE INTEGER,
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	FOREIGN KEY (ANIMAL_ID) REFERENCES TDHPET_WILD_ANIMALS(ID),
	FOREIGN KEY (PROD_AREA_FOR_HUNT_ID) REFERENCES TDHPET_LOCATION(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)	
);
--PASTURE HUNTED AND ECOTOURISM

/*
Qka eshte puna ketu? dy tabela me emra te njejt?
CREATE TABLE TDHPET_ACTIVITY_MANAGEMENT(
	ID SERIAL PRIMARY KEY,
	DATE DATE NOT NULL,
	SPECIES_ID INTEGER NOT NULL,
	QUANTITY INTEGER NOT NULL,
	GENDER VARCHAR(1) NOT NULL CHECK (GENDER IN ('M', 'F')),
	AGE INTEGER,
	WEIGHT DOUBLE PRECISION,
	CAUSE_OF_DEATH VARCHAR(2),
	FOREIGN KEY (SPECIES_ID) REFERENCES TDHPET_WILD_ANIMALS(ID)
);
*/

CREATE TABLE TPRCMT_TENDER_BIDDER (
	ID SERIAL PRIMARY KEY,
	COMPANY_NAME CHARACTER VARYING(100) NOT NULL,
	FISCAL_NUMBER CHARACTER VARYING(50) NOT NULL,
	BUSINESS_NUMBER VARCHAR(50) NOT NULL,
	ADDRESS VARCHAR(255),
	
	CONTACT_PHONE CHARACTER VARYING(20),
	E_MAIL CHARACTER VARYING(50),
	CONTACT_PERSON CHARACTER VARYING(50),
	CONTRACTOR BOOLEAN,
	
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	COMMENTS TEXT,
	
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)

);

CREATE TABLE TPRCMT_TENDER_REQUEST (
	ID SERIAL PRIMARY KEY,
	DECLARE_OF_NEEDS TEXT NOT NULL,
	DESIGNATION_OF_REQUEST VARCHAR(50) NOT NULL,--TENDER REQUEST NAME 
	
	ORGANISATION_ID INTEGER NOT NULL,
	
	ANNUAL_PLAN BOOLEAN,
	PPRC_NOTIFICATION BOOLEAN,
	CURRENT_STATUS INTEGER,

	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,	
	
	FOREIGN KEY (ORGANISATION_ID) REFERENCES TORGANISATION(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
);

CREATE TABLE TPRCMT_TENDER_BID(
	ID SERIAL PRIMARY KEY,
	TENDER_REQUEST_ID INTEGER NOT NULL,
	BIDDER_ID INTEGER NOT NULL,
	SELECTED BOOLEAN NOT NULL DEFAULT FALSE,
	SELECTED_DATE TIMESTAMP, --set date when selected is true
	BID_VALUE DOUBLE PRECISION NOT NULL,
	
	DOC_TYPE VARCHAR(100), 
	DOC_NAME VARCHAR(100), 
	DOC BYTEA,

	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	
	NOTE TEXT,
	
	FOREIGN KEY (TENDER_REQUEST_ID) REFERENCES TPRCMT_TENDER_REQUEST(ID),
	FOREIGN KEY (BIDDER_ID) REFERENCES TPRCMT_TENDER_BIDDER(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
);

CREATE TABLE TPRCMT_TENDER_STATUS (
	ID SERIAL PRIMARY KEY,
	TENDER_REQUEST_ID INTEGER NOT NULL,
	STATUS VARCHAR(3),
	COMMENT TEXT,
	CREATED_DATE DATE NOT NULL,
	CREATED_BY INTEGER NOT NULL,
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
	
);

ALTER TABLE TPRCMT_TENDER_REQUEST ADD CONSTRAINT TW_TENDER_STATUS_ID_FKEY FOREIGN KEY (CURRENT_STATUS) REFERENCES TPRCMT_TENDER_STATUS (ID);
ALTER TABLE TPRCMT_TENDER_STATUS ADD CONSTRAINT TW_TENDER_REQUEST_ID_FKEY FOREIGN KEY (TENDER_REQUEST_ID) REFERENCES TPRCMT_TENDER_REQUEST (ID);


CREATE TABLE TPRCMT_TENDER_STATUS_DOC(
	ID SERIAL PRIMARY KEY,
	STATUS_ID INTEGER NOT NULL,
	
	DOC_TYPE VARCHAR(100) NOT NULL, 
	DOC_NAME VARCHAR(100) NOT NULL, 
	DOC BYTEA NOT NULL,
	COMMENT TEXT,
	
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID),
	FOREIGN KEY (STATUS_ID) REFERENCES TPRCMT_TENDER_STATUS(ID)
);


CREATE TABLE TPRCMT_DOSSIER_REQUEST (
	ID SERIAL PRIMARY KEY,
	TENDER_ID INTEGER NOT NULL,
	BIDDER_ID INTEGER NOT NULL,
	SENT BOOLEAN,
	SENT_DATE TIMESTAMP,
	NOTE TEXT,
	
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,	
	
	FOREIGN KEY (TENDER_ID) REFERENCES TPRCMT_TENDER_REQUEST(ID),
	FOREIGN KEY (BIDDER_ID) REFERENCES TPRCMT_TENDER_BIDDER(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
);

CREATE TABLE TPRCMT_DOSSIER_QUESTION (
	ID SERIAL PRIMARY KEY,
	DOSSIER_REQUEST_ID INTEGER NOT NULL,
	QUESTION TEXT NOT NULL,

	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	
	FOREIGN KEY (DOSSIER_REQUEST_ID) REFERENCES TPRCMT_DOSSIER_REQUEST(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
);

CREATE TABLE TPRCMT_TENDER_COMPLAINT (
	ID SERIAL PRIMARY KEY,
	TENDER_BID_ID INTEGER NOT NULL,
	COMPLAINT TEXT NOT NULL,
	
	DOC_TYPE VARCHAR(100) NOT NULL, 
	DOC_NAME VARCHAR(100) NOT NULL, 
	DOC BYTEA NOT NULL,

	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	
	FOREIGN KEY (TENDER_BID_ID) REFERENCES TPRCMT_TENDER_BID(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
);


-- DROP VIEW tree_json;

CREATE OR REPLACE VIEW tree_json AS 
 WITH RECURSIVE c AS (
                 SELECT tfrm_activity_domain.id, tfrm_activity_domain.parent_id, 
                    tfrm_activity_domain.code, tfrm_activity_domain.name_al, 
                    tfrm_activity_domain.name_en, tfrm_activity_domain.name_sr, 
                    tfrm_activity_domain.type, tfrm_activity_domain.sort, 
                    0 AS lvl
                   FROM tfrm_activity_domain
                  WHERE tfrm_activity_domain.id = 1 AND tfrm_activity_domain.parent_id IS NULL
        UNION ALL 
                 SELECT tfrm_activity_domain.id, tfrm_activity_domain.parent_id, 
                    tfrm_activity_domain.code, tfrm_activity_domain.name_al, 
                    tfrm_activity_domain.name_en, tfrm_activity_domain.name_sr, 
                    tfrm_activity_domain.type, tfrm_activity_domain.sort, 
                    c.lvl + 1 AS lvl
                   FROM tfrm_activity_domain
              JOIN c ON tfrm_activity_domain.parent_id = c.id
        ), maxlvl AS (
         SELECT max(c.lvl) AS maxlvl
           FROM c
        ), j AS (
                 SELECT c.id AS key, c.parent_id, c.code, c.name_al AS title, 
                    c.name_en, c.name_sr, c.type, c.sort, c.lvl, 
                    '[]'::json AS children
                   FROM c, maxlvl
                  WHERE c.lvl = maxlvl.maxlvl
        UNION ALL 
                 SELECT (v.c).id AS id, (v.c).parent_id AS parent_id, 
                    (v.c).code AS code, (v.c).name_al AS name_al, 
                    (v.c).name_en AS name_en, (v.c).name_sr AS name_sr, 
                    (v.c).type AS type, (v.c).sort AS sort, (v.c).lvl AS lvl, 
                    array_to_json(array_agg(v.j)) AS children
                   FROM ( SELECT c.*::record AS c, j.*::record AS j
                           FROM j
                      JOIN c ON j.parent_id = c.id) v
                  GROUP BY v.c
        )
 SELECT j.key, j.code, row_to_json(j.*)::text AS json_tree
   FROM j;


-- DROP VIEW v_annual_planning_activity;

CREATE OR REPLACE VIEW v_annual_planning_activity AS 
 SELECT pl.id AS plan_id, act.id AS activity_id, act.activity_domain_id, 
    stat.status AS annu_status, mun.id AS mun_id, mun.region_id, pl.year
   FROM tfrm_activity act
   LEFT JOIN tfrm_annual_planning pl ON pl.id = act.annual_planning_id
   LEFT JOIN tfrm_annual_planning_status stat ON stat.id = pl.status_id
   LEFT JOIN tgis_cadastral_municipality mun ON pl.mun_id = mun.id;

ALTER TABLE v_annual_planning_activity
  OWNER TO postgres;
  
  -- View: v_activity_domain_order_path

-- DROP VIEW v_activity_domain_order_path;

CREATE OR REPLACE VIEW v_activity_domain_order_path AS 
 WITH RECURSIVE tree AS (
                 SELECT tfrm_activity_domain.id, tfrm_activity_domain.parent_id, 
                    tfrm_activity_domain.code, tfrm_activity_domain.name_al, 
                    tfrm_activity_domain.name_en, tfrm_activity_domain.name_sr, 
                    tfrm_activity_domain.type, tfrm_activity_domain.sort, 
                    NULL::integer[] || tfrm_activity_domain.parent_id AS path, 
                    NULL::character varying[] || tfrm_activity_domain.code AS pathcode, 
                    1 AS depth
                   FROM tfrm_activity_domain
                  WHERE tfrm_activity_domain.parent_id = 1
        UNION ALL 
                 SELECT t.id, t.parent_id, t.code, t.name_al, t.name_en, 
                    t.name_sr, t.type, t.sort, rt.path || t.parent_id, 
                    rt.pathcode || t.code, rt.depth + 1
                   FROM tfrm_activity_domain t
              JOIN tree rt ON rt.id = t.parent_id
        )
 SELECT tree.id, tree.parent_id, tree.code, tree.name_al, tree.name_en, 
    tree.name_sr, tree.type, tree.sort, tree.path, tree.depth, tree.pathcode, 
    ((tree.path::text || tree.id) || ', '::text) || tree.sort::text AS text
   FROM tree
  ORDER BY (tree.path || tree.sort::integer)::text;

ALTER TABLE v_activity_domain_order_path
  OWNER TO postgres;


/*---private forest */
/*
CREATE TABLE TFRM_PRIVATE_REQUEST (
	ID SERIAL PRIMARY KEY,
	ACTIVITY_ID BIGINT NOT NULL,
	STATUS_ID BIGINT NOT NULL,
	MUN_ID INTEGER NOT NULL,
	
	REQUEST_NO VARCHAR(30) NOT NULL, -- EX: 2/2014 ,  EXPLAIN: 2=SERIAL || / || 2014=YEAR 
	REQUEST_DATE TIMESTAMP NOT NULL,
 	PERSON VARCHAR(100) NOT NULL,
	PERSON_ADDRESS VARCHAR (100) NOT NULL,
	CAD_ZONE_ID INTEGER NOT NULL,
	PARCEL_NO VARCHAR(100) NOT NULL,
	PARCEL_AREA DOUBLE PRECISION NOT NULL,
	PLACE_NAME VARCHAR (100), 
	CAD_CERT_NO VARCHAR(50), 
	COPY_PLAN_NO VARCHAR(20),
	
	REMARKS TEXT,
	WORK_STAGE CHAR(1) NOT NULL DEFAULT 'P', -- P=Planning, I=Implementation

	--PLANNED
	PL_TECH_VOLUME DOUBLE PRECISION, 
	PL_FIRE_VOLUME DOUBLE PRECISION, 
	PL_CREATED_DATE TIMESTAMP,
	PL_CREATED_BY INTEGER,

	--MARKING
	MARKING_TOOL VARCHAR(20),
	RECEIVER_PERSON VARCHAR(50),
	AUTH_PERSON_ID INTEGER, 
	MARKING_DATE TIMESTAMP,
	
	--APPROVED
	AP_TECH_VOLUME DOUBLE PRECISION, 
	AP_FIRE_VOLUME DOUBLE PRECISION,
	AP_CREATED_DATE TIMESTAMP,
	AP_CREATED_BY INTEGER,
	
	PAYMENT BOOLEAN  DEFAULT FALSE,
	PAYMENT_VALUE DOUBLE PRECISION,
	
	TRANSPORT_DOC BOOLEAN DEFAULT FALSE,
	
	FOREIGN KEY (PL_CREATED_BY) REFERENCES THRM_EMPLOYEE(ID),
	FOREIGN KEY (AP_CREATED_BY) REFERENCES THRM_EMPLOYEE(ID),
	FOREIGN KEY (MUN_ID) REFERENCES TGIS_CADASTRAL_MUNICIPALITY(ID),
	FOREIGN KEY (CAD_ZONE_ID) REFERENCES TGIS_CADASTRAL_ZONE(ID),
	FOREIGN KEY (ACTIVITY_ID) REFERENCES TFRM_ACTIVITY(ID),
	FOREIGN KEY (STATUS_ID) REFERENCES TFRM_ACTIVITY_STATUS(ID),
	FOREIGN KEY (AUTH_PERSON_ID) REFERENCES THRM_EMPLOYEE(ID)
	
);
*/

  CREATE TABLE TGIS_PARCELGEOM
(
  ID INTEGER PRIMARY KEY,
  PARCELID INTEGER,
  CADPARCELID CHARACTER VARYING,
  CADASTREZONEID INTEGER,
  AREA DOUBLE PRECISION,
  MU INTEGER,
  OW SMALLINT,
  OLD_PARC CHARACTER VARYING(25),
  GEOM GEOMETRY
);

CREATE TABLE TPARCEL_OWNER
(
  ID BIGINT PRIMARY KEY,
  CADPOSSLIST CHARACTER VARYING(20),
  CADZONE INTEGER,
  OWNERID CHARACTER VARYING(15),
  OWNER_UP CHARACTER VARYING(150),
  LIVINGPLACE CHARACTER VARYING(255),
  STREET CHARACTER VARYING(150),
  HOUSENR CHARACTER VARYING(4),
  PARTSN CHARACTER VARYING,
  PERS_STAT CHARACTER VARYING(250),
  PC SMALLINT
);

CREATE TABLE TPARCEL_DETAIL
(
  ID BIGINT PRIMARY KEY,
  PARC_GEOM_ID INTEGER,
  OLD_PARCEL_ID INTEGER,
  CADPOSSLIST CHARACTER VARYING(20),
  CADPARCELID CHARACTER VARYING(25),
  CADZONE INTEGER,
  PARCELNR INTEGER,
  SUBPARCELNR SMALLINT,
  PLACENAME CHARACTER VARYING(150),
  CULTURE SMALLINT,
  CULTURENAME CHARACTER VARYING,
  CLAS SMALLINT,
  AREA INTEGER,
  PROPERYTYPE SMALLINT,
  FORESTC INTEGER,
  MU SMALLINT,
  OW SMALLINT,
  OWNER_ID INTEGER,
  OLD_PARC CHARACTER VARYING(25),
  FOREIGN KEY (PARC_GEOM_ID) REFERENCES TGIS_PARCELGEOM(ID),
  FOREIGN KEY (OLD_PARCEL_ID) REFERENCES TGIS_PARCELGEOM(ID),
  FOREIGN KEY (OWNER_ID) REFERENCES TPARCEL_OWNER(ID)
  
);
  
  
CREATE TABLE TFRM_PRIVATE_REQUEST (
	ID SERIAL PRIMARY KEY,
	ACTIVITY_ID BIGINT NOT NULL,
	STATUS_ID BIGINT NOT NULL,
	MUN_ID INTEGER NOT NULL,
	REQUESTER_ID INTEGER NOT NULL,
	
	REQUEST_NO VARCHAR(30) NOT NULL, -- EX: 2/2014 ,  EXPLAIN: 2=SERIAL / 2014=CURRENT YEAR 
	REQUEST_DATE TIMESTAMP NOT NULL,
	
	CAD_ZONE_ID INTEGER NOT NULL,
--	PARCEL_NO VARCHAR(100) NOT NULL,
--  PARCEL_AREA DOUBLE PRECISION NOT NULL,
--	PLACE_NAME VARCHAR (100), 
	PARCEL_DETAIL_ID BIGINT,
	CAD_CERT_NO VARCHAR(50), 
	COPY_PLAN_NO VARCHAR(20),
	
	REMARKS TEXT,
	WORK_STAGE CHAR(1) NOT NULL DEFAULT 'P', -- P=Planning, I=Implementation

	--PLANNED
	PL_TECH_VOLUME DOUBLE PRECISION, 
	PL_FIRE_VOLUME DOUBLE PRECISION, 
	PL_CREATED_DATE TIMESTAMP,
	PL_CREATED_BY INTEGER,

	--ALLOWED VOLUME BY MUN OFFICER
	ALW_TECH_VOLUME DOUBLE PRECISION, 
	ALW_FIRE_VOLUME DOUBLE PRECISION, 
	ALW_CREATED_DATE TIMESTAMP,
	ALW_CREATED_BY INTEGER,
	
	--MARKING
	MARKING_TOOL VARCHAR(20),
	RECEIVER_PERSON VARCHAR(50),
	AUTH_PERSON_ID INTEGER, 
	MARKING_DATE TIMESTAMP,
	
	--APPROVED
	AP_TECH_VOLUME DOUBLE PRECISION, 
	AP_FIRE_VOLUME DOUBLE PRECISION,
	AP_CREATED_DATE TIMESTAMP,
	AP_CREATED_BY INTEGER,
	
	PAYMENT BOOLEAN  DEFAULT FALSE,
	PAYMENT_VALUE DOUBLE PRECISION,
	
	TRANSPORTED BOOLEAN DEFAULT FALSE,

	FOREIGN KEY (REQUESTER_ID) REFERENCES TPERSON(ID),
	FOREIGN KEY (PL_CREATED_BY) REFERENCES TPERSON(ID),
	FOREIGN KEY (AP_CREATED_BY) REFERENCES THRM_EMPLOYEE(ID),
	FOREIGN KEY (AUTH_PERSON_ID) REFERENCES THRM_EMPLOYEE(ID),
	FOREIGN KEY (ALW_CREATED_BY) REFERENCES THRM_EMPLOYEE(ID),
 
	FOREIGN KEY (ACTIVITY_ID) REFERENCES TFRM_ACTIVITY(ID),
	FOREIGN KEY (STATUS_ID) REFERENCES TFRM_ACTIVITY_STATUS(ID),
	FOREIGN KEY (MUN_ID) REFERENCES TGIS_CADASTRAL_MUNICIPALITY(ID),
	FOREIGN KEY (CAD_ZONE_ID) REFERENCES TGIS_CADASTRAL_ZONE(ID),
	FOREIGN KEY (PARCEL_DETAIL_ID) REFERENCES TPARCEL_DETAIL(ID)
	
);



/**
 * To ask if they have defined type of request documents to register in textdomain
 * 
 * **/
CREATE TABLE TFRM_PRIVATE_REQUEST_DOC(
	ID BIGSERIAL PRIMARY KEY,
	REQUEST_ID BIGINT NOT NULL,
	
	DOC_TYPE VARCHAR(100) NOT NULL, 
	DOC_NAME VARCHAR(100) NOT NULL, 
	DOC_SIZE BIGINT NOT NULL,
	DOC BYTEA NOT NULL,
	
	NOTE TEXT,
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL DEFAULT NOW(),

	FOREIGN KEY (CREATED_BY) REFERENCES TPARTY (ID),
	FOREIGN KEY (REQUEST_ID) REFERENCES TFRM_PRIVATE_REQUEST(ID)
);

/*
CREATE FUNCTION TFRM_PRIVATE_REQUEST_NO() RETURNS trigger AS $TFRM_PRIVATE_REQUEST_NO$
    BEGIN
	IF(TG_OP = 'INSERT') THEN
	    	
            --INSERT INTO emp_audit SELECT 'I', now(), user, NEW.*;
            --RETURN NEW;
        END IF;

    
        -- Check that empname and salary are given
        IF NEW.empname IS NULL THEN
            RAISE EXCEPTION 'empname cannot be null';
        END IF;
        IF NEW.salary IS NULL THEN
            RAISE EXCEPTION '% cannot have null salary', NEW.empname;
        END IF;

        -- Who works for us when she must pay for it?
        IF NEW.salary < 0 THEN
            RAISE EXCEPTION '% cannot have a negative salary', NEW.empname;
        END IF;

        -- Remember who changed the payroll when
        NEW.last_date := current_timestamp;
        NEW.last_user := current_user;
        
        RETURN NEW;
    END;
$TFRM_PRIVATE_REQUEST_NO$ LANGUAGE plpgsql;

CREATE TRIGGER TFRM_PRIVATE_REQUEST_NO BEFORE INSERT OR UPDATE ON TFRM_PRIVATE_REQUEST
    FOR EACH ROW EXECUTE PROCEDURE TFRM_PRIVATE_REQUEST_NO();
*/
    
CREATE TABLE TFRM_PRIVATE_REQUEST_IMPL (
	ID SERIAL PRIMARY KEY,
	REQUEST_ID INTEGER NOT NULL,
	TREE_SPECIES_ID INTEGER NOT NULL,
	DIAMETER_1_3  DOUBLE PRECISION NOT NULL,
	FACTOR DOUBLE PRECISION NOT NULL,
	HEIGHT DOUBLE PRECISION NOT NULL,
	TECH_VOLUME DOUBLE PRECISION, 
	FIRE_VOLUME DOUBLE PRECISION,
	PULP_VOLUME DOUBLE PRECISION,
	VOLUME_TOTAL DOUBLE PRECISION,
	REMARKS VARCHAR(255),
	
	CREATED_DATE TIMESTAMP,
	CREATED_BY INTEGER,
	
	FOREIGN KEY (REQUEST_ID) REFERENCES TFRM_PRIVATE_REQUEST(ID),
	FOREIGN KEY (TREE_SPECIES_ID) REFERENCES TFRM_TREE_SPECIES(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
	
);	

--Get children organisations of another organisation
CREATE OR REPLACE FUNCTION get_all_children_array(use_parent INT4) RETURNS INT4[] AS $$
DECLARE
    process_parents INT4[] := ARRAY[ use_parent ];
    children INT4[] := '{}';
    new_children INT4[];
BEGIN
    WHILE ( array_upper( process_parents, 1 ) IS NOT NULL ) LOOP
        new_children := ARRAY( SELECT id FROM torganisation WHERE parent_id = ANY( process_parents ) AND id <> ALL( children ) );
        children := children || new_children;
        process_parents := new_children;
    END LOOP;
    RETURN children;
END;
$$ LANGUAGE plpgsql;

/*
Tables
-------------------------------
tprotocol_doc
tprotocol_doc_attach
tprotocol_doc_status

tmaterial_request
tmaterial_request_item
tmaterial_request_status
tmaterial_order
tmaterial_order_item

-------------------------------
Die Bestellanforderung

TREQUISTION
TREQUISTION_ITEM
TREQUISTION_STATUS
TREQUISTION_ACCOUNT

TPURCHASE_ORDER
TPURCHASE_ORDER_ITEM
TPURCHASE_ORDER_STATUS
TPURCHASE_SHIP_ADDRESS
TPURCHASE_VENDOR --Lieferant
TPURCHASE_VENDOR_ADDRESS --Lieferant

*/

--EXECUTIVE OFFICE
CREATE TABLE TMANAGMENT_PROTOCOL_DOC (
	ID SERIAL PRIMARY KEY NOT NULL,
	DEPARTMENT_ID INTEGER NOT NULL,
	PROTOCOL_NO VARCHAR(50) UNIQUE NOT NULL,

	DOC_TYPE VARCHAR(100) NOT NULL, 
	DOC_NAME VARCHAR(100) NOT NULL, 
	DOC_SIZE BIGINT NOT NULL,
	DOC BYTEA NOT NULL,
		
	STATUS VARCHAR(50),
	ACTION_TAKEN VARCHAR(50),
	CREATED_BY  INTEGER NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	NOTE TEXT,
	
	FOREIGN KEY (DEPARTMENT_ID) REFERENCES TPARTY(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES TPARTY(ID)
);


/* start: old please remove*/
DROP TABLE IF EXISTS TPROTOCOL_DOC_SETTINGS CASCADE;
DROP TABLE IF EXISTS TPROTOCOL_DOC CASCADE;
DROP TABLE IF EXISTS TPROTOCOL_DOC_STATUS CASCADE;
DROP TABLE IF EXISTS TPROTOCOL_DOC_ATTACH CASCADE;
DROP TABLE IF EXISTS TVENDOR CASCADE;
DROP TABLE IF EXISTS TVENDOR_ADDRESS CASCADE;
/* end: old please remove*/

DROP TABLE IF EXISTS TREQUISITION CASCADE;
DROP TABLE IF EXISTS TREQUISITION_ITEM CASCADE;
DROP TABLE IF EXISTS TREQUISITION_STATUS CASCADE;
DROP TABLE IF EXISTS TREQUISITION_ACCOUNT CASCADE;
DROP TABLE IF EXISTS TPURCHASE_ORDER CASCADE;
DROP TABLE IF EXISTS TPURCHASE_ORDER_ITEM CASCADE;
DROP TABLE IF EXISTS TPURCHASE_ORDER_STATUS CASCADE;

DROP TABLE IF EXISTS TDP_MNGMT_SETTINGS CASCADE;
DROP TABLE IF EXISTS TDP_MNGMT CASCADE;
DROP TABLE IF EXISTS TDP_MNGMT_STATUS CASCADE;
DROP TABLE IF EXISTS TDP_MNGMT_ATTACH CASCADE;

DROP TABLE IF EXISTS TBPARTNER_LOCATION CASCADE;
DROP TABLE IF EXISTS TLOCATION CASCADE;
DROP TABLE IF EXISTS TBPARTNER CASCADE;
DROP TABLE IF EXISTS TDOC_CATEGORY CASCADE;
DROP TABLE IF EXISTS TDOCTYPE CASCADE;
DROP TABLE IF EXISTS TCURRENCY CASCADE;

CREATE TABLE TCURRENCY
(
  ID SERIAL PRIMARY KEY NOT NULL,
  ISACTIVE CHARACTER(1) NOT NULL DEFAULT 'Y'::BPCHAR,
  CREATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
  CREATEDBY integer NOT NULL,
  UPDATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
  UPDATEDBY integer NOT NULL,
  ISO_CODE CHARACTER(3) NOT NULL,
  CURSYMBOL CHARACTER VARYING(10), -- --OBTG:NVARCHAR--
  DESCRIPTION CHARACTER VARYING(255) NOT NULL, -- --OBTG:NVARCHAR--
  STDPRECISION NUMERIC(10,0) NOT NULL,
  COSTINGPRECISION NUMERIC(10,0) NOT NULL,
  PRICEPRECISION NUMERIC(10,0) NOT NULL DEFAULT 0,
  ISSYMBOLRIGHTSIDE CHARACTER(1) DEFAULT 'N'::BPCHAR,
  
  CONSTRAINT TCURRENCY_ISOCODE UNIQUE (ISO_CODE),
  CONSTRAINT TCURRENCY_ISACTIVE_CHECK CHECK (ISACTIVE = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR])),

  FOREIGN KEY (CREATEDBY) REFERENCES TPERSON(ID),
  FOREIGN KEY (UPDATEDBY) REFERENCES TPERSON(ID)
)
WITH (
  OIDS=FALSE
);

CREATE TABLE TDP_MNGMT_SETTINGS (
 ID SERIAL PRIMARY KEY,
 TITLE VARCHAR(50) NOT NULL,
 DATA_DIR VARCHAR(255) NOT NULL,
 
 CREATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
 CREATEDBY integer NOT NULL,
 UPDATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
 UPDATEDBY integer NOT NULL,
 
 FOREIGN KEY (CREATEDBY) REFERENCES TPERSON(ID),
 FOREIGN KEY (UPDATEDBY) REFERENCES TPERSON(ID)
 
);

CREATE TABLE TDOC_CATEGORY
(
  ID SERIAL PRIMARY KEY NOT NULL,
  ISACTIVE CHARACTER(1) NOT NULL DEFAULT 'Y'::BPCHAR,
  --ORG_ID INTEGER NOT NULL,
  CREATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
  CREATEDBY INTEGER NOT NULL,
  UPDATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
  UPDATEDBY INTEGER NOT NULL,
  NAME CHARACTER VARYING(60) NOT NULL, -- --OBTG:NVARCHAR--
  NAME_EN CHARACTER VARYING(60) NOT NULL, 
  NAME_SR CHARACTER VARYING(60), 
  DESCRIPTION CHARACTER VARYING(255), -- --OBTG:NVARCHAR--
  CATEGORYTYPE CHARACTER VARYING(60) NOT NULL,
  ISDEFAULT CHARACTER(1) NOT NULL DEFAULT 'N'::BPCHAR,
  DOCBASETYPE CHARACTER VARYING(60),
  
  /*CONSTRAINT TDOC_CATEGORY_NAME UNIQUE (ORG_ID, NAME),
  CONSTRAINT TDOC_CATEGORY_ORG_ID FOREIGN KEY (ORG_ID)
      REFERENCES TORGANISATION (ID) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,*/
  
  CONSTRAINT TDOC_CATEGORY_ISACTIVE_CHECK CHECK (ISACTIVE = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR])),
  FOREIGN KEY (CREATEDBY) REFERENCES TPERSON(ID),
  FOREIGN KEY (UPDATEDBY) REFERENCES TPERSON(ID)
)
WITH (
  OIDS=FALSE
);

CREATE TABLE TDOCTYPE
(
  ID SERIAL PRIMARY KEY NOT NULL,
  --ORG_ID INTEGER NOT NULL,
  CATEGORY_ID INTEGER NOT NULL,
  ISACTIVE CHARACTER(1) NOT NULL DEFAULT 'Y'::BPCHAR,
  CREATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
  CREATEDBY INTEGER NOT NULL,
  UPDATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
  UPDATEDBY INTEGER NOT NULL,
  NAME CHARACTER VARYING(60) NOT NULL, -- --OBTG:NVARCHAR--
  NAME_EN CHARACTER VARYING(60) NOT NULL, 
  NAME_SR CHARACTER VARYING(60), 
  PRINTNAME CHARACTER VARYING(60) NOT NULL, -- --OBTG:NVARCHAR--
  PRINTNAME_EN CHARACTER VARYING(60) NOT NULL, 
  PRINTNAME_SR CHARACTER VARYING(60), 
  DESCRIPTION CHARACTER VARYING(255), -- --OBTG:NVARCHAR--
  DOCBASETYPE CHARACTER VARYING(60) NOT NULL,
  ISSOTRX CHARACTER(1) NOT NULL DEFAULT 'Y'::BPCHAR,
  ISDOCNOCONTROLLED CHARACTER(1) NOT NULL DEFAULT 'Y'::BPCHAR,
  DOCUMENTNOTE CHARACTER VARYING(2000), -- --OBTG:NVARCHAR--

  CONSTRAINT TDOCTYPE_CATEGORY_ID FOREIGN KEY (CATEGORY_ID)
      REFERENCES TDOC_CATEGORY (ID) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,  

  CONSTRAINT TDOCTYPE_ISACTIVE_CHECK CHECK (ISACTIVE = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR])),
  CONSTRAINT TDOCTYPE_ISDOCNOCONTROLLE_CHK CHECK (ISDOCNOCONTROLLED = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR])),

  FOREIGN KEY (CREATEDBY) REFERENCES TPERSON(ID),
  FOREIGN KEY (UPDATEDBY) REFERENCES TPERSON(ID)
)
WITH (
  OIDS=FALSE
);

/* DOC PROCOCOL MANAGEMENT */
CREATE TABLE TDP_MNGMT
(
  ID SERIAL PRIMARY KEY NOT NULL,
  DEPARTMENT_ID INTEGER,
  ISACTIVE CHARACTER(1) NOT NULL DEFAULT 'Y'::BPCHAR,
  CHANNEL_TYPE CHARACTER(1) NOT NULL DEFAULT 'I'::BPCHAR,
  CREATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
  CREATEDBY INTEGER NOT NULL,
  UPDATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
  UPDATEDBY INTEGER NOT NULL,
  DOCUMENTNO CHARACTER VARYING(36) NOT NULL, 
  DOC_SUBJECT varchar(255) NOT NULL,
  DATETRX TIMESTAMP WITHOUT TIME ZONE NOT NULL, -- date to track
  DOCTYPE_ID INTEGER NOT NULL,
  SHIPPER VARCHAR(255),
  RECEIVER VARCHAR(255),
  PROCESSING CHARACTER(1),
  PROCESSED CHARACTER VARYING(60) NOT NULL DEFAULT 'N'::CHARACTER VARYING,
  POSTED CHARACTER VARYING(60) NOT NULL DEFAULT 'N'::CHARACTER VARYING,
  STATUS_ID INTEGER,
  OWNER_ID INTEGER,
  DESCRIPTION CHARACTER VARYING(255),
  TEXTMSG TEXT,

  ISSUED_DATE TIMESTAMP WITHOUT TIME ZONE,
  RECEIVED_DATE TIMESTAMP WITHOUT TIME ZONE,
  STORED_DATE TIMESTAMP WITHOUT TIME ZONE,
    
  CONSTRAINT TDP_MNGMT_DEPARTMENT_ID FOREIGN KEY (DEPARTMENT_ID)
      REFERENCES TORGANISATION (ID) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT TDOCTYPE_DOCTYPE_ID FOREIGN KEY (DOCTYPE_ID)
      REFERENCES TDOCTYPE (ID) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
      
  CONSTRAINT TDP_MNGMT_OWNER_ID FOREIGN KEY (OWNER_ID)
      REFERENCES TPERSON (ID) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,

  FOREIGN KEY (CREATEDBY) REFERENCES TPERSON(ID),
  FOREIGN KEY (UPDATEDBY) REFERENCES TPERSON(ID),      
   
  CONSTRAINT TDP_MNGMT_CHANNEL_TYPE_CHK CHECK (CHANNEL_TYPE = ANY (ARRAY['I'::BPCHAR, 'O'::BPCHAR])),
  CONSTRAINT TDP_MNGMT_ISACTIVE_CHECK CHECK (ISACTIVE = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR]))
)
WITH (
  OIDS=FALSE
);


-- --status: NEW=NEW, REC=RECEIVED, SHI=SHIPPED, FOR=FORWARDED, POS=POSTED--
/* doc prococol management status */
CREATE TABLE TDP_MNGMT_STATUS (
  ID SERIAL PRIMARY KEY,
  DP_MNGM_ID INTEGER NOT NULL,
  FROM_DPT_ID INTEGER,
  TO_DPT_ID INTEGER,
  MSG_TYPE CHARACTER(1) NOT NULL DEFAULT 'U'::BPCHAR,
  STATUS_CODE CHARACTER VARYING(20) NOT NULL,
  ACTION_TAKEN CHARACTER VARYING(255),
  TEXTMSG CHARACTER VARYING(2000),
  CREATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
  CREATEDBY INTEGER NOT NULL,
  UPDATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
  UPDATEDBY INTEGER NOT NULL,	

 FOREIGN KEY (DP_MNGM_ID) REFERENCES TDP_MNGMT(ID),
 FOREIGN KEY (FROM_DPT_ID) REFERENCES TORGANISATION(ID),
 FOREIGN KEY (TO_DPT_ID) REFERENCES TORGANISATION(ID),
 FOREIGN KEY (CREATEDBY) REFERENCES TPERSON(ID),
 FOREIGN KEY (UPDATEDBY) REFERENCES TPERSON(ID)
  
);

ALTER TABLE TDP_MNGMT ADD CONSTRAINT TDP_MNGMT_ACTIVITY_ID_FKEY FOREIGN KEY (STATUS_ID) REFERENCES TDP_MNGMT_STATUS (ID);

CREATE TABLE TDP_MNGMT_ATTACH (
 ID SERIAL PRIMARY KEY,
 DP_MNGM_ID INTEGER NOT NULL,
 DOC_NAME VARCHAR(100) NOT NULL, 
 DOC_CONTENT_TYPE VARCHAR(100) NOT NULL,
 DOC_TYPE VARCHAR(10) NOT NULL,
 DOC_SIZE BIGINT,
 DOC BYTEA, 

 CREATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
 CREATEDBY INTEGER NOT NULL,
 UPDATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
 UPDATEDBY INTEGER NOT NULL,	

 FOREIGN KEY (DP_MNGM_ID) REFERENCES TDP_MNGMT(ID),
 FOREIGN KEY (CREATEDBY) REFERENCES TPERSON(ID),
 FOREIGN KEY (UPDATEDBY) REFERENCES TPERSON(ID)
);	

CREATE TABLE TLOCATION
(
  ID SERIAL PRIMARY KEY NOT NULL,
  ISACTIVE CHARACTER(1) NOT NULL DEFAULT 'Y'::BPCHAR,
  CREATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
  CREATEDBY INTEGER NOT NULL,
  UPDATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
  UPDATEDBY INTEGER NOT NULL,
  ADDRESS1 CHARACTER VARYING(60),
  ADDRESS2 CHARACTER VARYING(60),
  CITY CHARACTER VARYING(60),
  POSTAL CHARACTER VARYING(10),
  POSTAL_ADD CHARACTER VARYING(10),
  COUNTRY VARCHAR(80) NOT NULL,
  REGION VARCHAR(50),
  ADDRESS3 CHARACTER VARYING(60),
  ADDRESS4 CHARACTER VARYING(60),
  VALIDATEADDRESS CHARACTER(1) DEFAULT NULL::BPCHAR,
  RESULT CHARACTER VARYING(2000) DEFAULT NULL::CHARACTER VARYING,
  ISVALID CHARACTER(1) DEFAULT 'N'::BPCHAR,

  FOREIGN KEY (CREATEDBY) REFERENCES TPERSON(ID),
  FOREIGN KEY (UPDATEDBY) REFERENCES TPERSON(ID), 
  CONSTRAINT TLOCATION_ISACTIVE_CHECK CHECK (ISACTIVE = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR])),
  CONSTRAINT TLOCATION_ISVALID_CHECK CHECK (ISVALID = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR]))
)
WITH (
  OIDS=FALSE
);


CREATE TABLE TBPARTNER(
 ID SERIAL PRIMARY KEY NOT NULL,
 PARTY_ID BIGINT,
 ISACTIVE CHARACTER(1) NOT NULL DEFAULT 'Y'::BPCHAR,
 NAME CHARACTER VARYING(120) NOT NULL,
 NAME2 CHARACTER VARYING(60),
 DESCRIPTION CHARACTER VARYING(255),
 EMPLOYER_ID_NUMBER VARCHAR(100) NOT NULL, --BUSINESS_NUMBER
 SOCIAL_SECURITY_NUMBER VARCHAR(100) NOT NULL, 
 CONTACT_ETBILISHED_DATE DATE NOT NULL,
 VENDOR_DISCOUNT_PERCENT FLOAT NOT NULL,
  
 ISSUMMARY CHARACTER(1) NOT NULL DEFAULT 'N'::BPCHAR,
 
 ISONETIME CHARACTER(1) NOT NULL DEFAULT 'N'::BPCHAR,
 ISPROSPECT CHARACTER(1) NOT NULL DEFAULT 'Y'::BPCHAR,
 ISVENDOR CHARACTER(1) NOT NULL DEFAULT 'N'::BPCHAR,
 ISCUSTOMER CHARACTER(1) NOT NULL DEFAULT 'Y'::BPCHAR,
 ISEMPLOYEE CHARACTER(1) NOT NULL DEFAULT 'N'::BPCHAR,
 ISSALESREP CHARACTER(1) NOT NULL DEFAULT 'N'::BPCHAR,
 REFERENCENO CHARACTER VARYING(40), 
 RATING CHARACTER(1),
 SALESVOLUME NUMERIC(10,0),
 NUMBEREMPLOYEES NUMERIC(10,0),
 FLATDISCOUNT NUMERIC,
 TOTALOPENBALANCE NUMERIC, 
 BPARTNER_PARENT_ID NUMERIC(10,0),

 created timestamp without time zone NOT NULL DEFAULT now(),
 createdby integer NOT NULL,
 updated timestamp without time zone NOT NULL DEFAULT now(),
 updatedby integer NOT NULL,

 FOREIGN KEY (PARTY_ID) REFERENCES TPARTY(ID),
 FOREIGN KEY (createdby) REFERENCES tperson(id),
 FOREIGN KEY (updatedby) REFERENCES tperson(id),  
 CONSTRAINT tbpartner_isactive_check CHECK (isactive = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))
);


CREATE TABLE tbpartner_location
(
  ID SERIAL PRIMARY KEY NOT NULL,
  isactive character(1) NOT NULL DEFAULT 'Y'::bpchar,
  created timestamp without time zone NOT NULL DEFAULT now(),
  createdby integer NOT NULL,
  updated timestamp without time zone NOT NULL DEFAULT now(),
  updatedby integer NOT NULL,
  name character varying(60) NOT NULL,
  isbillto character(1) NOT NULL DEFAULT 'Y'::bpchar,
  isshipto character(1) NOT NULL DEFAULT 'Y'::bpchar,
  ispayfrom character(1) NOT NULL DEFAULT 'Y'::bpchar,
  isremitto character(1) NOT NULL DEFAULT 'Y'::bpchar,
  phone character varying(40),
  phone2 character varying(40),
  fax character varying(40),
  isdn character varying(40),
  bpartner_id integer NOT NULL,
  location_id integer,
  
  CONSTRAINT tbpartner_location_bpartner_id FOREIGN KEY (bpartner_id)
      REFERENCES tbpartner (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
  CONSTRAINT tbpartner_location_location_id FOREIGN KEY (location_id)
      REFERENCES tlocation (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION DEFERRABLE INITIALLY DEFERRED,
  FOREIGN KEY (createdby) REFERENCES tperson(id),
  FOREIGN KEY (updatedby) REFERENCES tperson(id),        
  CONSTRAINT tbpartner_location_isactive_check CHECK (isactive = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])),
  CONSTRAINT tbpartner_location_isbillto_check CHECK (isbillto = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])),
  CONSTRAINT tbpartner_location_ispayfrom_check CHECK (ispayfrom = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])),
  CONSTRAINT tbpartner_location_isremitto_check CHECK (isremitto = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])),
  CONSTRAINT tbpartner_location_isshipto_check CHECK (isshipto = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))
)
WITH (
  OIDS=FALSE
);

/*
CREATE TABLE TDP_MNGMT_INOUT (
  ID SERIAL PRIMARY KEY,
  org_id numeric(10,0) NOT NULL,
  isactive character(1) NOT NULL DEFAULT 'Y'::bpchar,
  created timestamp without time zone NOT NULL DEFAULT now(),
  createdby numeric(10,0) NOT NULL,
  updated timestamp without time zone NOT NULL DEFAULT now(),
  updatedby numeric(10,0) NOT NULL,
  issotrx character(1) NOT NULL DEFAULT 'Y'::bpchar,
  documentno character varying(30) NOT NULL,
  docaction character(2) NOT NULL,
  docstatus character(2) NOT NULL,
  posted character(1) NOT NULL DEFAULT 'N'::bpchar,
  processing character(1),
  processed character(1) NOT NULL DEFAULT 'N'::bpchar,
  doctype_id integer NOT NULL,
  description character varying(255),
  order_id integer,
  dateordered timestamp without time zone,
  isprinted character(1) NOT NULL DEFAULT 'N'::bpchar,
  movementtype character(2) NOT NULL,
  movementdate timestamp without time zone NOT NULL,
  dateacct timestamp without time zone NOT NULL,
  bpartner_id integer NOT NULL,
  bpartner_location_id intger NOT NULL,

  priorityrule character(1) NOT NULL,
  dateprinted timestamp without time zone,
  createfrom character(1),
  generateto character(1),
  sendemail character(1) NOT NULL DEFAULT 'N'::bpchar,
  user_id integer,
  salesrep_id numeric(10,0),
  nopackages numeric(10,0) DEFAULT (1)::numeric,
  pickdate timestamp without time zone,
  shipdate timestamp without time zone,
  trackingno character varying(60),
  
  activity_id numeric(10,0),

  datereceived timestamp without time zone,
  isintransit character(1) NOT NULL DEFAULT 'N'::bpchar,
  ref_inout_id numeric(10,0),
  createconfirm character(1),
  createpackage character(1),
  isapproved character(1) NOT NULL DEFAULT 'N'::bpchar,
  volume numeric,
  weight numeric,
  insurance character(1) DEFAULT NULL::bpchar
);
*/

/*
Destination Type 
Expense - The goods are delivered to the requestor at an expense location. The destination subinventory is not applicable.
Inventory - The goods are received into inventory upon delivery.
*/

CREATE TABLE TTAX
(
ID SERIAL PRIMARY KEY,
ISACTIVE CHARACTER(1) NOT NULL DEFAULT 'Y'::BPCHAR,
NAME CHARACTER VARYING(60) NOT NULL,
TAXCATEGORY CHARACTER VARYING(60) NOT NULL,
DESCRIPTION CHARACTER VARYING(255),
TAXINDICATOR CHARACTER VARYING(10),
VALIDFROM TIMESTAMP WITHOUT TIME ZONE NOT NULL,
ISSUMMARY CHARACTER(1) NOT NULL DEFAULT 'N'::BPCHAR,
REQUIRESTAXCERTIFICATE CHARACTER(1) NOT NULL DEFAULT 'N'::BPCHAR,
RATE NUMERIC NOT NULL,
PARENT_TAX_ID INTEGER,
ISDEFAULT CHARACTER(1) NOT NULL DEFAULT 'N'::BPCHAR,
ISTAXEXEMPT CHARACTER(1) NOT NULL DEFAULT 'N'::BPCHAR,
SOPOTYPE CHARACTER(1) NOT NULL DEFAULT 'B'::BPCHAR,
ISSALESTAX CHARACTER(1) NOT NULL DEFAULT 'N'::BPCHAR,

CREATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
CREATEDBY INTEGER NOT NULL,
UPDATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
UPDATEDBY INTEGER NOT NULL,  

CONSTRAINT TTAX_ISSUMMARY_CHECK CHECK (ISSUMMARY = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR])),
CONSTRAINT TTAX_REQUIRESTAXCERTIFICATE_CHECK CHECK (REQUIRESTAXCERTIFICATE = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR])),
CONSTRAINT TTAX_ISDEFAULT_CHECK CHECK (ISDEFAULT = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR])),
CONSTRAINT TTAX_ISTAXEXEMPT_CHECK CHECK (ISTAXEXEMPT = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR])),
CONSTRAINT TTAX_SOPOTYPE_CHECK CHECK (SOPOTYPE = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR])),
CONSTRAINT TTAX_ISSALESTAX_CHECK CHECK (ISSALESTAX = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR]))
);

CREATE TABLE TREQUISITION(
 ID SERIAL PRIMARY KEY,
 ISACTIVE CHARACTER(1) NOT NULL DEFAULT 'Y'::BPCHAR,
 REQUISITION_NR VARCHAR(36) NOT NULL UNIQUE, 
 DOCUMENT_ID INTEGER,
 STATUS_ID INTEGER,
 STATUS_CODE CHARACTER VARYING(20),
 ORGANISATION_ID INTEGER NOT NULL,

 REQUESTER_NAME VARCHAR(100) NOT NULL,
 REQUESTER_PHONE VARCHAR(100) NOT NULL,
 DESTINATION_TYPE CHARACTER(1) NOT NULL DEFAULT 'E'::BPCHAR,	

 IS_BPARTNER CHARACTER(1) NOT NULL DEFAULT 'N'::BPCHAR,
 BPARTNER_ID integer,
 
 SUPPLIER_NAME VARCHAR(100),
 SUPPLIER_SITE VARCHAR(100),
 SUPPLIER_CONTACT VARCHAR(100),
 SUPPLIER_PHONE VARCHAR(100),
 SUPPLIER_ADDRESS VARCHAR(150),
 SUPPLIER_FAX VARCHAR(50), 
 SUPPLIER_EMAIL VARCHAR(150),
 
 TOTAL_AMOUNT NUMERIC(20,5),
 CURRENCY_ID INTEGER NOT NULL,

 DESIRED_DATE TIMESTAMP WITHOUT TIME ZONE,

 CREATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
 CREATEDBY INTEGER NOT NULL,
 UPDATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
 UPDATEDBY INTEGER NOT NULL,	

 TEXTMSG CHARACTER VARYING(2000),
 IS_PO CHARACTER(1) NOT NULL DEFAULT 'N'::BPCHAR,
 
 FOREIGN KEY (DOCUMENT_ID) REFERENCES TDP_MNGMT(ID), 
 FOREIGN KEY (BPARTNER_ID) REFERENCES TBPARTNER(ID), 
 FOREIGN KEY (ORGANISATION_ID) REFERENCES TORGANISATION(ID), 
 FOREIGN KEY (CURRENCY_ID) REFERENCES TCURRENCY(ID), 
 FOREIGN KEY (CREATEDBY) REFERENCES tperson(ID), 
 FOREIGN KEY (UPDATEDBY) REFERENCES tperson(ID),
 CONSTRAINT TREQUISITION_ISACTIVE_CHECK CHECK (ISACTIVE = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR])),
 CONSTRAINT TREQUISITION_IS_PO_CHECK CHECK (IS_PO = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR])),
 CONSTRAINT TREQUISITION_DESTINATION_TYPE_CHECK CHECK (DESTINATION_TYPE = ANY (ARRAY['E'::BPCHAR, 'I'::BPCHAR]))
);	

/*
For purposes of requisition line entry, line types are handled in three classes: amount-based, quantity-based, and outside processing. 
Order quantity 24
Order unit Box
Gross price per unit $10
Order price unit (number) 1
Order price unit kg
Conversion factor 24 boxes = 1 kg 
*/
/*
Open = OP
Approved = AP
Cancelled = CA
Closed = CL
Rejected = RE

*/
CREATE TABLE TREQUISITION_ITEM(
 ID SERIAL PRIMARY KEY,
 REQUISITION_ID INTEGER NOT NULL,
 ISACTIVE CHARACTER(1) NOT NULL DEFAULT 'Y'::BPCHAR,
 STATUS_CODE CHARACTER(2) NOT NULL DEFAULT 'OP'::BPCHAR,

 ITEM_NAME VARCHAR(100) NOT NULL,
 UNIT_OF_ISSUE_CODE VARCHAR(5) NOT NULL, --Gross price per unit $10 
 ITEM_NUMBER VARCHAR(100),
 QUANTITY INTEGER NOT NULL,
 UNIT_PRICE NUMERIC(20,5)NOT NULL,
 UNIT_PRICE_AMOUNT NUMERIC(20,5),
 ITEM_DESC VARCHAR(255),
 UOM_ID INTEGER NOT NULL, --Units of measurement--

 RECEIVED_DATE TIMESTAMP NOT NULL,	
 ACCEPT_DATE TIMESTAMP NOT NULL,	

 NEED_BY_DATE TIMESTAMP WITHOUT TIME ZONE, -- Need By date You must enter a date greater than or equal to the requisition creation date.
 CREATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
 CREATEDBY INTEGER NOT NULL,
 UPDATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
 UPDATEDBY INTEGER NOT NULL,
 
 TEXTMSG CHARACTER VARYING(255),

 CONSTRAINT TREQUISITION_ITEM_REQUISITION_ID_ITEM_NUMBER UNIQUE (REQUISITION_ID, ITEM_NUMBER),
 FOREIGN KEY (REQUISITION_ID) REFERENCES TREQUISITION(ID),
 FOREIGN KEY (UOM_ID) REFERENCES TUOM(ID),
 
 FOREIGN KEY (CREATEDBY) REFERENCES tperson(ID), 
 FOREIGN KEY (UPDATEDBY) REFERENCES tperson(ID),
 CONSTRAINT TREQUISITION_ITEM_ISACTIVE_CHECK CHECK (ISACTIVE = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR])),
 CONSTRAINT TREQUISITION_ITEM_STATUS_CODE_CHECK CHECK (STATUS_CODE = ANY (ARRAY['OP'::BPCHAR, 'AP'::BPCHAR, 'RE'::BPCHAR, 'CA'::BPCHAR, 'CL'::BPCHAR]))

);	

CREATE TABLE TREQUISITION_STATUS(
 ID SERIAL PRIMARY KEY,
 REQUISITION_ID INTEGER NOT NULL,
 STATUS_CODE CHARACTER VARYING(20) NOT NULL,
 TEXTMSG CHARACTER VARYING(1000),
 
 CREATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
 CREATEDBY INTEGER NOT NULL,
 UPDATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
 UPDATEDBY INTEGER NOT NULL,	

 FOREIGN KEY (REQUISITION_ID) REFERENCES TREQUISITION(ID),
 FOREIGN KEY (CREATEDBY) REFERENCES TPERSON(ID), 
 FOREIGN KEY (UPDATEDBY) REFERENCES TPERSON(ID)
);	

ALTER TABLE TREQUISITION ADD CONSTRAINT TREQUISITION_STATUS_ID_FKEY FOREIGN KEY (STATUS_ID) REFERENCES TREQUISITION_STATUS (ID);

CREATE TABLE TREQUISITION_ACCOUNT(
 ID SERIAL PRIMARY KEY,
 ORGANISATION_ID INTEGER NOT NULL,
 ACCOUNT_NO VARCHAR(50) NOT NULL,
 
 CREATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
 CREATEDBY INTEGER NOT NULL,
 UPDATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
 UPDATEDBY INTEGER NOT NULL,		

 FOREIGN KEY (CREATEDBY) REFERENCES TPERSON(ID), 
 FOREIGN KEY (UPDATEDBY) REFERENCES TPERSON(ID)
);	

CREATE TABLE TPURCHASE_ORDER(
 ID SERIAL PRIMARY KEY,
 REQUISITION_ID INTEGER,
 STATUS_ID INTEGER,
 STATUS_CODE VARCHAR(20) NOT NULL,
 ISACTIVE CHARACTER(1) NOT NULL DEFAULT 'Y'::BPCHAR,
 DOCUMENT_ID INTEGER,
 PO_NUMBER VARCHAR(36) NOT NULL UNIQUE,

 IS_BPARTNER CHARACTER(1) NOT NULL DEFAULT 'N'::BPCHAR,
 BPARTNER_ID INTEGER,
 BPARTNER_LOCATION_ID INTEGER,
 
 SUPPLIER_NAME VARCHAR(100),
 SUPPLIER_SITE VARCHAR(100),
 SUPPLIER_CONTACT VARCHAR(100),
 SUPPLIER_PHONE VARCHAR(100),
 SUPPLIER_ADDRESS VARCHAR(150),
 SUPPLIER_FAX VARCHAR(50), 
 SUPPLIER_EMAIL VARCHAR(150),
 
 ORDER_DATE TIMESTAMP,	
 ORDER_COMPLETATION DATE,	
 
 PAYMENT_TERMS_CODE VARCHAR(20),
 PAYMENT_TERMS_NAME VARCHAR(20),
 ACQUISITION_TYPE_CODE VARCHAR(20),
 
 DEPT_CONTACT_NAME VARCHAR(100),
 DEPT_CONTACT_PHONE VARCHAR(100),
 DEPT_CONTACT_EMAIL VARCHAR(100),
 
 EQUIPMENT_APPROVER_NAME VARCHAR(100),
 EQUIPMENT_PRINTED CHARACTER(1),
 EQUIPMENT_PRINT_DATE TIMESTAMP,
 
 CHANGE_ORDERS_COUNT SMALLINT,
 CHANGE_ORDERS_DATE TIMESTAMP,
 ORDER_ORIGINAL_AMOUNT NUMERIC(22,2),
 ORDER_INITIAL_AMOUNT NUMERIC(22,2),

 TEXTMSG CHARACTER VARYING(2000),
 
 DATEORDERED TIMESTAMP WITHOUT TIME ZONE NOT NULL,
 DATEPROMISED TIMESTAMP WITHOUT TIME ZONE,
 DATEPRINTED TIMESTAMP WITHOUT TIME ZONE,
 
 ISDELIVERED CHARACTER(1),
 ISINVOICED CHARACTER(1),
 ISPRINTED CHARACTER(1),
 ISSELECTED CHARACTER(1),
 SENDEMAIL CHARACTER(1),

 BILL_BPARTNER_ID INTEGER,
 BILL_LOCATION_ID INTEGER,
 BILL_USER_ID INTEGER,
 PAY_BPARTNER_ID INTEGER,
 PAY_LOCATION_ID INTEGER, 

 AMOUNTTENDERED NUMERIC(22,2),
 AMOUNTREFUNDED NUMERIC(22,2),
 PROMOTIONCODE CHARACTER VARYING(30), 
 CURRENCY_ID INTEGER NOT NULL,
 
 PAYMENTRULE CHARACTER VARYING(60),
 INVOICERULE CHARACTER VARYING(60),
 DELIVERYRULE CHARACTER VARYING(60),
 DELIVERYVIARULE CHARACTER VARYING(60),

 SHIPPER CHARACTER VARYING(60),--Method or manner of product delivery. The Shipper indicates the method of delivering product 

 TAXAMOUNT NUMERIC(20,5), --Tax amount. i.e 19% tax
 FREIGHT NUMERIC(20,5), --Freight Shipping cost. The Freight Amount indicates the amount charged for Freight in the document currency. 

 TOTALLINES NUMERIC(20,5) NOT NULL DEFAULT 0.0, --Purchase order subtotal. Computed from po items. The Total amount displays the total of all lines in document currency 
 GRANDTOTAL NUMERIC(20,5) NOT NULL DEFAULT 0.0, --Total due to vendor. Computed as TOTALLINES + TaxAmt + Freight

 ISSELFSERVICE CHARACTER(1),
 DELIVERYNOTES CHARACTER VARYING(2000), -- --OBTG:NVARCHAR--
 ASSET_ID INTEGER,
 --QUOTATION_ID INTEGER, we dont have process for quotation
   
 CREATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
 CREATEDBY INTEGER NOT NULL,
 UPDATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
 UPDATEDBY INTEGER NOT NULL,
 
 FOREIGN KEY (REQUISITION_ID) REFERENCES TREQUISITION(ID), 
 FOREIGN KEY (BPARTNER_ID) REFERENCES TBPARTNER(ID), 
 FOREIGN KEY (BPARTNER_LOCATION_ID) REFERENCES TBPARTNER_LOCATION(ID),
 
 FOREIGN KEY (DOCUMENT_ID) REFERENCES TDP_MNGMT(ID), 
 FOREIGN KEY (CURRENCY_ID) REFERENCES TCURRENCY(ID),
 FOREIGN KEY (ASSET_ID) REFERENCES TASSETS(ID),
 
 FOREIGN KEY (CREATEDBY) REFERENCES TPERSON(ID),
 FOREIGN KEY (UPDATEDBY) REFERENCES TPERSON(ID),
 
 CONSTRAINT TPURCHASE_ORDER_ISDELIVERED_CHECK CHECK (ISDELIVERED = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR])),
 CONSTRAINT TPURCHASE_ORDER_ISINVOICED_CHECK CHECK (ISINVOICED = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR])),
 CONSTRAINT TPURCHASE_ORDER_ISPRINTED_CHECK CHECK (ISPRINTED = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR])),
 CONSTRAINT TPURCHASE_ORDER_ISSELFSERVICE_CHECK CHECK (ISSELFSERVICE = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR])),
 CONSTRAINT TPURCHASE_ORDER_SENDEMAIL_CHECK CHECK (SENDEMAIL = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR])),
 CONSTRAINT TPURCHASE_ORDER_ISACTIVE_CHECK CHECK (ISACTIVE = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR])),
 CONSTRAINT TPURCHASE_ORDER_EQUIPMENT_PRINTED_CHECK CHECK (EQUIPMENT_PRINTED = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR]))
);

CREATE TABLE TPURCHASE_ORDER_ITEM(
 ID SERIAL PRIMARY KEY,
 ORDER_ID INTEGER NOT NULL,
 ISACTIVE CHARACTER(1) NOT NULL DEFAULT 'Y'::BPCHAR,
 STATUS_CODE CHARACTER(2) NOT NULL DEFAULT 'OP'::BPCHAR, --please see requisition item
 BPARTNER_ID INTEGER,
 BPARTNER_LOCATION_ID INTEGER,

 ITEM_NAME VARCHAR(100) NOT NULL,
 ITEM_NUMBER VARCHAR(20) NOT NULL, --PRODUCT IDENTIFICATION NUMBER OF THE ORDERED PRODUCT. FOREIGN KEY TO PRODUCT.PRODUCTID. Indicates the unique line for a document. It will also control the display order of the lines within a document. 
 ITEM_DESC VARCHAR(255),

 UNIT_PRICE NUMERIC(20,5) NOT NULL DEFAULT 0.0, --PRICE OF A SINGLE PRODUCT. The Actual or Unit Price indicates the Price for a product in source currency. 
 LINE_TOTAL NUMERIC(20,5) NOT NULL DEFAULT 0.0, --COMPUTED AS ORDERQTY * UNITPRICE, PRODUCT COST SUBTOTAL. Line Extended Amount (Quantity * Actual Price) without Freight and Charges
 UOM_ID INTEGER NOT NULL, --UNITS OF MEASUREMENT. The UOM defines a unique non monetary Unit of Measure--
 CURRENCY_ID INTEGER NOT NULL,
 
 DATEORDERED TIMESTAMP WITHOUT TIME ZONE NOT NULL,
 DATEPROMISED TIMESTAMP WITHOUT TIME ZONE,--DATE THE PRODUCT IS EXPECTED TO BE RECEIVED FROM THE VENDOR
 DATEDELIVERED TIMESTAMP WITHOUT TIME ZONE,
 DATEINVOICED TIMESTAMP WITHOUT TIME ZONE,
 DESCRIPTION CHARACTER VARYING(2000), -- --OBTG:NVARCHAR--
 DIRECTSHIP CHARACTER(1) NOT NULL DEFAULT 'Y'::BPCHAR,
 SHIPPER CHARACTER VARYING(60),--Method or manner of product delivery. The Shipper indicates the method of delivering product 

 QTYORDERED NUMERIC NOT NULL DEFAULT 0,--The Ordered Quantity indicates the quantity of a product that was ordered. 
 QTYRESERVED NUMERIC,
 QTYDELIVERED NUMERIC,--QUANTITY ACTUALLY RECEIVED FROM THE VENDOR. The Delivered Quantity indicates the quantity of a product that has been delivered. 
 QTYREJECTED NUMERIC, --QUANTITY REJECTED DURING INSPECTION
 QTYINVOICED NUMERIC, --QUANTITY INVOICED AFTER INSPECTION
 QTYSTOCKED NUMERIC, --COMPUTED AS QTYSTOCKED = RECEIVEQTY - REJECTEDQTY, QUANTITY ACCEPTED INTO INVENTORY
 
 PRICELIST NUMERIC(20,5),
 PRICEACTUAL NUMERIC(20,5),
 PRICELIMIT NUMERIC(20,5),
 LINENETAMT NUMERIC(20,5),
 DISCOUNT NUMERIC(20,5),
 FREIGHTAMT NUMERIC(20,5),--The Freight Amount indicates the amount charged for Freight in the document currency. 
 TAX_ID INTEGER NOT NULL,

 GROSS_UNIT_PRICE NUMERIC(20,5), --GROSS PRICE PER UNIT $10
 LINE_GROSS_AMOUNT NUMERIC(20,5),
 GROSSPRICELIST NUMERIC(20,5),
 
 CREATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
 CREATEDBY INTEGER NOT NULL,
 UPDATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
 UPDATEDBY INTEGER NOT NULL,	

 CONSTRAINT TPURCHASE_ORDER_ITEM_ORDER_ID_ITEM_NUMBER UNIQUE (ORDER_ID, ITEM_NUMBER),
 FOREIGN KEY (ORDER_ID) REFERENCES TPURCHASE_ORDER(ID), 
 FOREIGN KEY (BPARTNER_ID) REFERENCES TBPARTNER(ID), 
 FOREIGN KEY (BPARTNER_LOCATION_ID) REFERENCES TBPARTNER_LOCATION(ID),
 FOREIGN KEY (CURRENCY_ID) REFERENCES TCURRENCY(ID),
 FOREIGN KEY (UOM_ID) REFERENCES TUOM(ID),
 FOREIGN KEY (CREATEDBY) REFERENCES TPERSON(ID), 
 FOREIGN KEY (UPDATEDBY) REFERENCES TPERSON(ID),
 FOREIGN KEY (TAX_ID) REFERENCES TTAX(ID),
 CONSTRAINT TPURCHASE_ORDER_ITEM_ISACTIVE_CHECK CHECK (ISACTIVE = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR])),
 CONSTRAINT TPURCHASE_ORDER_ITEM_DIRECTSHIP_CHECK CHECK (DIRECTSHIP = ANY (ARRAY['Y'::BPCHAR, 'N'::BPCHAR])),
 CONSTRAINT TPURCHASE_ORDER_ITEM_STATUS_CODE_CHECK CHECK (STATUS_CODE = ANY (ARRAY['OP'::BPCHAR, 'AP'::BPCHAR, 'RE'::BPCHAR, 'CA'::BPCHAR, 'CL'::BPCHAR, 'DL'::BPCHAR]))
);

CREATE TABLE TPURCHASE_ORDER_STATUS(
 ID SERIAL PRIMARY KEY,
 ORDER_ID INTEGER NOT NULL,
 STATUS_CODE CHARACTER VARYING(20) NOT NULL,
 TEXTMSG CHARACTER VARYING(1000),
 
 CREATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
 CREATEDBY INTEGER NOT NULL,
 UPDATED TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
 UPDATEDBY INTEGER NOT NULL,	

 FOREIGN KEY (ORDER_ID) REFERENCES TPURCHASE_ORDER(ID),
 FOREIGN KEY (CREATEDBY) REFERENCES tperson(ID), 
 FOREIGN KEY (UPDATEDBY) REFERENCES tperson(ID)
);	

ALTER TABLE TPURCHASE_ORDER ADD CONSTRAINT TPURCHASE_ORDER_STATUS_ID_FKEY FOREIGN KEY (status_id) REFERENCES TPURCHASE_ORDER_STATUS (ID);

CREATE TABLE talertrule
(
  id bigserial PRIMARY KEY NOT NULL,
  org_id bigint NOT NULL,
  isactive character(1) NOT NULL DEFAULT 'Y'::bpchar,
  created timestamp without time zone NOT NULL DEFAULT now(),
  createdby integer NOT NULL,
  updated timestamp without time zone NOT NULL DEFAULT now(),
  updatedby integer NOT NULL,
  name character varying(60) NOT NULL,
  action character varying(60),
  filterclause character varying(2000),
  sql_str character varying(2000),
  type_str character varying(60),

  CONSTRAINT talertrule_org_id FOREIGN KEY (org_id)
      REFERENCES torganisation (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  FOREIGN KEY (createdby) REFERENCES tperson(id),
  FOREIGN KEY (updatedby) REFERENCES tperson(id)       
)
WITH (
  OIDS=FALSE
);

CREATE TABLE talertrule_trl
(
  id bigserial PRIMARY KEY NOT NULL,
  alertrule_id bigint NOT NULL,
  ad_language character varying(6) NOT NULL,
  org_id bigint NOT NULL,
  isactive character(1) NOT NULL DEFAULT 'Y'::bpchar,
  created timestamp without time zone NOT NULL DEFAULT now(),
  createdby integer NOT NULL,
  updated timestamp without time zone NOT NULL DEFAULT now(),
  updatedby integer NOT NULL,
  name character varying(60) NOT NULL, -- --OBTG:NVARCHAR--
  istranslated character(1) DEFAULT 'N'::bpchar,
  CONSTRAINT talertrule_trl_alertrule_id FOREIGN KEY (alertrule_id)
      REFERENCES talertrule (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE CASCADE,
  CONSTRAINT talertrule_trl_language FOREIGN KEY (ad_language)
      REFERENCES tad_language (ad_language) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT talertrule_trl_org_id FOREIGN KEY (org_id)
      REFERENCES torganisation (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT alertrule_ad_language_un UNIQUE (alertrule_id, ad_language),
  FOREIGN KEY (createdby) REFERENCES tperson(id),
  FOREIGN KEY (updatedby) REFERENCES tperson(id)    
)
WITH (
  OIDS=FALSE
);

CREATE TABLE talert
(
  id bigserial PRIMARY KEY NOT NULL,
  org_id bigint NOT NULL,
  alertrule_id bigint,
  role_id integer,
  person_id integer,

  isactive character(1) NOT NULL DEFAULT 'Y'::bpchar,
  created timestamp without time zone NOT NULL DEFAULT now(),
  createdby integer NOT NULL,
  updated timestamp without time zone NOT NULL DEFAULT now(),
  updatedby integer NOT NULL,
  name character varying(60) NOT NULL,
  description character varying(255),  
  isfixed character(1) DEFAULT 'N'::bpchar,
  note character varying(2000),
  table_name character varying(150),
  table_id bigint,
  referencekey_id character varying(32) NOT NULL,
  status character varying(60),
  errormsg character varying(2000),
  
  CONSTRAINT talert_alertrule_id FOREIGN KEY (alertrule_id)
      REFERENCES talertrule (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT talert_org_id FOREIGN KEY (org_id)
      REFERENCES torganisation (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT talert_role_id FOREIGN KEY (role_id)
      REFERENCES trbac_role (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT talert_person_id FOREIGN KEY (person_id)
      REFERENCES tperson (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  FOREIGN KEY (createdby) REFERENCES tperson(id),
  FOREIGN KEY (updatedby) REFERENCES tperson(id)     
)
WITH (
  OIDS=FALSE
);

CREATE TABLE talertrecipient
(
  id bigserial PRIMARY KEY NOT NULL,
  org_id bigint NOT NULL,
  isactive character(1) NOT NULL DEFAULT 'Y'::bpchar,
  created timestamp without time zone NOT NULL DEFAULT now(),
  createdby integer NOT NULL,
  updated timestamp without time zone NOT NULL DEFAULT now(),
  updatedby integer NOT NULL,
  person_id integer,
  alertrule_id bigint,
  role_id integer,
  sendemail character(1) DEFAULT 'N'::bpchar,
  
  CONSTRAINT talertrecipient_alertrule_id FOREIGN KEY (alertrule_id)
      REFERENCES talertrule (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE CASCADE,
  CONSTRAINT talertrecipient_org_id FOREIGN KEY (org_id)
      REFERENCES torganisation (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT talertrecipient_role_id FOREIGN KEY (role_id)
      REFERENCES trbac_role (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT talertrecipient_person_id FOREIGN KEY (person_id)
      REFERENCES tperson (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  FOREIGN KEY (createdby) REFERENCES tperson(id),
  FOREIGN KEY (updatedby) REFERENCES tperson(id)      
)
WITH (
  OIDS=FALSE
);


-- FK settings for dependency revers

ALTER TABLE TAD_LANGUAGE ADD CONSTRAINT TAD_LANGUAGE_CREATEDBY_FKEY FOREIGN KEY (CREATEDBY) REFERENCES TPERSON (ID);
ALTER TABLE TAD_LANGUAGE ADD CONSTRAINT TAD_LANGUAGE_UPDATEDBY_FKEY FOREIGN KEY (UPDATEDBY) REFERENCES TPERSON (ID);

ALTER TABLE TUOM ADD CONSTRAINT TUOM_CREATEDBY_FKEY FOREIGN KEY (CREATEDBY) REFERENCES TPERSON (ID);
ALTER TABLE TUOM ADD CONSTRAINT TUOM_UPDATEDBY_FKEY FOREIGN KEY (UPDATEDBY) REFERENCES TPERSON (ID);

ALTER TABLE TUOM_TRL ADD CONSTRAINT TUOM_TRL_CREATEDBY_FKEY FOREIGN KEY (CREATEDBY) REFERENCES TPERSON (ID);
ALTER TABLE TUOM_TRL ADD CONSTRAINT TUOM_TRL_UPDATEDBY_FKEY FOREIGN KEY (UPDATEDBY) REFERENCES TPERSON (ID);


/*MER module*/

CREATE TABLE TMER_PROJECT (
	ID SERIAL PRIMARY KEY NOT NULL,
	NAME VARCHAR(100) NOT NULL,
	NAME_EN VARCHAR(100) NOT NULL,
	NAME_SR VARCHAR(100),
	CODE VARCHAR(1) NOT NULL,
	PILLAR VARCHAR(3) NOT NULL,--SHTYLLA(TEXT DOMAIN): I, II, II
	DESCRIPTION TEXT,
	
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE DATE NOT NULL,
	
	FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID)
);



CREATE TABLE TMER_SUB_PROJECT (
	ID SERIAL PRIMARY KEY NOT NULL,
	PROJECT_ID INTEGER NOT NULL,
	NAME VARCHAR(200) NOT NULL,
	NAME_EN VARCHAR(200) NOT NULL,
	NAME_SR VARCHAR(200),
	PRIORITY VARCHAR(2),
	
	CODE VARCHAR(3) NOT NULL,
	
	DESCRIPTION TEXT,
	
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE DATE NOT NULL,
	
	FOREIGN KEY (PROJECT_ID) REFERENCES TMER_PROJECT(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID) 
);

CREATE TABLE TMER_PLAN_PERIOD (
	ID SERIAL PRIMARY KEY NOT NULL,
	START_YEAR INTEGER NOT NULL,
	END_YEAR INTEGER NOT NULL,
	
	NOTE TEXT,
	
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE DATE NOT NULL,

	FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID) 
);

CREATE TABLE TMER_STRATEGY(
	ID SERIAL PRIMARY KEY NOT NULL,
	SUB_PROJECT_ID INTEGER NOT NULL,
	PLAN_PERIOD_ID INTEGER NOT NULL,
	
	START_YEAR INTEGER NOT NULL,
	END_YEAR INTEGER,
	
	RESULTS TEXT NOT NULL,
	PIP_CODE VARCHAR(10),
	
	REVIEW_TIME DATE,
	
	COST DOUBLE PRECISION NOT NULL,
	FULLY_FINANCED BOOLEAN,
	IN_NEGOTIATIONS_FINANCE BOOLEAN,
	
	NOTE TEXT,
	
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE DATE NOT NULL,
	
	FOREIGN KEY (SUB_PROJECT_ID) REFERENCES TMER_SUB_PROJECT(ID),
	FOREIGN KEY (PLAN_PERIOD_ID) REFERENCES TMER_PLAN_PERIOD(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID) 
);

CREATE TABLE TMER_REF_SUB_PROJECTS (
	ID SERIAL PRIMARY KEY NOT NULL,
	STRATEGY_ID INTEGER NOT NULL,
	REF_STRATEGY_ID INTEGER NOT NULL,
	
	NOTE TEXT,
	
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE DATE NOT NULL,
	
	FOREIGN KEY (STRATEGY_ID) REFERENCES TMER_STRATEGY(ID),
	FOREIGN KEY (REF_STRATEGY_ID) REFERENCES TMER_STRATEGY(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID)
);

CREATE TABLE TMER_RESP_INSTITUTIONS (
	ID SERIAL PRIMARY KEY NOT NULL,
	STRATEGY_ID INTEGER NOT NULL,
	ORGANISATION_ID INTEGER NOT NULL,
	
	NOTE TEXT,
	
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE DATE NOT NULL,
	
	FOREIGN KEY (STRATEGY_ID) REFERENCES TMER_STRATEGY(ID),
	FOREIGN KEY (ORGANISATION_ID) REFERENCES TORGANISATION(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID)
);

CREATE TABLE TMER_STRATEGY_DOC (
	ID SERIAL PRIMARY KEY NOT NULL,
	STRATEGY_ID INTEGER NOT NULL,
	
	DOC_TYPE VARCHAR(100) NOT NULL, 
	DOC_NAME VARCHAR(100) NOT NULL, 
	DOC_SIZE BIGINT NOT NULL,
	DOC BYTEA NOT NULL,

	NOTE TEXT,
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE DATE,

	FOREIGN KEY (STRATEGY_ID) REFERENCES TMER_STRATEGY(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES TPERSON (ID)
);
--ZBATIMI I STRATEGJISE-STATUSI
CREATE TABLE TMER_STRATEGY_EXECUTION (
	ID SERIAL PRIMARY KEY NOT NULL,
	STRATEGY_ID INTEGER NOT NULL,
	STATUS VARCHAR(3) NOT NULL, --TEXT DOMAIN NGA TABELA PER MONITORIMIN E GJENDJES SE ZBATIMIT TE STRATEGJISE
	EXECUTION_DATE DATE NOT NULL,
	
	NOTE TEXT,
	
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE DATE NOT NULL,
	FOREIGN KEY (STRATEGY_ID) REFERENCES TMER_STRATEGY(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID) 
);

CREATE TABLE TMER_FINANCE_DONOR (
	ID SERIAL PRIMARY KEY NOT NULL,
	STRATEGY_ID INTEGER NOT NULL,
	DONOR_ID INTEGER NOT NULL,
	DONATION_YEAR INTEGER NOT NULL,
	AMOUNT DOUBLE PRECISION NOT NULL,
	
	NOTE TEXT,
	
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE DATE NOT NULL,
	FOREIGN KEY (STRATEGY_ID) REFERENCES TMER_STRATEGY(ID),
	FOREIGN KEY (DONOR_ID) REFERENCES TORGANISATION(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID) 
);

CREATE TABLE TMER_INDICATOR (
	ID SERIAL PRIMARY KEY NOT NULL,
	STRATEGY_ID INTEGER NOT NULL,
	NAME TEXT NOT NULL,
	NAME_EN TEXT NOT NULL,
	NAME_SR TEXT NOT NULL,
	TYPE VARCHAR(1) NOT NULL,--(PERFORMANCE=P, STRATEGY=S),
	
	NOTE TEXT,
	
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE DATE NOT NULL,
	FOREIGN KEY (STRATEGY_ID) REFERENCES TMER_STRATEGY(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID)
);

CREATE TABLE TMER_SUB_INDICATOR (
	ID SERIAL PRIMARY KEY NOT NULL,
	INDICATOR_ID INTEGER NOT NULL,
	NAME TEXT NOT NULL,
	NAME_EN TEXT NOT NULL,
	NAME_SR TEXT NOT NULL,
	UOM_ID INTEGER NOT NULL,
	
	NOTE TEXT,
	
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE DATE NOT NULL,
	FOREIGN KEY (INDICATOR_ID) REFERENCES TMER_INDICATOR(ID),
	FOREIGN KEY (UOM_ID) REFERENCES TUOM(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID)
);

CREATE TABLE TMER_INDICATOR_TARGET(
    ID SERIAL PRIMARY KEY NOT NULL,
    SUB_INDICATOR_ID INTEGER NOT NULL,
    YEAR INTEGER, 
    TARGET INTEGER NOT NULL,
    NOTE TEXT,
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE DATE NOT NULL,
	FOREIGN KEY (SUB_INDICATOR_ID) REFERENCES TMER_SUB_INDICATOR(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID)	

);


CREATE TABLE TMER_EVALUATION_PERF (
	ID SERIAL PRIMARY KEY NOT NULL,
	SUB_INDICATOR_ID INTEGER NOT NULL,
	EVAL_DATE DATE NOT NULL,
	TARGET DOUBLE PRECISION,
	ACTUAL DOUBLE PRECISION NOT NULL,
	
	NOTE TEXT,
	
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE DATE NOT NULL,
	FOREIGN KEY (SUB_INDICATOR_ID) REFERENCES TMER_SUB_INDICATOR(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID)
);

CREATE TABLE TMER_EVALUATION_STRAT (
	ID SERIAL PRIMARY KEY NOT NULL,
	INDICATOR_ID INTEGER NOT NULL,
	EVAL_DATE DATE NOT NULL,
	PROGRAM_RESULTS TEXT NOT NULL,
	
	NOTE TEXT,
	
	CREATED_BY INTEGER NOT NULL,
	CREATED_DATE DATE NOT NULL,
	FOREIGN KEY (INDICATOR_ID) REFERENCES TMER_INDICATOR(ID),
	FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID)
);

-- Function: gen_private_request_no(integer, integer)

--Publish 
	CREATE TABLE TPUBLISHING(
		ID SERIAL PRIMARY KEY NOT NULL,
		HTML_CODE TEXT NOT NULL,
		HTML_CODE_EN TEXT ,
		HTML_CODE_SR TEXT  ,
		TITLE VARCHAR(100) NOT NULL,
		TITLE_EN VARCHAR(100) ,
		TITLE_SR VARCHAR(100) ,
		IMPORTANT BOOLEAN,
		PUBLISHED_DATE DATE NOT NULL,
		PUBLISHED BOOLEAN NOT NULL,
		PHOTO BYTEA,
		CREATED_BY INTEGER NOT NULL,
		CREATED_DATE DATE NOT NULL,
		FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID)
	);

CREATE TABLE TIMPORT_STATUS (
	ID SERIAL PRIMARY KEY NOT NULL,
	IMPORT_TYPE VARCHAR(1) CHECK (IMPORT_TYPE IN ('C', 'P', 'L', 'B')),--C=COMPARTMENT/STAND, P=PLOTS, L=LINES, B=BIODIVERSITIES
	MUP_ID INTEGER,
	IS_ACTIVE BOOLEAN NOT NULL DEFAULT FALSE,
	STATUS VARCHAR(20),
	START_DATE TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(),
	START_USER INTEGER,
	END_DATE TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(),
	END_USER INTEGER,
	FOREIGN KEY (MUP_ID) REFERENCES TGIS_MU_PERIOD(ID),
	FOREIGN KEY (START_USER) REFERENCES THRM_EMPLOYEE(ID),
	FOREIGN KEY (END_USER) REFERENCES THRM_EMPLOYEE(ID)
	
);

CREATE TABLE TGIS_PLOTS
(
  ID SERIAL PRIMARY KEY NOT NULL,
  STAND_ID INTEGER NOT NULL,
  PLOT_NR INTEGER,
  VISITED SMALLINT,
  PLOTTYPE SMALLINT,
  SLOPE SMALLINT,
  LITTERCOV SMALLINT,
  AGE SMALLINT,
  CROWNCOV SMALLINT,
  C_STEMS1 SMALLINT,
  C_STEMS2 SMALLINT,
  C_DAMAGE SMALLINT,
  C_SUPRESS SMALLINT,
  C_DISTRIB SMALLINT,
  B_STEMS1 SMALLINT,
  B_STEMS2 SMALLINT,
  B_DAMAGE SMALLINT,
  B_SUPRESS SMALLINT,
  B_DISTRIB SMALLINT,
  TIME_ CHARACTER VARYING(12),
  DATE_ DATE,
  TAKSATOR CHARACTER VARYING(20),
  GEOM GEOMETRY,
  FOREIGN KEY (STAND_ID)  REFERENCES TGIS_STAND (ID),
  UNIQUE (STAND_ID, PLOT_NR)
);

CREATE TABLE TGIS_PLOT_TREE
(
  ID SERIAL PRIMARY KEY NOT NULL,
  PLOT_ID INTEGER,
  PLOT_NR INTEGER,
  TREEID INTEGER,
  HEALTH INTEGER,
  NAME CHARACTER VARYING(28),
  INCOMPLETE NUMERIC,
  HEIGHT INTEGER,
  INCREMENT NUMERIC,
  DIAMETER NUMERIC,
  TESTMARK NUMERIC,
  PLOTTREEID CHARACTER VARYING(12),
  SPECCODE INTEGER,
  TECHCODE INTEGER,
  FOREIGN KEY (PLOT_ID) REFERENCES TGIS_PLOTS (ID)
);

CREATE TABLE SHAPE_PLOTS
(
  OGC_FID SERIAL PRIMARY KEY NOT NULL,
  WKB_GEOMETRY GEOMETRY,
  PLOT_NR NUMERIC(9,0),
  COMP_NR NUMERIC(9,0),
  STAND_NR CHARACTER VARYING(3),
  VISITED NUMERIC(4,0),
  PLOTTYPE NUMERIC(4,0),
  SLOPE NUMERIC(4,0),
  LITTERCOV NUMERIC(4,0),
  AGE NUMERIC(4,0),
  CROWNCOV NUMERIC(4,0),
  C_STEMS1 NUMERIC(4,0),
  C_STEMS2 NUMERIC(4,0),
  C_DAMAGE NUMERIC(4,0),
  C_SUPRESS NUMERIC(4,0),
  C_DISTRIB NUMERIC(4,0),
  B_STEMS1 NUMERIC(4,0),
  B_STEMS2 NUMERIC(4,0),
  B_DAMAGE NUMERIC(4,0),
  B_SUPRESS NUMERIC(4,0),
  B_DISTRIB NUMERIC(4,0),
  TIME_ CHARACTER VARYING(12),
  DATE_ DATE,
  TAKSATOR CHARACTER VARYING(20)
);

CREATE TABLE SHAPE_PLOT_TREES
(
  OGC_FID SERIAL NOT NULL PRIMARY KEY,
  ODELJENJE NUMERIC(19,11),
  PLOTID NUMERIC(9,0),
  TREEID NUMERIC(9,0),
  HEALTH NUMERIC(9,0),
  NAME CHARACTER VARYING(28),
  INCOMPLETE NUMERIC(19,11),
  HEIGHT NUMERIC(9,0),
  INCREMENT NUMERIC(19,11),
  DIAMETER NUMERIC(19,11),
  TESTMARK NUMERIC(19,11),
  ODSEK CHARACTER VARYING(7),
  PLOTTREEID CHARACTER VARYING(12),
  SPECCODE NUMERIC(9,0),
  TECHCODE NUMERIC(9,0)
);

--FOREST Lease tables
CREATE TABLE TFAL_REQUEST_TYPE(
  ID SERIAL NOT NULL PRIMARY KEY,
  NAME_AL CHARACTER VARYING(100) NOT NULL,
  NAME_EN CHARACTER VARYING(100),
  NAME_SR CHARACTER VARYING(100),
  PRICE DOUBLE PRECISION,
  PERIOD_TYPE CHARACTER VARYING(2) NOT NULL,
  CREATED_DATE DATE NOT NULL,
  CREATED_BY INTEGER NOT NULL,
  FOREIGN KEY (CREATED_BY) REFERENCES THRM_EMPLOYEE(ID)
);

CREATE TABLE TFAL_REQUEST
(
  ID SERIAL NOT NULL PRIMARY KEY,
  COMPANY_ID INTEGER,
  PERSON_ID INTEGER,
  START_LEASE DATE NOT NULL,
  END_LEASE DATE NOT NULL,
  TFAL_REQUEST_TYPE_ID INTEGER NOT NULL,
  PRICE DOUBLE PRECISION NULL,
  LEASE_DATE TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
  ACTIVE BOOLEAN NOT NULL,
  CURRENT_STATUS_ID INTEGER, 
  CREATED_BY INTEGER NOT NULL,
  AREA DOUBLE PRECISION NOT NULL,
  THE_GEOM GEOMETRY NOT NULL,
  FOREIGN KEY (COMPANY_ID) REFERENCES TFIN_CONTRACTOR(ID),
  FOREIGN KEY (TFAL_REQUEST_TYPE_ID) REFERENCES TFAL_REQUEST_TYPE(ID),
  FOREIGN KEY (PERSON_ID) REFERENCES TPERSON(ID),
  FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID),
  CONSTRAINT ENFORCE_DIMS_THE_GEOM CHECK ((ST_NDIMS(THE_GEOM) = 2)),
  CONSTRAINT ENFORCE_GEOTYPE_THE_GEOM CHECK (GEOMETRYTYPE(THE_GEOM) = 'POLYGON'::TEXT OR
											(GEOMETRYTYPE(THE_GEOM) = 'MULTIPOLYGON'::TEXT) OR 
											(THE_GEOM IS NULL)),
  CONSTRAINT ENFORCE_SRID_THE_GEOM CHECK ((ST_SRID(THE_GEOM) = 900916))
);


CREATE TABLE TFAL_REQUEST_COORD
(
  ID SERIAL NOT NULL PRIMARY KEY,
  REQUEST_ID INTEGER NOT NULL,
  X DOUBLE PRECISION NOT NULL,
  Y DOUBLE PRECISION NOT NULL,
  Z DOUBLE PRECISION ,
  CREATED_DATE TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
  FOREIGN KEY (REQUEST_ID) REFERENCES TFAL_REQUEST(ID)
);

CREATE TABLE TFAL_REQUEST_STATUS
(
  ID SERIAL NOT NULL PRIMARY KEY,
  REQUEST_ID INTEGER NOT NULL,
  STATUS CHARACTER VARYING(6) NOT NULL,
  ACTIVE BOOLEAN NOT NULL DEFAULT FALSE,
  CREATED_DATE TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
  CHANGED_BY INTEGER NOT NULL,
  NOTE TEXT,
  FOREIGN KEY (REQUEST_ID) REFERENCES TFAL_REQUEST(ID),
  FOREIGN KEY (CHANGED_BY) REFERENCES TPERSON(ID)
);

ALTER TABLE TFAL_REQUEST ADD CONSTRAINT TFAL_REQUEST_STATUS_ID_FKEY FOREIGN KEY (CURRENT_STATUS_ID) REFERENCES TFAL_REQUEST_STATUS (ID);

CREATE TABLE TFAL_REQUEST_DOC
(
  ID SERIAL NOT NULL PRIMARY KEY,
  REQUEST_STATUS_ID INTEGER NOT NULL,
  DOC_NAME VARCHAR(100) NOT NULL,
  DOC_TYPE VARCHAR(10) NOT NULL,
  CREATE_DATE TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
  DOC BYTEA NOT NULL,
  NOTE VARCHAR(250),
  CREATED_BY INTEGER NOT NULL,
  FOREIGN KEY (REQUEST_STATUS_ID) REFERENCES TFAL_REQUEST_STATUS(ID),
  FOREIGN KEY (CREATED_BY) REFERENCES TPERSON(ID)
);

CREATE TABLE TFAL_CAD_PARCEL_REQUEST
(
  ID SERIAL NOT NULL PRIMARY KEY,
  REQUEST_ID INTEGER NOT NULL,
  CADASTRAL_ZONE VARCHAR(100) NOT NULL,
  PARCEL_NUM INTEGER NOT NULL,
  FOREIGN KEY (REQUEST_ID) REFERENCES TFAL_REQUEST(ID)
 ); 
 
 CREATE TABLE tgis_surfacedata
(
  id bigserial NOT NULL,
  slope raster,
  elevation raster,
  filename text,
  exposition raster,
  CONSTRAINT tgis_surfacedata_pkey PRIMARY KEY (id),
  CONSTRAINT enforce_height_expostion CHECK (st_height(exposition) = 201),
  CONSTRAINT enforce_height_slope CHECK (st_height(elevation) = 201),
  CONSTRAINT enforce_max_extent_expostion CHECK (st_coveredby(st_convexhull(expositiongeometry)),
  CONSTRAINT enforce_max_extent_rast CHECK (st_coveredby(st_convexhull(slopegeometry)),
  CONSTRAINT enforce_max_extent_slope CHECK (st_coveredby(st_convexhull(elevation), '010300002034BF0D0001000000FB000000A01A2F1DE2B65C41DD2406614ECB5141A01A2F1DE2B65C41DD24066149CB5141A01A2F1DE2B65C41DD24066161C75141A01A2F1DFAB25C41DD24066161C75141A01A2F1DF5B25C41DD24066161C75141A01A2F1D12AF5C41DD24066161C75141A01A2F1D0DAF5C41DD24066161C75141A01A2F1D25AB5C41DD24066161C75141A01A2F1D25AB5C41DD24066149CB5141A01A2F1D25AB5C41DD2406614ECB5141A01A2F1D25AB5C41DD24066131CF5141A01A2F1D3DA75C41DD24066131CF5141A01A2F1D3DA75C41DD24066119D35141A01A2F1D5AA35C41DD24066119D35141A01A2F1D5AA35C41DD24066131CF5141A01A2F1D729F5C41DD24066131CF5141A01A2F1D729F5C41DD24066149CB5141A01A2F1D8A9B5C41DD24066149CB5141A01A2F1D859B5C41DD24066149CB5141A01A2F1DA2975C41DD24066149CB5141A01A2F1DA2975C41DD24066161C75141A01A2F1DBA935C41DD24066161C75141A01A2F1DB5935C41DD24066161C75141A01A2F1DD28F5C41DD24066161C75141A01A2F1DD28F5C41DD24066179C35141A01A2F1DEA8B5C41DD24066179C35141A01A2F1DEA8B5C41DD24066196BF5141A01A2F1DEA8B5C41DD24066191BF5141A01A2F1DEA8B5C41DD240661AEBB5141A01A2F1DEA8B5C41DD240661A9BB5141A01A2F1DEA8B5C41DD240661C6B75141A01A2F1DEA8B5C41DD240661C1B75141A01A2F1DEA8B5C41DD240661DEB35141A01A2F1DEA8B5C41DD240661D9B35141A01A2F1DEA8B5C41DD240661F1AF5141A01A2F1D02885C41DD240661F1AF5141A01A2F1D02885C41DD24066109AC5141A01A2F1D1A845C41DD24066109AC5141A01A2F1D15845C41DD24066109AC5141A01A2F1D32805C41DD24066109AC5141A01A2F1D2D805C41DD24066109AC5141A01A2F1D4A7C5C41DD24066109AC5141A01A2F1D457C5C41DD24066109AC5141A01A2F1D5D785C41DD24066109AC5141A01A2F1D5D785C41DD240661F1AF5141A01A2F1D5D785C41DD240661F6AF5141A01A2F1D5D785C41DD240661D9B35141A01A2F1D5D785C41DD240661DEB35141A01A2F1D5D785C41DD240661C6B75141A01A2F1D457C5C41DD240661C6B75141A01A2F1D457C5C41DD240661A9BB5141A01A2F1D5D785C41DD240661A9BB5141A01A2F1D5D785C41DD24066191BF5141A01A2F1D5D785C41DD24066196BF5141A01A2F1D5D785C41DD24066179C35141A01A2F1D75745C41DD24066179C35141A01A2F1D75745C41DD24066161C75141A01A2F1D75745C41DD24066166C75141A01A2F1D75745C41DD24066149CB5141A01A2F1D75745C41DD2406614ECB5141A01A2F1D75745C41DD24066131CF5141A01A2F1D75745C41DD24066136CF5141A01A2F1D75745C41DD24066119D35141A01A2F1D8D705C41DD24066119D35141A01A2F1D8D705C41DD24066101D75141A01A2F1D8D705C41DD24066106D75141A01A2F1D8D705C41DD240661E9DA5141A01A2F1DAA6C5C41DD240661E9DA5141A01A2F1DA56C5C41DD240661E9DA5141A01A2F1DBD685C41DD240661E9DA5141A01A2F1DBD685C41DD240661D1DE5141A01A2F1DDA645C41DD240661D1DE5141A01A2F1DD5645C41DD240661D1DE5141A01A2F1DF2605C41DD240661D1DE5141A01A2F1DED605C41DD240661D1DE5141A01A2F1D055D5C41DD240661D1DE5141A01A2F1D055D5C41DD240661B9E25141A01A2F1D055D5C41DD240661BEE25141A01A2F1D055D5C41DD240661A1E65141A01A2F1D1D595C41DD240661A1E65141A01A2F1D1D595C41DD24066189EA5141A01A2F1D1D595C41DD2406618EEA5141A01A2F1D1D595C41DD24066171EE5141A01A2F1D1D595C41DD24066176EE5141A01A2F1D1D595C41DD24066159F25141A01A2F1D35555C41DD24066159F25141A01A2F1D35555C41DD24066141F65141A01A2F1D4D515C41DD24066141F65141A01A2F1D4D515C41DD24066129FA5141A01A2F1D4D515C41DD2406612EFA5141A01A2F1D4D515C41DD24066111FE5141A01A2F1D4D515C41DD24066116FE5141A01A2F1D4D515C41DD240661F9015241A01A2F1D4D515C41DD240661FE015241A01A2F1D4D515C41DD240661E1055241A01A2F1D654D5C41DD240661E1055241A01A2F1D654D5C41DD240661C9095241A01A2F1D654D5C41DD240661CE095241A01A2F1D654D5C41DD240661B10D5241A01A2F1D654D5C41DD240661B60D5241A01A2F1D654D5C41DD24066199115241A01A2F1D654D5C41DD2406619E115241A01A2F1D654D5C41DD24066186155241A01A2F1D4D515C41DD24066186155241A01A2F1D52515C41DD24066186155241A01A2F1D35555C41DD24066186155241A01A2F1D3A555C41DD24066186155241A01A2F1D22595C41DD24066186155241A01A2F1D22595C41DD2406619E115241A01A2F1D055D5C41DD2406619E115241A01A2F1D055D5C41DD24066181155241A01A2F1D055D5C41DD24066186155241A01A2F1D055D5C41DD2406616E195241A01A2F1DED605C41DD2406616E195241A01A2F1DF2605C41DD2406616E195241A01A2F1DD5645C41DD2406616E195241A01A2F1DDA645C41DD2406616E195241A01A2F1DBD685C41DD2406616E195241A01A2F1DBD685C41DD240661561D5241A01A2F1DA56C5C41DD240661561D5241A01A2F1DAA6C5C41DD240661561D5241A01A2F1D8D705C41DD240661561D5241A01A2F1D92705C41DD240661561D5241A01A2F1D75745C41DD240661561D5241A01A2F1D75745C41DD24066139215241A01A2F1D8D705C41DD24066139215241A01A2F1D8D705C41DD24066121255241A01A2F1D8D705C41DD24066126255241A01A2F1D8D705C41DD2406610E295241A01A2F1D75745C41DD2406610E295241A01A2F1D7A745C41DD2406610E295241A01A2F1D5D785C41DD2406610E295241A01A2F1D5D785C41DD240661F62C5241A01A2F1D457C5C41DD240661F62C5241A01A2F1D457C5C41DD240661DE305241A01A2F1D2D805C41DD240661DE305241A01A2F1D2D805C41DD240661C1345241A01A2F1D2D805C41DD240661C6345241A01A2F1D2D805C41DD240661A9385241A01A2F1D457C5C41DD240661A9385241A01A2F1D457C5C41DD240661913C5241A01A2F1D457C5C41DD240661963C5241A01A2F1D457C5C41DD24066179405241A01A2F1D5D785C41DD24066179405241A01A2F1D5D785C41DD24066166445241A01A2F1D457C5C41DD24066166445241A01A2F1D4A7C5C41DD24066166445241A01A2F1D2D805C41DD24066166445241A01A2F1D32805C41DD24066166445241A01A2F1D15845C41DD24066166445241A01A2F1D15845C41DD2406614E485241A01A2F1DFD875C41DD2406614E485241A01A2F1D02885C41DD2406614E485241A01A2F1DE58B5C41DD2406614E485241A01A2F1DEA8B5C41DD2406614E485241A01A2F1DCD8F5C41DD2406614E485241A01A2F1DD28F5C41DD2406614E485241A01A2F1DBA935C41DD2406614E485241A01A2F1DBA935C41DD24066166445241A01A2F1DBA935C41DD24066161445241A01A2F1DBA935C41DD2406617E405241A01A2F1DBA935C41DD24066179405241A01A2F1DBA935C41DD240661963C5241A01A2F1D9D975C41DD240661963C5241A01A2F1DA2975C41DD240661963C5241A01A2F1D859B5C41DD240661963C5241A01A2F1D8A9B5C41DD240661963C5241A01A2F1D6D9F5C41DD240661963C5241A01A2F1D729F5C41DD240661963C5241A01A2F1D55A35C41DD240661963C5241A01A2F1D5AA35C41DD240661963C5241A01A2F1D42A75C41DD240661963C5241A01A2F1D42A75C41DD240661AE385241A01A2F1D2AAB5C41DD240661AE385241A01A2F1D2AAB5C41DD240661C6345241A01A2F1D2AAB5C41DD240661C1345241A01A2F1D2AAB5C41DD240661DE305241A01A2F1D12AF5C41DD240661DE305241A01A2F1D12AF5C41DD240661F62C5241A01A2F1DFAB25C41DD240661F62C5241A01A2F1DFAB25C41DD2406610E295241A01A2F1DFAB25C41DD24066109295241A01A2F1DFAB25C41DD24066126255241A01A2F1DFAB25C41DD24066121255241A01A2F1DFAB25C41DD2406613E215241A01A2F1DDDB65C41DD2406613E215241A01A2F1DE2B65C41DD2406613E215241A01A2F1DCABA5C41DD2406613E215241A01A2F1DCABA5C41DD240661561D5241A01A2F1DADBE5C41DD240661561D5241A01A2F1DB2BE5C41DD240661561D5241A01A2F1D9AC25C41DD240661561D5241A01A2F1D9AC25C41DD24066169195241A01A2F1DB2BE5C41DD24066169195241A01A2F1DB2BE5C41DD24066186155241A01A2F1DB2BE5C41DD24066181155241A01A2F1DB2BE5C41DD2406619E115241A01A2F1D95C25C41DD2406619E115241A01A2F1D9AC25C41DD2406619E115241A01A2F1D7DC65C41DD2406619E115241A01A2F1D82C65C41DD2406619E115241A01A2F1D6ACA5C41DD2406619E115241A01A2F1D6ACA5C41DD240661B60D5241A01A2F1D4DCE5C41DD240661B60D5241A01A2F1D52CE5C41DD240661B60D5241A01A2F1D3AD25C41DD240661B60D5241A01A2F1D3AD25C41DD240661CE095241A01A2F1D1DD65C41DD240661CE095241A01A2F1D1DD65C41DD240661B60D5241A01A2F1D0ADA5C41DD240661B60D5241A01A2F1D0ADA5C41DD240661CE095241A01A2F1DF2DD5C41DD240661CE095241A01A2F1DF2DD5C41DD240661E6055241A01A2F1DF2DD5C41DD240661E1055241A01A2F1DF2DD5C41DD240661F9015241A01A2F1D0ADA5C41DD240661F9015241A01A2F1D0ADA5C41DD24066116FE5141A01A2F1D0ADA5C41DD24066111FE5141A01A2F1D0ADA5C41DD2406612EFA5141A01A2F1D0ADA5C41DD24066129FA5141A01A2F1D0ADA5C41DD24066141F65141A01A2F1D22D65C41DD24066141F65141A01A2F1D22D65C41DD24066159F25141A01A2F1D3AD25C41DD24066159F25141A01A2F1D3AD25C41DD24066176EE5141A01A2F1D3AD25C41DD24066171EE5141A01A2F1D3AD25C41DD2406618EEA5141A01A2F1D3AD25C41DD24066189EA5141A01A2F1D3AD25C41DD240661A1E65141A01A2F1D52CE5C41DD240661A1E65141A01A2F1D52CE5C41DD240661B9E25141A01A2F1D6ACA5C41DD240661B9E25141A01A2F1D6ACA5C41DD240661D6DE5141A01A2F1D52CE5C41DD240661D6DE5141A01A2F1D52CE5C41DD240661EEDA5141A01A2F1D52CE5C41DD240661E9DA5141A01A2F1D52CE5C41DD24066101D75141A01A2F1D6ACA5C41DD24066101D75141A01A2F1D65CA5C41DD24066101D75141A01A2F1D82C65C41DD24066101D75141A01A2F1D7DC65C41DD24066101D75141A01A2F1D9AC25C41DD24066101D75141A01A2F1D95C25C41DD24066101D75141A01A2F1DB2BE5C41DD24066101D75141A01A2F1DADBE5C41DD24066101D75141A01A2F1DCABA5C41DD24066101D75141A01A2F1DCABA5C41DD2406611ED35141A01A2F1DCABA5C41DD24066119D35141A01A2F1DCABA5C41DD24066131CF5141A01A2F1DE2B65C41DD24066131CF5141A01A2F1DE2B65C41DD2406614ECB5141'::geometry)),
  CONSTRAINT enforce_nodata_values_slope CHECK (_raster_constraint_nodata_values(elevation)::numeric(16,10)[] = '{NULL}'::numeric(16,10)[]),
  CONSTRAINT enforce_num_bands_expostion CHECK (st_numbands(exposition) = 1),
  CONSTRAINT enforce_num_bands_rast CHECK (st_numbands(slope) = 1),
  CONSTRAINT enforce_num_bands_slope CHECK (st_numbands(elevation) = 1),
  CONSTRAINT enforce_out_db_expostion CHECK (_raster_constraint_out_db(exposition) = '{f}'::boolean[]),
  CONSTRAINT enforce_out_db_rast CHECK (_raster_constraint_out_db(slope) = '{f}'::boolean[]),
  CONSTRAINT enforce_out_db_slope CHECK (_raster_constraint_out_db(elevation) = '{f}'::boolean[]),
  CONSTRAINT enforce_pixel_types_expostion CHECK (_raster_constraint_pixel_types(exposition) = '{32BF}'::text[]),
  CONSTRAINT enforce_pixel_types_slope CHECK (_raster_constraint_pixel_types(elevation) = '{16BSI}'::text[]),
  CONSTRAINT enforce_same_alignment_expostion CHECK (st_samealignment(exposition, '0100000000000000000000344000000000000034C0A01A2F1DBD685C41DD240661D6DE51410000000000000000000000000000000034BF0D0001000100'::raster)),
  CONSTRAINT enforce_same_alignment_rast CHECK (st_samealignment(slope, '0100000000000000000000344000000000000034C0A01A2F1DBD685C41DD240661D6DE51410000000000000000000000000000000034BF0D0001000100'::raster)),
  CONSTRAINT enforce_same_alignment_slope CHECK (st_samealignment(elevation, '0100000000000000000000344000000000000034C0A01A2F1DBD685C41DD240661D6DE51410000000000000000000000000000000034BF0D0001000100'::raster)),
  CONSTRAINT enforce_scalex_expostion CHECK (st_scalex(exposition)::numeric(16,10) = 20::numeric(16,10)),
  CONSTRAINT enforce_scalex_rast CHECK (st_scalex(slope)::numeric(16,10) = 20::numeric(16,10)),
  CONSTRAINT enforce_scalex_slope CHECK (st_scalex(elevation)::numeric(16,10) = 20::numeric(16,10)),
  CONSTRAINT enforce_scaley_expostion CHECK (st_scaley(exposition)::numeric(16,10) = (-20)::numeric(16,10)),
  CONSTRAINT enforce_scaley_rast CHECK (st_scaley(slope)::numeric(16,10) = (-20)::numeric(16,10)),
  CONSTRAINT enforce_scaley_slope CHECK (st_scaley(elevation)::numeric(16,10) = (-20)::numeric(16,10)),
  CONSTRAINT enforce_srid_expostion CHECK (st_srid(exposition) = 900916),
  CONSTRAINT enforce_srid_rast CHECK (st_srid(slope) = 900916),
  CONSTRAINT enforce_srid_slope CHECK (st_srid(elevation) = 900916),
  CONSTRAINT enforce_width_expostion CHECK (st_width(exposition) = 201),
  CONSTRAINT enforce_width_rast CHECK (st_width(slope) = 201),
  CONSTRAINT enforce_width_slope CHECK (st_width(elevation) = 201)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE tgis_surfacedata
  OWNER TO postgres;

-- Index: tgis_surfacedata_elev_gist

-- DROP INDEX tgis_surfacedata_elev_gist;

CREATE INDEX tgis_surfacedata_elev_gist
  ON tgis_surfacedata
  USING gist
  (st_convexhull(elevation));

-- Index: tgis_surfacedata_expostion_gist

-- DROP INDEX tgis_surfacedata_expostion_gist;

CREATE INDEX tgis_surfacedata_expostion_gist
  ON tgis_surfacedata
  USING gist
  (st_convexhull(exposition));

-- Index: tgis_surfacedata_slope_gist

-- DROP INDEX tgis_surfacedata_slope_gist;

CREATE INDEX tgis_surfacedata_slope_gist
  ON tgis_surfacedata
  USING gist
  (st_convexhull(slope));
-- DROP FUNCTION gen_private_request_no(integer, integer);

CREATE OR REPLACE FUNCTION gen_private_request_no(integer, integer)
  RETURNS SETOF integer AS
$BODY$

select  max(request_no) request_no from (
select a[1]::int as request_no, a[2]::int as request_year,a[3]::int as mun_id from (select regexp_split_to_array(request_no, '/') from tfrm_private_request) as dt(a)
) f
where request_year=$1 and mun_id=$2
group by request_year,mun_id

$BODY$
LANGUAGE sql VOLATILE
COST 100
ROWS 1000;
ALTER FUNCTION gen_private_request_no(integer, integer) OWNER TO postgres;

-- DROP FUNCTION gen_inspection_no(integer);
CREATE OR REPLACE FUNCTION gen_inspection_no(integer)
  RETURNS SETOF integer AS
$BODY$

select  max(inspection_no) request_no from (
select a[1]::int as inspection_no, a[2]::int as inspection_year from (select regexp_split_to_array(inspection_no, '/') from tfrm_inspection) as dt(a)
) f
where inspection_year=$1 
group by inspection_year

$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION gen_inspection_no(integer)
  OWNER TO postgres;


/*
Examples:
SELECT f_frm_fiskos_mig_comp(4, '65e6992f-bb59-4562-8f20-dc90ebc62ca9'); 
SELECT f_frm_fiskos_mig_comp(3, 'e41c168c-800f-4d87-b046-20327bdb9d8c'); 
DROP FUNCTION f_frm_fiskos_mig_data(id bigint, trx_id varchar(36));
*/
--select * from tfrm_fiskos_import
--select f_frm_fiskos_mig_comp(6,'b3d89b85-62f4-48ba-9739-13190476dbaa');
--select f_frm_fiskos_mig_stand(6,'b3d89b85-62f4-48ba-9739-13190476dbaa');

--f_frm_fiskos_mig_comp
CREATE OR REPLACE FUNCTION f_frm_fiskos_mig_comp(id bigint, trx_id varchar(36)) RETURNS BOOLEAN AS $$
BEGIN
	INSERT INTO TGIS_COMPARTMENT(ID,MU_ID,MUP_ID,MUN_ID,COMP_NR,THE_GEOM,THE_GEOM_AREA,THE_GEOM_LENGTH) 
	SELECT NEXTVAL('TGIS_COMPARTMENT_ID_SEQ'::REGCLASS), 
	f.mu_id,
	f.import_id,
	f.mun_id,
	CAST(F.COMP AS INT) AS COMP_NR, 
	NULL AS A, 
	NULL AS B, 
	NULL AS C 
	FROM TFRM_FISKOS_DATA AS f left join tfrm_fiskos_import as i on i.id = f.import_id  left join tgis_mu_period as mup on mup.trnx_id = i.trnx_id where i.id = $1 and i.isactive = 'Y' and i.trnx_id = $2 GROUP BY F.COMP,f.mu_id,f.import_id,f.mun_id ORDER BY F.mu_id ASC;

return true;

END;
$$
LANGUAGE 'plpgsql' VOLATILE;

--f_frm_fiskos_mig_stand
CREATE OR REPLACE FUNCTION f_frm_fiskos_mig_stand(id bigint, trx_id varchar(36)) RETURNS BOOLEAN AS $$
BEGIN
	INSERT INTO TGIS_STAND(
	ID, COMPARTMENT_ID, STAND_ID,MNGM_CLASS,
	FOREST_TYP, STOCK_LEVEL, ACCESS_TYPE, BASAL_AREA, ESTABILISHED_YEAR, STAND_HEIGHT,
	STAND_ACRES,PERIMETER,STAND_TYPE,CROWNCOVER,SLOPE,LITTERCOV,AGE,ORIGIN,CONIFER,CONIFER_BON,
	DECIDOUSE,DECIDOUSE_BON,TREES,VOLUME_M3HA,CONIFER_PERC,DECIDOUSE_PERC,
	PERC_0_30,PERC_30_50,PERC_50_70,PERC_70_100,INCR_PERC,M2_HA,DS_CON,DS_BRO,
	CL1_PERC_CON,CL2_PERC_CON,CL3_PERC_CON,CL4_PERC_CON,
	CL1_PERC_DEC,CL2_PERC_DEC,CL3_PERC_DEC,CL4_PERC_DEC,
	DAMAGE_PERC,ESTEMATE_VOLUME,ESTIMATE_TREES_PER_HA,HEIGHT_MEAN,
	TREE1,TREE2,TREE3,SURVEY_DATE,REMARKS,
	THE_GEOM,THE_GEOM_AREA,THE_GEOM_LENGTH
	)
	SELECT NEXTVAL('TGIS_STAND_ID_SEQ'::REGCLASS), (SELECT distinct C.ID FROM TGIS_COMPARTMENT AS C left join tgis_mu_period as mp on mp.id = C.mup_id WHERE C.COMP_NR = CAST(F.COMP AS INT) and mp.id = $1), CAST(F.STAND AS INT), 
	F.MNGM_CLASS_ID,'FOREST_TYP','STOCK_LEVEL','ACCESS_TYPE',F.STANDAREA,2014,F.HEIGHT_MEAN,
	20.00,20.00,'STAND_TYPE',F.CROWNCOVER,F.SLOPE,F.CROWNCOVER,F.AGE,F.ORIGIN,F.CONIFER,F.CONIFER_BON,
	F.DECIDOUSE,F.DECIDOUSE_BON,F.TREES,F.VOLUME_M3HA,F.CONIFER_PERC,F.DECIDOUSE_PERC,
	F.PERC_0_30,F.PERC_30_50,F.PERC_50_70,F.PERC_70_100,F.INCR_PERC,F.M2_HA,F.DS_CON,F.DS_BRO,
	F.CL1_PERC_CON,F.CL2_PERC_CON,F.CL3_PERC_CON,F.CL4_PERC_CON,
	F.CL1_PERC_DEC,F.CL2_PERC_DEC,F.CL3_PERC_DEC,F.CL4_PERC_DEC,
	F.DAMAGE_PERC,F.ESTEMATE_VOLUME,F.ESTIMATE_TREES_PER_HA,F.HEIGHT_MEAN,
	F.TREE1,F.TREE2,F.TREE3,F.SURVEY_DATE,NULL,
	NULL,NULL,NULL
	FROM TFRM_FISKOS_DATA AS F left join tfrm_fiskos_import as i on i.id = F.import_id  left join tgis_mu_period as mup on mup.trnx_id = i.trnx_id where i.id = $1 and i.isactive = 'Y' and i.trnx_id = $2;

return true;

END;
$$
LANGUAGE 'plpgsql' VOLATILE;


DROP SEQUENCE IF EXISTS KFIS_TDP_MNGMT_DOCUMENTNO; 
CREATE SEQUENCE KFIS_TDP_MNGMT_DOCUMENTNO START 1;

DROP SEQUENCE IF EXISTS KFIS_TPURCHASE_ORDER_PO_NUMBER; 
CREATE SEQUENCE KFIS_TPURCHASE_ORDER_PO_NUMBER START 1;

DROP SEQUENCE IF EXISTS KFIS_TREQUISITION_REQUISITION_NR; 
CREATE SEQUENCE KFIS_TREQUISITION_REQUISITION_NR START 1;

--Function to generate lawsuit number
-- DROP FUNCTION gen_lawsuit_no(integer,integer);
CREATE OR REPLACE FUNCTION gen_lawsuit_no(integer,integer)
  RETURNS SETOF integer AS
$BODY$

select  max(lawsuit_no) lawsuit_no from (
select a[1]::int as lawsuit_no,a[2]::int as law_suit_month ,a[3]::int as law_suit_year from (select regexp_split_to_array(lawsuit_no, '/') from tlegsec_lawsuit) as dt(a)
) f
where law_suit_month=$1  and  law_suit_year=$2 

group by law_suit_year,law_suit_month

$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION gen_lawsuit_no(integer,integer)
  OWNER TO postgres;

  
  
-- Function: gen_po_item_no(integer) generates item_number for PO item

-- DROP FUNCTION gen_po_item_no(integer);

CREATE OR REPLACE FUNCTION gen_po_item_no(integer)
  RETURNS SETOF integer AS
$BODY$

select  max(item_number) item_number from (
select a[1]::int as order_id, a[2]::int as requisition_id, a[3]::int as item_number from (select regexp_split_to_array(item_number, '/') from tpurchase_order_item) as dt(a)
) f
where order_id=$1
group by order_id

$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION gen_po_item_no(integer)
  OWNER TO postgres;
  
-- Function: gen_req_item_no(integer) generates item_number for requisition item

-- DROP FUNCTION gen_req_item_no(integer);

CREATE OR REPLACE FUNCTION gen_req_item_no(integer)
  RETURNS SETOF integer AS
$BODY$

select  max(item_number) item_number from (
select a[1]::int as requisition_id, a[2]::int as item_number from (select regexp_split_to_array(item_number, '/') from trequisition_item) as dt(a)
) f
where requisition_id=$1
group by requisition_id

$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION gen_req_item_no(integer)
  OWNER TO postgres;
  
  

CREATE OR REPLACE FUNCTION get_all_children_employee(use_parent INT4) RETURNS INT4[] AS $$
DECLARE
    process_parents INT4[] := ARRAY[ use_parent ];
    children INT4[] := '{}';
    new_children INT4[];
BEGIN
    WHILE ( array_upper( process_parents, 1 ) IS NOT NULL ) LOOP
        new_children := ARRAY( SELECT id FROM thrm_employee WHERE person_id = ANY( process_parents ) AND id <> ALL( children ) );
        children := children || new_children;
        process_parents := new_children;
    END LOOP;
    RETURN children;
END;
$$ LANGUAGE plpgsql;
ALTER FUNCTION get_all_children_employee(INT4)
  OWNER TO postgres;


CREATE OR REPLACE FUNCTION gen_days(IN text, IN text)
  RETURNS TABLE(day_name character varying, days double precision, dates timestamp with time zone) AS
$BODY$

select TO_CHAR( dates , 'DY' ) day_name, date_part('day',  dates) days, dates   from (
select  generate_series(date1, date2, '1 day')as dates from 
(select (y||'-'||m||d)::date date1, ((y||'-'||m||d)::date + '1 MONTH'::INTERVAL - '1 DAY'::INTERVAL)::date as date2 from (
select $1::text as y, $2::text as m, '-01'::text as d) g) h) d






$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION gen_days(text, text)
  OWNER TO postgres;
  
/*Function to show inspection tree grid*/  
CREATE OR REPLACE FUNCTION get_all_children_inspection(use_parent INT4) RETURNS INT4[] AS $$
DECLARE
    process_parents INT4[] := ARRAY[ use_parent ];
    children INT4[] := '{}';
    new_children INT4[];
BEGIN
    WHILE ( array_upper( process_parents, 1 ) IS NOT NULL ) LOOP
        new_children := ARRAY( SELECT id FROM tfrm_inspection WHERE parent_id = ANY( process_parents ) AND id <> ALL( children ) );
        children := children || new_children;
        process_parents := new_children;
    END LOOP;
    RETURN children;
END;
$$ LANGUAGE plpgsql;

/*Check if management is inside borders of Kosova*/
CREATE OR REPLACE FUNCTION get_shape_out_state()
  RETURNS TABLE(stand_id character varying(10),  area_out numeric, geom_out geometry) AS
$BODY$

select a.stand_id, round(st_area(ST_Difference(a.wkb_geometry, b.the_geom))::numeric,2) area_out, ST_Difference(a.wkb_geometry, b.the_geom) geom_out   from shape_stand a join tgis_state b on st_within(a.wkb_geometry, b.the_geom ) is false


$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_shape_out_state()
  OWNER TO postgres;
  
-- DROP FUNCTION get_stand_id(character);

CREATE OR REPLACE FUNCTION get_stand_id(IN isactive character)
  RETURNS TABLE(id bigint, stand_id character varying, stand_nr character varying, compartment_id integer, comp_nr character varying, mup_id integer, isactive character, mu_id integer, mu_code character varying, region_id integer, region_code character varying) AS
$BODY$

select s.id, s.stand_id, s.stand_nr, s.compartment_id, c.comp_nr, c.mup_id, mup.isactive, mup.mu_id, mu.mu_code, mu.region_id, r.code as region_code from tgis_stand s 
	left join tgis_compartment c on s.compartment_id=c.id 
	left join tgis_mu_period mup on c.mup_id=mup.id
	left join tgis_management_unit mu on mu.id=mup.mu_id
	left join tgis_region r on r.id=mu.region_id
	where mup.isactive =$1;

$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_stand_id(character)
  OWNER TO postgres;  

  
CREATE OR REPLACE FUNCTION get_stand_id(
    IN isactive character,
    IN code character varying)
  RETURNS TABLE(id bigint, stand_id character varying, stand_nr character varying, compartment_id integer, comp_nr character varying, mup_id integer, isactive character, mu_id integer, mu_code character varying, region_id integer, region_code character varying) AS
$BODY$

select s.id, s.stand_id, s.stand_nr, s.compartment_id, c.comp_nr, c.mup_id, mup.isactive, mup.mu_id, mu.mu_code, mu.region_id, r.code as region_code from tgis_stand s 
	left join tgis_compartment c on s.compartment_id=c.id 
	left join tgis_mu_period mup on c.mup_id=mup.id
	left join tgis_management_unit mu on mu.id=mup.mu_id
	left join tgis_region r on r.id=mu.region_id
	where mup.isactive =$1 and r.code =$2 ;

$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_stand_id(character, character varying)
  OWNER TO postgres;
COMMENT ON FUNCTION get_stand_id(character, character varying) IS 'param: isactive, region_code';


-- Function: get_stand_id(character, character varying, character varying)

-- DROP FUNCTION get_stand_id(character, character varying, character varying);

CREATE OR REPLACE FUNCTION get_stand_id(
    IN isactive character,
    IN code character varying,
    IN mu_code character varying)
  RETURNS TABLE(id bigint, stand_id character varying, stand_nr character varying, compartment_id integer, comp_nr character varying, mup_id integer, isactive character, mu_id integer, mu_code character varying, region_id integer, region_code character varying) AS
$BODY$

select s.id, s.stand_id, s.stand_nr, s.compartment_id, c.comp_nr, c.mup_id, mup.isactive, mup.mu_id, mu.mu_code, mu.region_id, r.code as region_code from tgis_stand s 
	left join tgis_compartment c on s.compartment_id=c.id 
	left join tgis_mu_period mup on c.mup_id=mup.id
	left join tgis_management_unit mu on mu.id=mup.mu_id
	left join tgis_region r on r.id=mu.region_id
	where mup.isactive =$1 and r.code =$2 and mu.mu_code=$3;

$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_stand_id(character, character varying, character varying)
  OWNER TO postgres;
COMMENT ON FUNCTION get_stand_id(character, character varying, character varying) IS 'param: isactive, region_code, mu_code';


-- Function: get_stand_id(character, character varying, character varying, character varying)

-- DROP FUNCTION get_stand_id(character, character varying, character varying, character varying);

CREATE OR REPLACE FUNCTION get_stand_id(
    IN isactive character,
    IN code character varying,
    IN mu_code character varying,
    IN comp_nr character varying)
  RETURNS TABLE(id bigint, stand_id character varying, stand_nr character varying, compartment_id integer, comp_nr character varying, mup_id integer, isactive character, mu_id integer, mu_code character varying, region_id integer, region_code character varying) AS
$BODY$

select s.id, s.stand_id, s.stand_nr, s.compartment_id, c.comp_nr, c.mup_id, mup.isactive, mup.mu_id, mu.mu_code, mu.region_id, r.code as region_code from tgis_stand s 
	left join tgis_compartment c on s.compartment_id=c.id 
	left join tgis_mu_period mup on c.mup_id=mup.id
	left join tgis_management_unit mu on mu.id=mup.mu_id
	left join tgis_region r on r.id=mu.region_id
	where mup.isactive =$1 and r.code =$2 and mu.mu_code=$3 and c.comp_nr=$4

$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_stand_id(character, character varying, character varying, character varying)
  OWNER TO postgres;
COMMENT ON FUNCTION get_stand_id(character, character varying, character varying, character varying) IS 'param: isactive, region_code, mu_code, comp_nr';



-- Function: get_stand_id(character, character varying, character varying, character varying, character varying)

-- DROP FUNCTION get_stand_id(character, character varying, character varying, character varying, character varying);

CREATE OR REPLACE FUNCTION get_stand_id(
    IN isactive character,
    IN code character varying,
    IN mu_code character varying,
    IN comp_nr character varying,
    IN stand_nr character varying)
  RETURNS TABLE(id bigint, stand_id character varying, stand_nr character varying, compartment_id integer, comp_nr character varying, mup_id integer, isactive character, mu_id integer, mu_code character varying, region_id integer, region_code character varying) AS
$BODY$

select s.id, s.stand_id, s.stand_nr, s.compartment_id, c.comp_nr, c.mup_id, mup.isactive, mup.mu_id, mu.mu_code, mu.region_id, r.code as region_code from tgis_stand s 
	left join tgis_compartment c on s.compartment_id=c.id 
	left join tgis_mu_period mup on c.mup_id=mup.id
	left join tgis_management_unit mu on mu.id=mup.mu_id
	left join tgis_region r on r.id=mu.region_id
	where mup.isactive =$1 and r.code =$2 and mu.mu_code=$3 and c.comp_nr=$4 and stand_nr=$5;

$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_stand_id(character, character varying, character varying, character varying, character varying)
  OWNER TO postgres;
COMMENT ON FUNCTION get_stand_id(character, character varying, character varying, character varying, character varying) IS 'param: isactive, region_code, mu_code, comp_nr, stand_nr';

  
/*Check if stands overlap each other*/  
-- DROP FUNCTION get_overlap_shape_stand();
CREATE OR REPLACE FUNCTION get_overlap_shape_stand()
  RETURNS TABLE(fmr character varying, mu character varying, comp character varying, stand character varying, stand_id character varying, comp_b character varying, stand_b character varying, stand_id_b character varying, count_part integer, area numeric, the_geom geometry) AS
$BODY$

 SELECT a.fmr, a.mu,  a.comp, a.stand, a.stand_id, 
    b.comp comp_b, b.stand stand_b, b.stand_id AS stand_id_b, 
    ST_NumGeometries(st_collectionextract(st_intersection(a.wkb_geometry, b.wkb_geometry), 3)) as count_part,
    round(st_area(st_intersection(a.wkb_geometry, b.wkb_geometry))::numeric,2) AS area,
    st_collectionextract(st_setsrid(st_intersection(a.wkb_geometry, b.wkb_geometry), 900916), 3) AS the_geom
   FROM shape_stand a
   JOIN shape_stand b ON st_overlaps(a.wkb_geometry, b.wkb_geometry)
  WHERE a.stand_id::text < b.stand_id::text and st_area(st_intersection(a.wkb_geometry, b.wkb_geometry))>0.9
  order by a.stand_id;

$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_overlap_shape_stand()
  OWNER TO postgres;
COMMENT ON FUNCTION get_stand_id(character) IS 'param: isactive';
  
  
  
  
  
/*Check if stands overlap stands in DB*/    
-- DROP FUNCTION get_overlap_shape_gis();
CREATE OR REPLACE FUNCTION get_overlap_shape_gis()
  RETURNS TABLE(fmr character varying, mu character varying, comp character varying, stand character varying, stand_id character varying, the_geom_a geometry, fmr_b character varying, mu_b character varying, comp_b character varying, stand_b character varying, stand_id_b character varying, the_geom_b geometry, count_part integer, area numeric, perimeter numeric, the_geom geometry) AS
$BODY$

 SELECT a.fmr, a.mu,  a.comp, a.stand, a.stand_id, a.wkb_geometry,
    substring(b.stand_id from 1 for 2) fmr_b,
    substring(b.stand_id from 3 for 2) mu_b,
    substring(b.stand_id from 5 for 3) comp_b,
 b.stand_nr stand_b, b.stand_id AS stand_id_b, b.the_geom,
    ST_NumGeometries(st_collectionextract(st_intersection(a.wkb_geometry, b.the_geom), 3)) as count_part,
    round(st_area(st_intersection(a.wkb_geometry, b.the_geom))::numeric,2) AS area,
    round(ST_Perimeter(st_intersection(a.wkb_geometry, b.the_geom))::numeric,2) AS perimeter,
    st_collectionextract(st_intersection(a.wkb_geometry, b.the_geom), 3) AS the_geom
   FROM shape_stand a
   JOIN (select id, stand_id, stand_nr, the_geom from tgis_stand where id in (select id from get_stand_id('Y'))) b ON st_overlaps(a.wkb_geometry, b.the_geom)
where st_area(st_intersection(a.wkb_geometry, b.the_geom))>0.9
  order by a.stand_id;

$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_overlap_shape_gis()
  OWNER TO postgres;  
  
  

  
-- View: shape_fields_control

-- DROP VIEW shape_fields_control;

CREATE OR REPLACE VIEW shape_fields_control AS 
        (        (        (        (        (        (        (        (        (        (         SELECT shape_stand.stand_id,
                                                                                            'mc'::text AS field,
                                                                                            shape_stand.mc AS value
                                                                                           FROM shape_stand
                                                                                          WHERE NOT (shape_stand.mc IN ( SELECT ttextdomain.domkey::numeric AS mc
                                                                                                   FROM ttextdomain
                                                                                                  WHERE ttextdomain.domname::text = 'MNGMCLASS'::text))
                                                                                UNION ALL
                                                                                         SELECT shape_stand.stand_id,
                                                                                            'access'::text AS field,
                                                                                            shape_stand.access AS value
                                                                                           FROM shape_stand
                                                                                          WHERE NOT (shape_stand.access IN ( SELECT ttextdomain.domkey::numeric AS domkey
                                                                                                   FROM ttextdomain
                                                                                                  WHERE ttextdomain.domname::text = 'ACCESSIBLE'::text)))
                                                                        UNION ALL
                                                                                 SELECT shape_stand.stand_id,
                                                                                    'stemsha'::text AS field,
                                                                                    shape_stand.stemsha AS value
                                                                                   FROM shape_stand
                                                                                  WHERE shape_stand.mc < 5000::numeric AND shape_stand.no_plots = 0::numeric AND NOT (shape_stand.stemsha IN ( SELECT ttextdomain.domkey::numeric AS domkey
                                                                                           FROM ttextdomain
                                                                                          WHERE ttextdomain.domname::text = 'ESTIMATETREES'::text)))
                                                                UNION ALL
                                                                         SELECT shape_stand.stand_id,
                                                                            'origin'::text AS field,
                                                                            shape_stand.origin AS value
                                                                           FROM shape_stand
                                                                          WHERE NOT (shape_stand.origin IN ( SELECT ttextdomain.domkey::numeric AS domkey
                                                                                   FROM ttextdomain
                                                                                  WHERE ttextdomain.domname::text = 'FORESTORIGIN'::text)))
                                                        UNION ALL
                                                                 SELECT shape_stand.stand_id,
                                                                    'no_plots'::text AS field,
                                                                    shape_stand.no_plots AS value
                                                                   FROM shape_stand
                                                                  WHERE NOT ((( SELECT
                                                                                CASE
                                                                                    WHEN shape_stand.no_plots > 0::numeric AND shape_stand.mc > 5000::numeric THEN 3
                                                                                    ELSE
                                                                                    CASE
                                                                                        WHEN shape_stand.mc > 5000::numeric AND shape_stand.mc < 7000::numeric THEN 2
                                                                                        ELSE
                                                                                        CASE
                                                                                            WHEN shape_stand.no_plots > 0::numeric AND shape_stand.mc < 5000::numeric THEN 0
                                                                                            ELSE 1
                                                                                        END
                                                                                    END
                                                                                END AS "case"))::numeric IN ( SELECT ttextdomain.domkey::numeric AS domkey
                                                                           FROM ttextdomain
                                                                          WHERE ttextdomain.domname::text = 'STANDTYPE'::text)))
                                                UNION ALL
                                                         SELECT shape_stand.stand_id,
                                                            'm3est'::text AS field,
                                                            shape_stand.m3est AS value
                                                           FROM shape_stand
                                                          WHERE NOT (shape_stand.m3est IN ( SELECT tfrm_estimate_volume.code
                                                                   FROM tfrm_estimate_volume)))
                                        UNION ALL
                                                 SELECT shape_stand.stand_id,
                                                    'youngtree1'::text AS field,
                                                    shape_stand.youngtree1 AS value
                                                   FROM shape_stand
                                                  WHERE shape_stand.youngtree1 <> 0::numeric AND NOT (shape_stand.youngtree1 IN ( SELECT tfrm_tree_species.code
                                                           FROM tfrm_tree_species)))
                                UNION ALL
                                         SELECT shape_stand.stand_id,
                                            'youngtree2'::text AS field,
                                            shape_stand.youngtree2 AS value
                                           FROM shape_stand
                                          WHERE shape_stand.youngtree2 <> 0::numeric AND NOT (shape_stand.youngtree2 IN ( SELECT tfrm_tree_species.code
                                                   FROM tfrm_tree_species)))
                        UNION ALL
                                 SELECT shape_stand.stand_id,
                                    'youngtree3'::text AS field,
                                    shape_stand.youngtree3 AS value
                                   FROM shape_stand
                                  WHERE shape_stand.youngtree3 <> 0::numeric AND NOT (shape_stand.youngtree3 IN ( SELECT tfrm_tree_species.code
                                           FROM tfrm_tree_species)))
                UNION ALL
                         SELECT shape_stand.stand_id,
                            'domspc'::text AS field,
                            shape_stand.domspc AS value
                           FROM shape_stand
                          WHERE shape_stand.domspc <> 0::numeric AND NOT (shape_stand.domspc IN ( SELECT tfrm_tree_species.code
                                   FROM tfrm_tree_species)))
        UNION ALL
                 SELECT shape_stand.stand_id,
                    'domspb'::text AS field,
                    shape_stand.domspb AS value
                   FROM shape_stand
                  WHERE shape_stand.domspb <> 0::numeric AND NOT (shape_stand.domspb IN ( SELECT tfrm_tree_species.code
                           FROM tfrm_tree_species)))
UNION ALL
         SELECT shape_stand.stand_id,
            'treatm'::text AS field,
            shape_stand.treatm AS value
           FROM shape_stand
          WHERE shape_stand.treatm <> 99::numeric AND NOT (shape_stand.treatm IN ( SELECT tshape_treatment_name.code
                   FROM tshape_treatment_name));

ALTER TABLE shape_fields_control
  OWNER TO postgres;


  
/**Function to migrate from shape stand to: tgis_mu_period, tgis_compartment and tgis_stand*/  

CREATE OR REPLACE FUNCTION f_frm_migrate_shape_stand(user_id bigint, from_date date, to_date date) RETURNS BOOLEAN AS $$
BEGIN

--tgis_mu_period insert

update tgis_mu_period set isactive ='N', updated_date = now(), note = 'Deaktivizimi behet automatikisht nga sistemi, me ' || now() || '',updated_by=user_id
where tgis_mu_period.id=(select distinct t.mup_id from (
select mup.id as mup_id, mup.isactive, mu.id as mu_id, mu.mu_code, r.id as region_id, r.code as region_code from tgis_mu_period mup left join tgis_management_unit mu on mup.mu_id=mu.id
				 left join tgis_region r on mu.region_id=r.id) t , shape_stand
				 where  t.region_code = shape_stand.fmr and t.mu_code=shape_stand.mu and t.isactive='Y');

 
INSERT INTO tgis_mu_period(
            mu_id,  trnx_id,the_geom, isactive, start_date,end_date,created_by,created_date,updated_by,updated_date,note)
    (select  (select mu.id from tgis_management_unit mu where mu.mu_code=shape_stand.mu and mu.region_id=(select id from tgis_region r where r.code=shape_stand.fmr)),'trnx_id' , 
ST_Union(wkb_geometry) as geom,'Y',  from_date,to_date,user_id,now(),user_id,now(),NULL from shape_stand
group by fmr, mu);

--tgis_compartment insert

INSERT INTO tgis_compartment(
             mu_id, mup_id, mun_id, comp_nr,  the_geom)
(select (select mu.id from tgis_management_unit mu where mu.mu_code=shape_stand.mu and mu.region_id=(select id from tgis_region r where r.code=shape_stand.fmr)), 
(select id from tgis_mu_period mup where shape_stand.mu=(select mu.mu_code from tgis_management_unit mu where mu.id=mup.mu_id and mu.region_id=(select id from tgis_region r where r.code=shape_stand.fmr) and mup.isactive='Y')),
 (select id from tgis_cadastral_municipality where tgis_cadastral_municipality.code=shape_stand.munici), comp,  ST_Union(wkb_geometry) as geom from shape_stand
group by fmr, mu, 1, munici, comp
order by comp);


--tgis_stand insert

INSERT INTO tgis_stand( compartment_id, stand_id,stand_nr, mngm_class, no_plots, minehazard, layers, stand_type, access_type, basal_area, crowncover, slope, littercov, age, origin, conifer, conifer_bon, 
decidouse, decidouse_bon, trees, 
	volume_m3ha, conifer_perc, decidouse_perc, perc_0_30, perc_30_50, perc_50_70, perc_70_100, incr_perc, m2_ha, ds_con, ds_bro, cl1_perc_con, cl2_perc_con, 
	cl3_perc_con, cl4_perc_con, cl1_perc_dec, cl2_perc_dec, cl3_perc_dec, cl4_perc_dec, damage_perc, estemate_volume, estimate_trees_per_ha, height_mean, 
	tree1, tree2, tree3, the_geom)
(SELECT (select gc.comp_id from (select c.id comp_id, c.comp_nr, mup.id as mup_id, mup.isactive, mu.id as mu_id, mu.mu_code, mu.region_id , r.code as region_code from tgis_compartment c 
	left join tgis_mu_period mup on c.mup_id=mup.id
	left join tgis_management_unit  mu on mup.mu_id=mu.id
	left join tgis_region r on mu.region_id = r.id) gc  where gc.region_code = shape_stand.fmr and gc.mu_code=shape_stand.mu and gc.comp_nr=shape_stand.comp and gc.isactive='Y') as comp, stand_id,stand, mc, 
case when no_plots>0 then no_plots else null end as no_plots, 
minehazard, layers, 
case when mc > 5000 AND mc <7000 then 2 else case when no_plots > 0 then 0 else 1 end end stand_type,
"access", standarea,  
case when crowncover>0 then crowncover else null end as crowncover, case when slope>0 then slope else null end as slope, case when littercov>0 then littercov else null end as littercov, 
age, origin, 
case when domspc>0 then (select id from tfrm_tree_species s where s.code=shape_stand.domspc) else null end as domspc ,case when consi>0 then consi else null end as consi, case when domspb>0 then (select id from tfrm_tree_species s where s.code=shape_stand.domspb) else null end as domspb, 
case when brosi>0 then brosi else null end as brosi, case when trees>0 then trees else null end as trees, case when m3tot_ha>0 then m3tot_ha else null end as m3tot_ha, 

	case when m3tot_ha >0 then round((m3conha/m3tot_ha)*100,1) else null end conifer_perc, case when m3tot_ha >0 then round((m3broha/m3tot_ha)*100,1) else null end decidouse_perc, 
	case when m3tot_ha >0 then round((m3_0_30/m3tot_ha)*100,1) else null end perc_0_30, case when m3tot_ha >0 then round((m3_30_50/m3tot_ha)*100,1) else null end perc_30_50, 
	case when m3tot_ha >0 then round((m3_50_70/m3tot_ha)*100,1) else null end perc_50_70, case when m3tot_ha >0 then round((m3_70_/m3tot_ha)*100,1) else null end perc_70_100, 
	case when m3tot_ha >0 then round((incrtot_ha/m3tot_ha)*100,1) else null end incr_perc,
case when m2_ha>0 then m2_ha else null end m2_ha, case when ds_con>0 then ds_con else null end as ds_con, case when ds_bro>0 then ds_bro else null end as ds_bro,
case when cl1_con>0 then cl1_con else null end as cl1_con, case when cl2_con>0 then cl2_con else null end as cl2_con, case when cl3_con>0 then cl3_con else null end cl3_con, 
case when cl4_con>0 then cl4_con else null end as cl4_con, case when cl1_bro>0 then cl1_bro else null end as cl1_bro, case when cl2_bro>0 then cl2_bro else null end cl2_bro, 
case when cl3_bro>0 then cl3_bro else null end as cl3_bro, case when cl4_bro>0 then cl4_bro else null end as cl4_bro, case when damageperc>0 then damageperc else null end, 
m3est, stemsha, heightmean, (select id from tfrm_tree_species ts where ts.code=youngtree1), (select id from tfrm_tree_species ts where ts.code=youngtree2), 
(select id from tfrm_tree_species ts where ts.code=youngtree3), st_setsrid(wkb_geometry,900916) 
FROM shape_stand);


--tshape_stand_treatment insert
insert into tshape_stand_treatment( treatment_id, stand_id, treatment_area_perc)
(
	select (select id from tshape_treatment_name tn where tn.code=shape_stand.treatm),
	(select id from get_stand_id('Y', fmr,mu,comp,stand)),
	(round(( treatmarea )/st_area(( wkb_geometry ))::numeric,0)) from shape_stand where treatm!=99
	group by fmr, mu, 1, munici, comp,stand,treatmarea,wkb_geometry
	order by comp
);

--update import status
UPDATE timport_status
   SET is_active=FALSE, status='Success', end_date=now(), end_user=user_id,
   mup_id=(select distinct t.mup_id from (select mup.id as mup_id, mup.isactive, mu.id as mu_id, mu.mu_code, r.id as region_id, r.code as region_code 
	from tgis_mu_period mup left join tgis_management_unit mu on mup.mu_id=mu.id left join tgis_region r on mu.region_id=r.id) t , shape_stand
	where  t.region_code = shape_stand.fmr and t.mu_code=shape_stand.mu and t.isactive='Y')
    WHERE is_active=TRUE and import_type='C';

return true;

END;
$$
LANGUAGE 'plpgsql' VOLATILE;



-- Function: get_plot_out_stand(character varying, character varying)

-- DROP FUNCTION get_plot_out_stand(character varying, character varying);

CREATE OR REPLACE FUNCTION get_plot_out_stand(IN region_code character varying, IN mu_code character varying)
  RETURNS TABLE(plot_nr character varying, comp_nr character varying, stand_nr character varying, area_out numeric, geom_out geometry) AS
$BODY$

select a.plot_nr::text,comp_nr::text,a.stand_nr::text, round(st_area(ST_Difference(a.wkb_geometry, b.the_geom))::numeric,2) area_out, ST_Difference(a.wkb_geometry, b.the_geom) geom_out   from shape_plots a 
left join tgis_stand b on b.stand_nr=a.stand_nr where b.id=(select id from get_stand_id('Y',region_code,mu_code,substring((1000*a.comp_nr)::text,2,3),a.stand_nr)) and st_within(a.wkb_geometry, b.the_geom ) is false


$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_plot_out_stand(character varying, character varying)
  OWNER TO postgres;
COMMENT ON FUNCTION get_plot_out_stand(character varying, character varying) IS 'param: region_code, mu_code';



-- Function: get_plot_with_no_stand(character varying, character varying)

-- DROP FUNCTION get_plot_with_no_stand(character varying, character varying);

CREATE OR REPLACE FUNCTION get_plot_with_no_stand(IN region_code character varying, IN mu_code character varying)
  RETURNS TABLE(plot_nr character varying, comp_nr character varying, stand_nr character varying) AS
$BODY$

select distinct a.plot_nr::text, a.comp_nr::text,a.stand_nr::text from shape_plots a 
left join tgis_stand b on b.stand_nr=a.stand_nr where a.stand_nr not in (select stand_nr from get_stand_id('Y',region_code,mu_code,substring((1000+a.comp_nr)::text,2,3),a.stand_nr))


$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_plot_with_no_stand(character varying, character varying)
  OWNER TO postgres;
COMMENT ON FUNCTION get_plot_with_no_stand(character varying, character varying) IS 'param: region_code, mu_code';


-- Function: f_frm_migrate_shape_plots(bigint, character varying, character varying)

-- DROP FUNCTION f_frm_migrate_shape_plots(bigint, character varying, character varying);

CREATE OR REPLACE FUNCTION f_frm_migrate_shape_plots(user_id bigint, reg_code character varying, mun_code character varying)
  RETURNS boolean AS
$BODY$
BEGIN

--insert plots
INSERT INTO tgis_plots(stand_id, plot_nr, visited, plottype, slope, littercov, age, crowncov, c_stems1, c_stems2, c_damage, c_supress, c_distrib, 
            b_stems1, b_stems2, b_damage, b_supress, b_distrib, time_, date_, taksator, geom)
(select (select id from get_stand_id('Y',reg_code,mun_code,substring((1000+p.comp_nr)::text,2,3),p.stand_nr)),p.plot_nr, p.visited, p.plottype, p.slope, p.littercov, p.age, p.crowncov, p.c_stems1, p.c_stems2, p.c_damage, p.c_supress, p.c_distrib, 
            p.b_stems1, p.b_stems2, p.b_damage, p.b_supress, p.b_distrib, p.time_, p.date_, p.taksator,p.wkb_geometry from shape_plots p);

--insert plot trees
INSERT INTO tgis_plot_tree( plot_id, plot_nr, treeid, health, name, incomplete, height, increment, diameter, testmark, plottreeid, speccode, techcode)
(select (select id from tgis_plots p where p.id=(select  id from get_plot_id('Y',reg_code,mun_code,pt.plotid::text))), (select plot_nr from tgis_plots p where p.id=(select  id from get_plot_id('Y',reg_code,mun_code,pt.plotid::text))),
treeid,health, name, incomplete,height,
	increment, diameter, testmark, plottreeid, speccode, techcode from shape_plot_trees pt) ;
	
--update import status
UPDATE timport_status
   SET is_active=FALSE, status='Success', end_date=now(), end_user=user_id,
   mup_id=(select distinct t.mup_id from (select mup.id as mup_id, mup.isactive, mu.id as mu_id, mu.mu_code, r.id as region_id, r.code as region_code 
	from tgis_mu_period mup left join tgis_management_unit mu on mup.mu_id=mu.id left join tgis_region r on mu.region_id=r.id) t 
	where  t.region_code = reg_code and t.mu_code=mun_code and t.isactive='Y')
    WHERE is_active=TRUE and import_type='P';

return true;

END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION f_frm_migrate_shape_plots(bigint, character varying, character varying)
  OWNER TO postgres;
  
  
-- Function: get_plot_trees_without_plot()

-- DROP FUNCTION get_plot_trees_without_plot();

CREATE OR REPLACE FUNCTION get_plot_trees_without_plot()
  RETURNS TABLE(plotid character varying, treeid character varying, name character varying) AS
$BODY$

select t.plotid::text,t.treeid::text,t.name::text from shape_plot_trees t where t.plotid not in (select plot_nr from shape_plots);


$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_plot_trees_without_plot()
  OWNER TO postgres;  
  
  
  
  
  -- Function: get_plot_id(character, character varying, character varying, character varying)

-- DROP FUNCTION get_plot_id(character, character varying, character varying, character varying);

CREATE OR REPLACE FUNCTION get_plot_id(IN isactive character, IN code character varying, IN mu_code character varying, IN plot_nr character varying)
  RETURNS TABLE(id integer, plot_nr character varying, stand_id integer,stand_nr character varying,comp_nr character varying) AS
$BODY$

select distinct p.id, p.plot_nr::text, p.stand_id,s.stand_nr::text,c.comp_nr::text from tgis_plots p
	left join tgis_stand s on p.stand_id=s.id
	left join tgis_compartment c on s.compartment_id=c.id 
	left join tgis_mu_period mup on c.mup_id=mup.id
	left join tgis_management_unit mu on mu.id=mup.mu_id
	left join tgis_region r on r.id=mu.region_id
	where mup.isactive =$1 and r.code =$2 and mu.mu_code=$3 and  p.plot_nr::text=$4;
$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_plot_id(character, character varying, character varying, character varying)
  OWNER TO postgres;
COMMENT ON FUNCTION get_plot_id(character, character varying, character varying, character varying) IS 'param: isactive, region_code, mu_code, plot_nr';



-- Function: f_frm_migrate_shape_lines(bigint, integer, integer)

-- DROP FUNCTION f_frm_migrate_shape_lines(bigint, integer, integer);

CREATE OR REPLACE FUNCTION f_frm_migrate_shape_lines(
    user_id bigint,
    mun_id integer,
    mu_id integer)
  RETURNS boolean AS
$BODY$
BEGIN

INSERT INTO tgis_road( mun_id, mu_id, road_name, road_type, access_type, quality_cl, 
            maintenanc, last_activity_year, road_length, created_date, created_by, 
            the_geom) 
(select mun_id,mu_id,null,case when (ltheme>=7000 and ltheme<8000) then ltheme else case when (ltheme1>=7000 and ltheme1<8000) then ltheme1 else case when (ltheme2>=7000 and ltheme2<8000) then ltheme2 else null end end end,null,l.quality_cl,l.maintenanc,null,
ST_Length(l.wkb_geometry),now(),user_id,l.wkb_geometry 
from shape_lines l where (ltheme>=7000 and ltheme<8000) or (ltheme1>=7000 and ltheme1<8000) or (ltheme2>=7000 and ltheme2<8000));

return true;

END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION f_frm_migrate_shape_lines(bigint, integer, integer)
  OWNER TO postgres;
COMMENT ON FUNCTION f_frm_migrate_shape_lines(bigint, integer, integer) IS 'param: user_id, mun_id, mu_id';



--Bidivirsity functions

-- Function: get_biodiv_out_stand(IN region_code character varying, IN mu_code character varying)
CREATE OR REPLACE FUNCTION get_biodiv_out_stand(IN region_code character varying, IN mu_code character varying)
  RETURNS TABLE(biodiversi character varying, comp_nr character varying, stand_nr character varying, area_out numeric, geom_out geometry) AS
$BODY$

select a.biodiversi::text,a.comp_nr::text,a.stand_nr::text ,round(st_area(ST_Difference(a.wkb_geometry, b.the_geom))::numeric,2) area_out,
 ST_Difference(a.wkb_geometry, b.the_geom) geom_out   from shape_biodiversity a
 left join tgis_stand b on b.stand_nr=a.stand_nr where 
 b.id=(select id from get_stand_id('Y',region_code,mu_code,substring((1000*a.comp_nr)::text,2,3),a.stand_nr))
 and st_within(a.wkb_geometry, b.the_geom ) is false

$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_biodiv_out_stand(character varying, character varying)
  OWNER TO postgres;
COMMENT ON FUNCTION get_biodiv_out_stand(character varying, character varying) IS 'param: region_code, mu_code';

-- Function: get_biodiv_with_no_stand(IN region_code character varying, IN mu_code character varying)
CREATE OR REPLACE FUNCTION get_biodiv_with_no_stand(IN region_code character varying, IN mu_code character varying)
  RETURNS TABLE(biodiversi character varying, comp_nr character varying, stand_nr character varying) AS
$BODY$

select distinct a.biodiversi::text, a.comp_nr::text,a.stand_nr::text from shape_biodiversity a 
left join tgis_stand b on b.stand_nr=a.stand_nr where a.stand_nr not in 
 (select stand_nr from get_stand_id('Y',region_code,mu_code,substring((1000+a.comp_nr)::text,2,3),a.stand_nr))


$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_biodiv_with_no_stand(character varying, character varying)
  OWNER TO postgres;
COMMENT ON FUNCTION get_biodiv_with_no_stand(character varying, character varying) IS 'param: region_code, mu_code';


--DROP FUNCTION f_frm_migrate_shape_biodiv(user_id bigint, mu_code character varying, reg_code character varying);

CREATE OR REPLACE FUNCTION public.f_frm_migrate_shape_biodiv(
    user_id bigint,
    mun_code character varying,
    reg_code character varying)
  RETURNS boolean AS
$BODY$
BEGIN
	INSERT INTO tgis_biodiv(stand_id, biodiv_id, remarks, comp_nr, stand_nr, timeform, taksator, the_geom)
	(select(select id from get_stand_id('Y',comp_nr,stand_nr,substring((1000+shb.comp_nr)::text,2,3) ,shb.stand_nr) ) , b.id,
	 shb.remarks,substring((1000+shb.comp_nr)::text,2,3),shb.stand_nr ,
	 shb.timeform ,shb.taksator ,
	 shb.wkb_geometry from shape_biodiversity shb  left join tbiodiv_name b ON shb.biocode=b.code
	);
	--update import status
	UPDATE timport_status
	   SET is_active=FALSE, status='Success', end_date=now(), end_user=500,
	   mup_id=(select distinct t.mup_id from (select mup.id as mup_id, mup.isactive, mu.id as mu_id, mu.mu_code, 
			r.id as region_id, r.code as region_code 
		from tgis_mu_period mup left join tgis_management_unit mu on mup.mu_id=mu.id left join tgis_region r on mu.region_id=r.id) t 
		where  t.region_code = reg_code and t.mu_code=mun_code and t.isactive='Y')
	    WHERE is_active=TRUE and import_type='B';

return true;

END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.f_frm_migrate_shape_biodiv(bigint, character varying, character varying)
  OWNER TO postgres;
  
-- View: vgis_biodiv_active

-- DROP VIEW vgis_biodiv_active;

CREATE OR REPLACE VIEW vgis_biodiv_active AS 
 SELECT n.code,
    n.name,
    n.name_en,
    n.name_sr,
    b.remarks,
    b.comp_nr,
    b.stand_nr,
    b.the_geom
   FROM tgis_biodiv b
   LEFT JOIN tbiodiv_name n ON b.biodiv_id = n.id
  WHERE (b.stand_id IN ( SELECT get_stand_id.id
      FROM get_stand_id('Y'::bpchar) get_stand_id(id, stand_id, stand_nr, compartment_id, comp_nr, mup_id, isactive, mu_id, mu_code, region_id, region_code)));

ALTER TABLE vgis_biodiv_active
  OWNER TO postgres;

-- View: vgis_mu_period_active

-- DROP VIEW vgis_mu_period_active;

CREATE OR REPLACE VIEW vgis_mu_period_active WITH (security_barrier=true) AS 
 SELECT mup.id,
    mu.mu_code,
    mu.mu_name,
    (date_part('year'::text, mup.start_date) || '-'::text) || date_part('year'::text, mup.end_date) AS period,
    mup.the_geom
   FROM tgis_mu_period mup
   LEFT JOIN tgis_management_unit mu ON mup.mu_id = mu.id
  WHERE mup.isactive = 'Y'::bpchar;

ALTER TABLE vgis_mu_period_active
  OWNER TO postgres;

  
-- DROP FUNCTION get_overlapstand(character varying, text);

CREATE OR REPLACE FUNCTION get_overlapstand(IN stand_id character varying, IN text)
  RETURNS TABLE(stand_id character varying, area numeric) AS
$BODY$

SELECT gs.stand_id, ROUND(ST_AREA(ST_INTERSECTION(ING.THE_GEOM, gs.THE_GEOM))::NUMERIC,2) AS AREA
FROM (SELECT $1 AS stand_id, THE_GEOM FROM ST_GEOMFROMTEXT(

$2
, 900916) AS THE_GEOM) ING,  tgis_stand gs left join tgis_compartment gc on gc.id=gs.compartment_id
left join tgis_mu_period mu on mu.id=gc.mup_id where mu.isactive='Y' and ING.stand_id!=gs.stand_id and gs.status!='DEL'
AND  
(ST_OVERLAPS(ING.THE_GEOM, gs.THE_GEOM) OR ST_INTERSECTS(ING.THE_GEOM, gs.THE_GEOM))
and 
 ST_AREA(ST_INTERSECTION(ING.THE_GEOM, gs.THE_GEOM))::NUMERIC > 0.99$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_overlapstand(character varying, text)
  OWNER TO postgres;

  
  -- DROP FUNCTION get_overlapstand(text);

CREATE OR REPLACE FUNCTION get_overlapstand(IN text)
  RETURNS TABLE(stand_id character varying, area numeric) AS
$BODY$

SELECT gs.stand_id, ROUND(ST_AREA(ST_INTERSECTION(ING.THE_GEOM, gs.THE_GEOM))::NUMERIC,2) AS AREA
FROM (SELECT  * FROM ST_GEOMFROMTEXT(
$1, 900916) AS THE_GEOM) ING,  tgis_stand gs left join tgis_compartment gc on gc.id=gs.compartment_id
left join tgis_mu_period mu on mu.id=gc.mup_id where mu.isactive='Y' and gs.status!='DEL'

AND 
(ST_OVERLAPS(ING.THE_GEOM, gs.THE_GEOM) or  
ST_INTERSECTS(ING.THE_GEOM, gs.THE_GEOM) )
and 
 ST_AREA(ST_INTERSECTION(ING.THE_GEOM, gs.THE_GEOM))::NUMERIC > 0.99

$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_overlapstand(text)
  OWNER TO postgres;
  
  
  

-- View: vgis_comp_active

-- DROP VIEW vgis_comp_active;

CREATE OR REPLACE VIEW vgis_comp_active AS 
 SELECT c.mu_id,
    c.mup_id,
    c.comp_nr,
    s.stand_count,
    c.the_geom
   FROM tgis_compartment c
   LEFT JOIN tgis_mu_period mup ON c.mup_id = mup.id
   LEFT JOIN ( SELECT tgis_stand.compartment_id,
       count(tgis_stand.id) AS stand_count
      FROM tgis_stand
     GROUP BY tgis_stand.compartment_id) s ON c.id = s.compartment_id
  WHERE mup.isactive = 'Y'::bpchar;

ALTER TABLE vgis_comp_active
  OWNER TO postgres;


  
-- View: vgis_stand_active

-- DROP VIEW vgis_stand_active;

CREATE OR REPLACE VIEW vgis_stand_active AS 
 SELECT s.id,
    s.stand_id,
    s.stand_nr,
    s.mngm_class,
    s.stand_type,
    s.basal_area,
    s.the_geom,
    t.domtext AS mngm_name_al
   FROM ( SELECT tgis_stand.id,
            tgis_stand.stand_id,
            tgis_stand.stand_nr,
            tgis_stand.mngm_class,
            tgis_stand.stand_type,
            tgis_stand.basal_area,
            tgis_stand.the_geom
           FROM tgis_stand
          WHERE (tgis_stand.id IN ( SELECT get_stand_id.id
                   FROM get_stand_id('Y'::bpchar) get_stand_id(id, stand_id, stand_nr, compartment_id, comp_nr, mup_id, isactive, mu_id, mu_code, region_id, region_code)))) s
   LEFT JOIN ( SELECT ttextdomain.id,
            ttextdomain.domname,
            ttextdomain.domvalue,
            ttextdomain.domkey,
            ttextdomain.sort,
            ttextdomain.domtext,
            ttextdomain.domtext_en,
            ttextdomain.domtext_sr
           FROM ttextdomain
          WHERE ttextdomain.domname::text = 'MNGMCLASS'::text) t ON s.mngm_class::text = t.domkey::text;

ALTER TABLE vgis_stand_active
  OWNER TO postgres;


  
-- Function: get_stand_split(character varying, integer)

-- DROP FUNCTION get_stand_split(character varying, integer);

CREATE OR REPLACE FUNCTION get_stand_split(IN linestring character varying, IN stand_id integer)
  RETURNS TABLE(id bigint, geom geometry, geom913 geometry, part integer) AS
$BODY$

select id, (h.poly).geom,st_transform((h.poly).geom,900913), unnest((h.poly).path) part from (
select id, the_geom, ST_Dump(st_split(
the_geom, 
st_setsrid(st_geomfromtext($1),900916)
)
) as poly from tgis_stand where id = $2)  h  ; 

$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_stand_split(character varying, integer)
  OWNER TO postgres;
COMMENT ON FUNCTION get_stand_split(character varying, integer) IS 'param: linestring, stand_id';



-- Function: get_plan_split(character varying, integer)

-- DROP FUNCTION get_plan_split(character varying, integer);

CREATE OR REPLACE FUNCTION get_plan_split(IN linestring character varying, IN stand_id integer)
  RETURNS TABLE(id bigint, geom geometry, geom913 geometry, part integer) AS
$BODY$

select id, (h.poly).geom,st_transform((h.poly).geom,900913), unnest((h.poly).path) part from (
select id, planed_geom, ST_Dump(st_split(
planed_geom, 
st_setsrid(st_geomfromtext($1),900916)
)
) as poly from tfrm_activity where id = $2)  h  ; 

$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_plan_split(character varying, integer)
  OWNER TO postgres;
COMMENT ON FUNCTION get_plan_split(character varying, integer) IS 'param: linestring, activity_id';


---gen_stand_nr function
  CREATE OR REPLACE FUNCTION gen_stand_nr(integer, integer, integer)
  RETURNS SETOF text AS
$BODY$
SELECT R.R MIN_SEQ FROM
(select stand_nr as VALU from tgis_stand where compartment_id = $2) l 
right join (SELECT substring((100+GENERATE_SERIES)::text,2,3)  AS R 
FROM (select GENERATE_SERIES(st,en) from  (
WITH RECURSIVE t  AS (
    SELECT 1 AS t, 1 st , 50 en UNION ALL
    SELECT 0, 1, 50  UNION ALL
    SELECT 2, 51,99
)
SELECT * FROM t where t = $1) m  
) m ) R on R.R = L.VALU
WHERE L.VALU IS NULL limit $3
$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION gen_stand_nr(integer, integer, integer)
  OWNER TO postgres;

-- View: get_shape_out_state

-- DROP VIEW get_shape_out_state;

CREATE OR REPLACE VIEW get_shape_out_state AS 
 SELECT get_shape_out_state.stand_id,
    get_shape_out_state.area_out,
    get_shape_out_state.geom_out
   FROM get_shape_out_state() get_shape_out_state(stand_id, area_out, geom_out);

ALTER TABLE get_shape_out_state
  OWNER TO postgres;
  
  -- DROP VIEW vgis_activity_har_im_ac;

CREATE OR REPLACE VIEW vgis_activity_har_im_ac AS 
 SELECT a.id,
    a.activity_domain_id,
    a.annual_planning_id,
    a.activity_field,
    a.implemented_geom,
    har.stand_id,
    har.status_id
   FROM tfrm_activity a
   LEFT JOIN tfrm_stand_harvest_activity har ON a.id = har.activity_id
  WHERE a.activity_field::text = 'HAR'::text AND (har.stand_id IN ( SELECT get_stand_id.id
      FROM get_stand_id('Y'::bpchar) get_stand_id(id, stand_id, stand_nr, compartment_id, comp_nr, mup_id, isactive, mu_id, mu_code, region_id, region_code)));

ALTER TABLE vgis_activity_har_im_ac
  OWNER TO postgres;

  
  
  -- View: vgis_activity_har_pl_ac

-- DROP VIEW vgis_activity_har_pl_ac;

CREATE OR REPLACE VIEW vgis_activity_har_pl_ac AS 
 SELECT a.id,
    a.activity_domain_id,
    a.annual_planning_id,
    a.activity_field,
    a.planed_geom,
    har.stand_id,
    har.status_id
   FROM tfrm_activity a
   LEFT JOIN tfrm_stand_harvest_activity har ON a.id = har.activity_id
  WHERE a.activity_field::text = 'HAR'::text AND (har.stand_id IN ( SELECT get_stand_id.id
      FROM get_stand_id('Y'::bpchar) get_stand_id(id, stand_id, stand_nr, compartment_id, comp_nr, mup_id, isactive, mu_id, mu_code, region_id, region_code)));

ALTER TABLE vgis_activity_har_pl_ac
  OWNER TO postgres;

  


-- View: stand_search
--DROP VIEW stand_search;
CREATE OR REPLACE VIEW stand_search AS 
 SELECT
  	mu.id mu_id,mu.mu_name mu_name,mu.region_id region_id,co.id comp_id,co.comp_nr,st.id st_id, st.compartment_id, st.stand_id, st.stand_nr, st.mngm_class,st.access_type, st.basal_area, st.stand_type,
  	doms.domkey stypedomkey,doms.domtext stype,doms.domtext_en stypeen,doms.domtext_sr stypesr,
  	doma.domkey accdomkey,doma.domtext acctext,doma.domtext_en acctexten,doma.domtext_sr acctextsr,
  	dommn.domkey mndomkey,dommn.domtext mntext,dommn.domtext_en mntexten,dommn.domtext_sr mntextsr
  	from tgis_stand as st
	left join tgis_compartment as co on co.id = st.compartment_id 
	left join tgis_mu_period as mup on co.mup_id = mup.id
	left join tgis_management_unit mu on co.mu_id=mu.id
	left join tgis_cadastral_municipality as cm on cm.id=co.mun_id
	left join (select * from ttextdomain where domname='STANDTYPE') doms on doms.domkey=st.stand_type
	left join (select * from ttextdomain where domname='ACCESSIBLE') doma on doma.domkey=st.access_type
	left join (select * from ttextdomain where domname='MNGMCLASS') dommn on dommn.domkey=st.mngm_class
	where mup.isactive='Y';
ALTER TABLE stand_search
  OWNER TO postgres;
  
-- DROP FUNCTION gen_activity_no(integer, varchar);
CREATE OR REPLACE FUNCTION gen_activity_no(integer, varchar)
  RETURNS SETOF integer AS
$BODY$

select  max(activity_no) request_no from (
select a[1]::int as activity_no, a[2]::int as activity_year,a[3] as stand_nr from (select regexp_split_to_array(activity_no, '/') from tfrm_activity as frm_act left join tfrm_annual_planning as annu_pl on
  frm_act.annual_planning_id=annu_pl.id) as dt(a)
) f
where activity_year=$1 and stand_nr=$2
group by activity_year,stand_nr

$BODY$
LANGUAGE sql VOLATILE
COST 100
ROWS 1000;
ALTER FUNCTION gen_activity_no(integer, varchar) OWNER TO postgres;
-- View: vgis_pl_point

-- DROP VIEW vgis_pl_point;
CREATE OR REPLACE VIEW vgis_pl_point AS 
 SELECT ok.id,
    ok.activity_domain_id,
    ok.annual_planning_id,
    ok.activity_field,
    ok.stand_id,
    ok.status_id,
    ((ok.dp).path[1] || '-'::text) || (ok.dp).path[2] AS index,
    st_x((ok.dp).geom) AS x,
    st_y((ok.dp).geom) AS y,
    (ok.dp).geom AS geom
   FROM ( SELECT vgis_activity_har_pl_ac.id,
            vgis_activity_har_pl_ac.activity_domain_id,
            vgis_activity_har_pl_ac.annual_planning_id,
            vgis_activity_har_pl_ac.activity_field,
            vgis_activity_har_pl_ac.stand_id,
            vgis_activity_har_pl_ac.status_id,
            st_dumppoints(st_simplifypreservetopology(vgis_activity_har_pl_ac.planed_geom, 10::double precision)) AS dp
           FROM vgis_activity_har_pl_ac) ok;

ALTER TABLE vgis_pl_point
  OWNER TO postgres;

-- DROP FUNCTION get_overlap_lease_request(text);
CREATE OR REPLACE FUNCTION get_overlap_lease_request(IN text)
  RETURNS TABLE(request_id integer, area numeric) AS
$BODY$

SELECT r.id, ROUND(ST_AREA(ST_INTERSECTION(ING.THE_GEOM, r.THE_GEOM))::NUMERIC,2) AS AREA
FROM (SELECT  * FROM ST_GEOMFROMTEXT(
$1, 900916) AS THE_GEOM) ING,  tfal_request r
 WHERE active is true AND 
(ST_OVERLAPS(ING.THE_GEOM, r.THE_GEOM) or  
ST_INTERSECTS(ING.THE_GEOM, r.THE_GEOM) )
and 
 ST_AREA(ST_INTERSECTION(ING.THE_GEOM, r.THE_GEOM))::NUMERIC > 0.99

$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_overlap_lease_request(text)
  OWNER TO postgres;  
  
  
-- DROP FUNCTION get_overlap_lease_request(integer, text);
CREATE OR REPLACE FUNCTION get_overlap_lease_request(IN id integer, IN text)
  RETURNS TABLE(request_id integer, area numeric) AS
$BODY$

SELECT r.ID, ROUND(ST_AREA(ST_INTERSECTION(ING.THE_GEOM, r.THE_GEOM))::NUMERIC,2) AS AREA
FROM (SELECT $1 AS id, THE_GEOM FROM ST_GEOMFROMTEXT(

$2
, 900916) AS THE_GEOM) ING,  tfal_request r
 WHERE active is true and r.id!=$1 and 
(ST_OVERLAPS(ING.THE_GEOM, r.THE_GEOM) OR ST_INTERSECTS(ING.THE_GEOM, r.THE_GEOM))
and 
 ST_AREA(ST_INTERSECTION(ING.THE_GEOM, r.THE_GEOM))::NUMERIC > 0.99$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_overlap_lease_request(integer, text)
  OWNER TO postgres;
  

  
DROP FUNCTION getprofile(text);
CREATE OR REPLACE FUNCTION getprofile(IN text)
  RETURNS TABLE(x double precision, y double precision, elev double precision, m double precision) AS
$BODY$


 WITH line AS
    (SELECT ('SRID=900916;'||$1)::geometry AS geom),
  linem AS
    (SELECT ST_AddMeasure(line.geom, 0, ST_Length(line.geom)) as linem,
            generate_series(0, ST_Length(line.geom)::int, ( case when ST_Length(line.geom)/300 < 5 then 5 else round((ST_Length(line.geom)/300)::numeric,5) end  )::int)  as i
     FROM line),
  points AS
    (SELECT ST_GeometryN(ST_LocateAlong(linem, i), 1) AS geom FROM linem),
  elevation AS
    (select geom,case when elev>0 then elev else 0 end as elev from( SELECT p.geom AS geom, ST_Value(tgis_surfacedata.elevation, 1, p.geom) AS elev
     FROM tgis_surfacedata, points p
     WHERE ST_Intersects(tgis_surfacedata.elevation, p.geom))a)
  SELECT ST_X(geom) as x, ST_Y(geom) as y, elev, ST_M(geom) as m  FROM elevation

$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION getprofile(text)
  OWNER TO postgres;
  
-- DROP FUNCTION get_overlaped_animal_location(integer, text);  
CREATE OR REPLACE FUNCTION get_overlaped_animal_location(IN text)
RETURNS TABLE (location_id integer, area numeric) AS 
$BODY$
SELECT l.id,ROUND(ST_AREA(ST_INTERSECTION(ING.THE_GEOM, l.THE_GEOM))::NUMERIC,2) AS AREA
 FROM (SELECT * FROM  ST_GEOMFROMTEXT(
$1, 900916) AS THE_GEOM) ING, tdhpet_location as l where 
(ST_OVERLAPS(ING.THE_GEOM, l.THE_GEOM) or  
ST_INTERSECTS(ING.THE_GEOM, l.THE_GEOM))
and 
 ST_AREA(ST_INTERSECTION(ING.THE_GEOM, l.THE_GEOM))::NUMERIC > 0.99
$BODY$
LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_overlaped_animal_location(text)
  OWNER TO postgres; 
  
  
-- DROP FUNCTION get_overlaped_animal_location(integer, text);
CREATE OR REPLACE FUNCTION get_overlaped_animal_location(IN id integer, IN text)
  RETURNS TABLE(location_id integer, area numeric) AS
$BODY$

SELECT r.ID, ROUND(ST_AREA(ST_INTERSECTION(ING.THE_GEOM, r.THE_GEOM))::NUMERIC,2) AS AREA
FROM (SELECT $1 AS id, THE_GEOM FROM ST_GEOMFROMTEXT(

$2
, 900916) AS THE_GEOM) ING,  tdhpet_location r
 WHERE  r.id!=$1 and 
(ST_OVERLAPS(ING.THE_GEOM, r.THE_GEOM) OR ST_INTERSECTS(ING.THE_GEOM, r.THE_GEOM))
and 
 ST_AREA(ST_INTERSECTION(ING.THE_GEOM, r.THE_GEOM))::NUMERIC > 0.99$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_overlaped_animal_location(integer, text)
  OWNER TO postgres;


--DROP FUNCTION get_overlap_tourist_zone_geoms( text);  
CREATE OR REPLACE FUNCTION get_overlap_tourist_zone_geoms(IN text)
RETURNS TABLE (touristZoneGeomsId integer, area numeric) AS 
$BODY$
SELECT l.id,ROUND(ST_AREA(ST_INTERSECTION(ING.THE_GEOM, l.THE_GEOM))::NUMERIC,2) AS AREA
 FROM (SELECT * FROM  ST_GEOMFROMTEXT(
$1, 900916) AS THE_GEOM) ING, tdhpet_tourist_zone_geoms as l where 
(ST_OVERLAPS(ING.THE_GEOM, l.THE_GEOM) or  
ST_INTERSECTS(ING.THE_GEOM, l.THE_GEOM))
and 
 ST_AREA(ST_INTERSECTION(ING.THE_GEOM, l.THE_GEOM))::NUMERIC > 0.99
$BODY$
LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_overlap_tourist_zone_geoms(text)
  OWNER TO postgres; 


 
--DROP FUNCTION get_overlap_tourist_zone_geoms(integer, text);
CREATE OR REPLACE FUNCTION get_overlap_tourist_zone_geoms(IN id integer, IN text)
  RETURNS TABLE(touristZoneGeomsId integer, area numeric) AS
$BODY$

SELECT r.ID, ROUND(ST_AREA(ST_INTERSECTION(ING.THE_GEOM, r.THE_GEOM))::NUMERIC,2) AS AREA
FROM (SELECT $1 AS id, THE_GEOM FROM ST_GEOMFROMTEXT(

$2
, 900916) AS THE_GEOM) ING,  tdhpet_tourist_zone_geoms r
 WHERE  
(ST_OVERLAPS(ING.THE_GEOM, r.THE_GEOM) OR ST_INTERSECTS(ING.THE_GEOM, r.THE_GEOM))
and r.id!=$1 and 
 ST_AREA(ST_INTERSECTION(ING.THE_GEOM, r.THE_GEOM))::NUMERIC > 0.99
 $BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_overlap_tourist_zone_geoms(integer, text)
  OWNER TO postgres;
  
  
  
CREATE TABLE tlinetemp
(
  id bigserial NOT NULL,
  ltheme12 character varying(10),
  quality_cl character varying(20),
  maintenanc character varying(20),
  comment text,
  file_format character varying(10),
  date date,
  status character varying(2),
  created_date timestamp without time zone NOT NULL ,
  created_by integer NOT NULL,
  changed_date timestamp without time zone  ,
  changed_by integer,
  the_geom geometry,
  CONSTRAINT tlinetemp_pkey PRIMARY KEY (id),
  CONSTRAINT tlinetemp_created_by_fkey FOREIGN KEY (created_by)
      REFERENCES tperson (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT tlinetemp_changed_by_fkey FOREIGN KEY (changed_by)
      REFERENCES tperson (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)

CREATE TABLE tlayers_gis
(
  id integer NOT NULL,
  parent_id integer,
  url text,
  service_type character varying(3),
  featurens character varying(250),
  store character varying(100),
  feature_type_layer character varying(100) NOT NULL,
  is_base_layer boolean,
  min_scale integer,
  srs_name character varying(100),
  outputformat character varying(10),
  tiled boolean,
  transparent boolean,
  visibility boolean,
  tilesize integer,
  module character varying(250),
  sort integer,
  CONSTRAINT tlayers_gis_pkey PRIMARY KEY (id),
  CONSTRAINT tlayers_gis_id_fkey FOREIGN KEY (parent_id)
      REFERENCES tlayers_gis (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)

CREATE TABLE taff_ref_projects
(
  id bigint primary key ,
  name character varying(150) NOT NULL,
  refer_id integer,
  data_from character varying(250),
  remarks text,
  created_by integer NOT NULL,
  created_time timestamp without time zone NOT NULL,
   CONSTRAINT taff_ref_refer_id_projects FOREIGN KEY (refer_id)
      REFERENCES taff_ref_projects (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
   CONSTRAINT taff_ref_projects_created_by_fkey FOREIGN KEY (created_by)
      REFERENCES tperson (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
 );

 CREATE OR REPLACE FUNCTION get_all_children_affreffprojects(use_parent integer)
  RETURNS integer[] AS
$BODY$
DECLARE
    process_parents INT4[] := ARRAY[ use_parent ];
    children INT4[] := '{}';
    new_children INT4[];
BEGIN
    WHILE ( array_upper( process_parents, 1 ) IS NOT NULL ) LOOP
        new_children := ARRAY( SELECT id FROM taff_ref_projects WHERE parent_id = ANY( process_parents ) AND id <> ALL( children ) );
        children := children || new_children;
        process_parents := new_children;
    END LOOP;
    RETURN children;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION get_all_children_affreffprojects(integer)
  OWNER TO postgres;
  
  
  
 CREATE OR REPLACE FUNCTION get_surfacedata(IN text)
  RETURNS TABLE(nr integer, min_elevation numeric, max_elevation numeric, mean_elevation numeric, min_slope numeric, max_slope numeric, mean_slope numeric, exp character varying, soil_code integer) AS
$BODY$
SELECT SURFACE.*, SOIL.CODE AS SOIL_CODE FROM (
SELECT NR, 
MIN(ELEVATION)::NUMERIC AS MIN_ELEVATION, MAX(ELEVATION)::NUMERIC AS MAX_ELEVATION, ROUND((SUM(ELEVATION)/COUNT(NR))::NUMERIC,0) AS MEAN_ELEVATION,
MIN(SLOPE)::NUMERIC AS MIN_SLOPE, MAX(SLOPE)::NUMERIC AS MAX_SLOPE, ROUND((SUM(SLOPE)/COUNT(NR))::NUMERIC,2) AS MEAN_SLOPE,
MODE_(EXP)::VARCHAR(2) EXP 
FROM (
SELECT NR, VAL ELEVATION , SLOPE,
CASE WHEN EXPOSITION= -1 THEN 'F' ELSE 
CASE WHEN (EXPOSITION>= 0 AND EXPOSITION < 22.5) OR (EXPOSITION >= 337.5 AND EXPOSITION<=360) THEN 'N' ELSE 
CASE WHEN (EXPOSITION>= 22.5 AND EXPOSITION < 67.5) THEN 'NE' ELSE 
CASE WHEN EXPOSITION>= 67.5 AND EXPOSITION < 112.5 THEN 'E' ELSE 
CASE WHEN EXPOSITION>= 112.5 AND EXPOSITION < 157.5 THEN 'SE' ELSE 
CASE WHEN EXPOSITION>= 157.5 AND EXPOSITION < 202.5 THEN 'S' ELSE 
CASE WHEN EXPOSITION>= 202.5 AND EXPOSITION < 247.5 THEN 'SW' ELSE 
CASE WHEN EXPOSITION>= 247.5 AND EXPOSITION < 292.5 THEN 'W' ELSE 
CASE WHEN EXPOSITION>= 292.5 AND EXPOSITION < 337.5 THEN 'NW' ELSE 
'' END END END END END END END END END AS EXP
  FROM 
(SELECT NR, (ST_PIXELASPOLYGONS((ST_CLIP(TGIS_SURFACEDATA.ELEVATION,  ST_EXPAND(THE_GEOM,25))), 1, FALSE)).*  ,
ROUND((ST_PIXELASPOLYGONS((ST_CLIP(TGIS_SURFACEDATA.SLOPE,  ST_EXPAND(THE_GEOM,25))), 1, FALSE)).VAL::NUMERIC,2) AS SLOPE, 
ROUND((ST_PIXELASPOLYGONS((ST_CLIP(TGIS_SURFACEDATA.EXPOSITION,  ST_EXPAND(THE_GEOM,25))), 1, FALSE)).VAL::NUMERIC,2) AS EXPOSITION, 
THE_GEOM
FROM TGIS_SURFACEDATA, (SELECT 1 AS NR, * FROM ST_GEOMFROMTEXT($1, 900916) AS THE_GEOM) TVINEYARD
 WHERE ST_INTERSECTS(ELEVATION, THE_GEOM) )
 FOO WHERE ST_INTERSECTS(GEOM, THE_GEOM)
) FOO2
GROUP BY NR) SURFACE
LEFT JOIN 
(
SELECT 1 AS NR,  TGIS_SOIL.CODE,  ROUND(ST_AREA(ST_INTERSECTION(ING.THE_GEOM, TGIS_SOIL.THE_GEOM))::NUMERIC,2) AS AREA
FROM (SELECT  * FROM ST_GEOMFROMTEXT(
$1, 900916) AS THE_GEOM) ING,  TGIS_SOIL
 WHERE
ST_INTERSECTS(TGIS_SOIL.THE_GEOM, ING.THE_GEOM) 
ORDER BY AREA DESC 
LIMIT 1) SOIL ON SURFACE.NR=SOIL.NR


$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION get_surfacedata(text)
  OWNER TO postgres;
  
   
CREATE AGGREGATE mode_(anyelement) (
  SFUNC=array_append,
  STYPE=anyarray,
  FINALFUNC=_final_mode,
  INITCOND='{}'
);
ALTER AGGREGATE mode_(anyelement)
  OWNER TO postgres;


CREATE OR REPLACE FUNCTION _final_mode(anyarray)
  RETURNS anyelement AS
$BODY$
    SELECT a
    FROM unnest($1) a
    GROUP BY 1 
    ORDER BY COUNT(1) DESC, 1
    LIMIT 1;
$BODY$
  LANGUAGE sql IMMUTABLE
  COST 100;
ALTER FUNCTION _final_mode(anyarray)
  OWNER TO postgres;
  
  
	
CREATE TABLE public.tkfis_gen_documents
	(
	  id bigint NOT NULL,
	  uid character varying(8) NOT NULL,
	  url character varying(250) NOT NULL,
	  generated_by integer,
	  generated_date timestamp without time zone,
	  accessed boolean,
	  a_uid character varying(50),
	  CONSTRAINT tkfis_gen_documents_pkey PRIMARY KEY (id),
	  CONSTRAINT tkfis_gen_documents_by_fkey FOREIGN KEY (generated_by)
	      REFERENCES public.tperson (id) MATCH SIMPLE
	      ON UPDATE NO ACTION ON DELETE NO ACTION,
	  CONSTRAINT tkfis_gen_documents_uid_key UNIQUE (uid)
	)

	
	
CREATE OR REPLACE VIEW public.ex_v_annual_planning_activity_detail AS 

select act.id,act.activity_no,act.activity_field,ap.year,mu.mu_name as mg_unit,cm.name as municipality,mu.mu_code ,c.comp_nr,s.stand_nr,act.planed_geom,act.implemented_geom from tfrm_activity act left join
tfrm_annual_planning ap on ap.id=act.annual_planning_id 
left join tgis_cadastral_municipality cm on cm.id=ap.mun_id left join 
(select 
activity_id, 
stand_id, 'HRV' as act_type
from tfrm_stand_harvest_activity
union all
select 
activity_id, 
stand_id, 'SLV' as act_type from
tfrm_stand_silviculture_activity
union all
select 
activity_id, 
stand_id, 'PLA' as act_type from
tfrm_stand_planting_activity
union all
select 
activity_id, null as
stand_id, 'INF' as act_type from
tfrm_road_activity
union all
select 
activity_id, null as
stand_id, 'PRO' as act_type from
tfrm_protection_activity

 ) as act_det on act.id=act_det.activity_id
left join tgis_stand s  on s.id=act_det.stand_id 
left join tgis_compartment c on c.id=s.compartment_id
left join tgis_management_unit mu on mu.id=c.mu_id;

ALTER TABLE public.ex_v_annual_planning_activity_detail
  OWNER TO postgres;
  
  
  
  
  
CREATE OR REPLACE FUNCTION public.get_segment_details_from_road(
    integer,character varying, character varying)
 RETURNS TABLE(id bigint,lg1 numeric,lg2 numeric, geom_line text, lg0 double precision, geom_act text, distance_lg0_lg_1 double precision) AS
$BODY$
select m.*,ST_AsText ( st_line_substring(geom_line, lg1/lg0, lg2/lg0))as geom_act, st_length(st_line_substring(geom_line, lg1/lg0, lg2/lg0)) as distance_lg0_lg_1 from (
select id, round(st_length(g1)::numeric,2) as lg1,
round(st_length(g2)::numeric,2) as lg2, ST_AsText (the_geom) as geom_line,  st_length(the_geom) lg0 from (
select a.id,  
(ST_Dump(ST_Split(ST_Snap(a.the_geom, start_g, 2),start_g))).geom as g1,
(ST_Dump(ST_Split(ST_Snap(a.the_geom, end_g, 2),end_g))).geom as g2, the_geom
 from tgis_road a , (select st_geomfromtext($2,900916) as start_g) b, 
 (select st_geomfromtext($3,900916) as end_g) c
 where id =$1
limit 1
) h
) m

$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION public.get_segment_details_from_road(
    integer,
    character varying, character varying)
  OWNER TO postgres;
  


  
  
CREATE OR REPLACE FUNCTION public.get_segment_details_checked(
    integer,character varying, character varying)
 RETURNS boolean AS
$BODY$
select lg1<lg2 start_point_is_min from (
select id, round(st_length(g1)::numeric,2) as lg1,
round(st_length(g2)::numeric,2) as lg2, ST_AsText (the_geom) as geom_line,  st_length(the_geom) lg0 from (
select a.id,  
(ST_Dump(ST_Split(ST_Snap(a.the_geom, start_g, 2),start_g))).geom as g1,
(ST_Dump(ST_Split(ST_Snap(a.the_geom, end_g, 2),end_g))).geom as g2, the_geom
 from tgis_road a , (select st_geomfromtext($2,900916) as start_g) b, 
 (select st_geomfromtext($3,900916) as end_g) c
 where id =$1
limit 1
) h
) k
$BODY$
  LANGUAGE sql VOLATILE
  COST 100;
ALTER FUNCTION public.get_segment_details_checked(
    integer,
    character varying, character varying)
  OWNER TO postgres;
  


CREATE OR REPLACE VIEW public.ex_v_fal_request AS 
select r.id,name_al as request_type,start_lease, end_lease,dt.domtext as status, the_geom
from tfal_request r left join tfal_request_type rt on r.tfal_request_type_id=rt.id
left join tfal_request_status rs on rs.id=r.current_status_id
left join (select * from ttextdomain  where domname ilike 'REQUESTSTATUS') dt 
on dt.domkey=rs.status;
ALTER TABLE public.ex_v_fal_request
  OWNER TO postgres;



