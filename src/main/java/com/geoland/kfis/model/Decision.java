package com.geoland.kfis.model;
// Generated Jun 21, 2017 10:14:45 PM by Hibernate Tools 4.0.1.Final

import com.geoland.framework.persistence.base.*;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.annotations.GenericGenerator;

// TODO: Auto-generated Javadoc
/**
 * Decision generated by hbm2java.
 */
@Entity
@Table(name = "thrm_decision", schema = "public")
public class Decision extends AbstractPersistentObject implements java.io.Serializable {

	/** The id. */
	private Long id;
	
	/** The decision status. */
	private DecisionStatus decisionStatus;
	
	/** The decision type. */
	private DecisionType decisionType;
	
	/** The date of request. */
	private Date dateOfRequest;
	
	/** The note. */
	private String note;
	
	/** The decision statuses. */
	private Set<DecisionStatus> decisionStatuses = new HashSet<DecisionStatus>(0);
	
	/** The decision employees. */
	private Set<DecisionEmployee> decisionEmployees = new HashSet<DecisionEmployee>(0);
	
	/** The decision docs. */
	private Set<DecisionDoc> decisionDocs = new HashSet<DecisionDoc>(0);

	/**
	 * Instantiates a new decision.
	 */
	public Decision() {
	}

	/**
	 * Instantiates a new decision.
	 *
	 * @param decisionType the decision type
	 * @param dateOfRequest the date of request
	 */
	public Decision(DecisionType decisionType, Date dateOfRequest) {
		this.decisionType = decisionType;
		this.dateOfRequest = dateOfRequest;
	}

	/**
	 * Instantiates a new decision.
	 *
	 * @param decisionStatus the decision status
	 * @param decisionType the decision type
	 * @param dateOfRequest the date of request
	 * @param note the note
	 * @param decisionStatuses the decision statuses
	 * @param decisionEmployees the decision employees
	 * @param decisionDocs the decision docs
	 */
	public Decision(DecisionStatus decisionStatus, DecisionType decisionType, Date dateOfRequest, String note,
			Set<DecisionStatus> decisionStatuses, Set<DecisionEmployee> decisionEmployees,
			Set<DecisionDoc> decisionDocs) {
		this.decisionStatus = decisionStatus;
		this.decisionType = decisionType;
		this.dateOfRequest = dateOfRequest;
		this.note = note;
		this.decisionStatuses = decisionStatuses;
		this.decisionEmployees = decisionEmployees;
		this.decisionDocs = decisionDocs;
	}

	/* (non-Javadoc)
	 * @see com.geoland.framework.persistence.base.AbstractPersistentObject#getId()
	 */
	@GenericGenerator(name = "generator", strategy = "increment")
	@Id
	@GeneratedValue(generator = "generator")

	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	/* (non-Javadoc)
	 * @see com.geoland.framework.persistence.base.AbstractPersistentObject#setId(java.lang.Long)
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Gets the decision status.
	 *
	 * @return the decision status
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "current_status")
	public DecisionStatus getDecisionStatus() {
		return this.decisionStatus;
	}

	/**
	 * Sets the decision status.
	 *
	 * @param decisionStatus the new decision status
	 */
	public void setDecisionStatus(DecisionStatus decisionStatus) {
		this.decisionStatus = decisionStatus;
	}

	/**
	 * Gets the decision type.
	 *
	 * @return the decision type
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "decision_type", nullable = false)
	public DecisionType getDecisionType() {
		return this.decisionType;
	}

	/**
	 * Sets the decision type.
	 *
	 * @param decisionType the new decision type
	 */
	public void setDecisionType(DecisionType decisionType) {
		this.decisionType = decisionType;
	}

	/**
	 * Gets the date of request.
	 *
	 * @return the date of request
	 */
	@Temporal(TemporalType.DATE)
	@Column(name = "date_of_request", nullable = false, length = 13)
	public Date getDateOfRequest() {
		return this.dateOfRequest;
	}

	/**
	 * Sets the date of request.
	 *
	 * @param dateOfRequest the new date of request
	 */
	public void setDateOfRequest(Date dateOfRequest) {
		this.dateOfRequest = dateOfRequest;
	}

	/**
	 * Gets the note.
	 *
	 * @return the note
	 */
	@Column(name = "note")
	public String getNote() {
		return this.note;
	}

	/**
	 * Sets the note.
	 *
	 * @param note the new note
	 */
	public void setNote(String note) {
		this.note = note;
	}

	/**
	 * Gets the decision statuses.
	 *
	 * @return the decision statuses
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "decision")
	public Set<DecisionStatus> getDecisionStatuses() {
		return this.decisionStatuses;
	}

	/**
	 * Sets the decision statuses.
	 *
	 * @param decisionStatuses the new decision statuses
	 */
	public void setDecisionStatuses(Set<DecisionStatus> decisionStatuses) {
		this.decisionStatuses = decisionStatuses;
	}

	/**
	 * Gets the decision employees.
	 *
	 * @return the decision employees
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "decision")
	public Set<DecisionEmployee> getDecisionEmployees() {
		return this.decisionEmployees;
	}

	/**
	 * Sets the decision employees.
	 *
	 * @param decisionEmployees the new decision employees
	 */
	public void setDecisionEmployees(Set<DecisionEmployee> decisionEmployees) {
		this.decisionEmployees = decisionEmployees;
	}

	/**
	 * Gets the decision docs.
	 *
	 * @return the decision docs
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "decision")
	public Set<DecisionDoc> getDecisionDocs() {
		return this.decisionDocs;
	}

	/**
	 * Sets the decision docs.
	 *
	 * @param decisionDocs the new decision docs
	 */
	public void setDecisionDocs(Set<DecisionDoc> decisionDocs) {
		this.decisionDocs = decisionDocs;
	}

}
