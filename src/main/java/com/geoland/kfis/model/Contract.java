package com.geoland.kfis.model;

// Generated Feb 11, 2015 2:26:59 AM by Hibernate Tools 3.4.0.CR1

import com.geoland.framework.persistence.base.*;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.annotations.GenericGenerator;

// TODO: Auto-generated Javadoc
/**
 * Contract generated by hbm2java.
 */
@Entity
@Table(name = "tfin_contract", schema = "public")
public class Contract extends AbstractPersistentObject implements
		java.io.Serializable {
	
	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The id. */
	private Long id;
	
	/** The party. */
	private Party party;
	
	/** The contractor. */
	private Contractor contractor;
	
	/** The organisation. */
	private Organisation organisation;
	
	/** The contract number. */
	private String contractNumber;
	
	/** The contract name. */
	private String contractName;
	
	/** The contract costs. */
	private Double contractCosts;
	
	/** The approved date. */
	private Date approvedDate;
	
	/** The date due for start. */
	private Date dateDueForStart;
	
	/** The date due for completion. */
	private Date dateDueForCompletion;
	
	/** The date completed. */
	private Date dateCompleted;
	
	/** The notification date. */
	private Date notificationDate;
	
	/** The delayed. */
	private Boolean delayed;
	
	/** The created time. */
	private Date createdTime;
	
	/** The payment periods. */
	private Set<PaymentPeriod> paymentPeriods = new HashSet<PaymentPeriod>(0);
	
	/** The contract docs. */
	private Set<ContractDoc> contractDocs = new HashSet<ContractDoc>(0);

	/**
	 * Instantiates a new contract.
	 */
	public Contract() {
	}

	/**
	 * Instantiates a new contract.
	 *
	 * @param party the party
	 * @param contractor the contractor
	 * @param organisation the organisation
	 * @param contractNumber the contract number
	 * @param contractName the contract name
	 * @param contractCosts the contract costs
	 * @param createdTime the created time
	 */
	public Contract(Party party, Contractor contractor,
			Organisation organisation, String contractNumber,
			String contractName, Double contractCosts, Date createdTime) {
		this.party = party;
		this.contractor = contractor;
		this.organisation = organisation;
		this.contractNumber = contractNumber;
		this.contractName = contractName;
		this.contractCosts = contractCosts;
		this.createdTime = createdTime;
	}

	/**
	 * Instantiates a new contract.
	 *
	 * @param party the party
	 * @param contractor the contractor
	 * @param organisation the organisation
	 * @param contractNumber the contract number
	 * @param contractName the contract name
	 * @param contractCosts the contract costs
	 * @param approvedDate the approved date
	 * @param dateDueForStart the date due for start
	 * @param dateDueForCompletion the date due for completion
	 * @param dateCompleted the date completed
	 * @param notificationDate the notification date
	 * @param delayed the delayed
	 * @param createdTime the created time
	 * @param paymentPeriods the payment periods
	 * @param contractDocs the contract docs
	 */
	public Contract(Party party, Contractor contractor,
			Organisation organisation, String contractNumber,
			String contractName, Double contractCosts, Date approvedDate,
			Date dateDueForStart, Date dateDueForCompletion,
			Date dateCompleted, Date notificationDate, Boolean delayed,
			Date createdTime, Set<PaymentPeriod> paymentPeriods,
			Set<ContractDoc> contractDocs) {
		this.party = party;
		this.contractor = contractor;
		this.organisation = organisation;
		this.contractNumber = contractNumber;
		this.contractName = contractName;
		this.contractCosts = contractCosts;
		this.approvedDate = approvedDate;
		this.dateDueForStart = dateDueForStart;
		this.dateDueForCompletion = dateDueForCompletion;
		this.dateCompleted = dateCompleted;
		this.notificationDate = notificationDate;
		this.delayed = delayed;
		this.createdTime = createdTime;
		this.paymentPeriods = paymentPeriods;
		this.contractDocs = contractDocs;
	}

	/* (non-Javadoc)
	 * @see com.geoland.framework.persistence.base.AbstractPersistentObject#getId()
	 */
	@GenericGenerator(name = "generator", strategy = "increment")
	@Id
	@GeneratedValue(generator = "generator")
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	/* (non-Javadoc)
	 * @see com.geoland.framework.persistence.base.AbstractPersistentObject#setId(java.lang.Long)
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Gets the party.
	 *
	 * @return the party
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "created_by", nullable = false)
	public Party getParty() {
		return this.party;
	}

	/**
	 * Sets the party.
	 *
	 * @param party the new party
	 */
	public void setParty(Party party) {
		this.party = party;
	}

	/**
	 * Gets the contractor.
	 *
	 * @return the contractor
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "contractor_id", nullable = false)
	public Contractor getContractor() {
		return this.contractor;
	}

	/**
	 * Sets the contractor.
	 *
	 * @param contractor the new contractor
	 */
	public void setContractor(Contractor contractor) {
		this.contractor = contractor;
	}

	/**
	 * Gets the organisation.
	 *
	 * @return the organisation
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "organisation_id", nullable = false)
	public Organisation getOrganisation() {
		return this.organisation;
	}

	/**
	 * Sets the organisation.
	 *
	 * @param organisation the new organisation
	 */
	public void setOrganisation(Organisation organisation) {
		this.organisation = organisation;
	}

	/**
	 * Gets the contract number.
	 *
	 * @return the contract number
	 */
	@Column(name = "contract_number", nullable = false, length = 50)
	public String getContractNumber() {
		return this.contractNumber;
	}

	/**
	 * Sets the contract number.
	 *
	 * @param contractNumber the new contract number
	 */
	public void setContractNumber(String contractNumber) {
		this.contractNumber = contractNumber;
	}

	/**
	 * Gets the contract name.
	 *
	 * @return the contract name
	 */
	@Column(name = "contract_name", nullable = false, length = 150)
	public String getContractName() {
		return this.contractName;
	}

	/**
	 * Sets the contract name.
	 *
	 * @param contractName the new contract name
	 */
	public void setContractName(String contractName) {
		this.contractName = contractName;
	}

	/**
	 * Gets the contract costs.
	 *
	 * @return the contract costs
	 */
	@Column(name = "contract_costs", nullable = false, precision = 17, scale = 17)
	public Double getContractCosts() {
		return this.contractCosts;
	}

	/**
	 * Sets the contract costs.
	 *
	 * @param contractCosts the new contract costs
	 */
	public void setContractCosts(Double contractCosts) {
		this.contractCosts = contractCosts;
	}

	/**
	 * Gets the approved date.
	 *
	 * @return the approved date
	 */
	@Temporal(TemporalType.DATE)
	@Column(name = "approved_date", length = 13)
	public Date getApprovedDate() {
		return this.approvedDate;
	}

	/**
	 * Sets the approved date.
	 *
	 * @param approvedDate the new approved date
	 */
	public void setApprovedDate(Date approvedDate) {
		this.approvedDate = approvedDate;
	}

	/**
	 * Gets the date due for start.
	 *
	 * @return the date due for start
	 */
	@Temporal(TemporalType.DATE)
	@Column(name = "date_due_for_start", length = 13)
	public Date getDateDueForStart() {
		return this.dateDueForStart;
	}

	/**
	 * Sets the date due for start.
	 *
	 * @param dateDueForStart the new date due for start
	 */
	public void setDateDueForStart(Date dateDueForStart) {
		this.dateDueForStart = dateDueForStart;
	}

	/**
	 * Gets the date due for completion.
	 *
	 * @return the date due for completion
	 */
	@Temporal(TemporalType.DATE)
	@Column(name = "date_due_for_completion", length = 13)
	public Date getDateDueForCompletion() {
		return this.dateDueForCompletion;
	}

	/**
	 * Sets the date due for completion.
	 *
	 * @param dateDueForCompletion the new date due for completion
	 */
	public void setDateDueForCompletion(Date dateDueForCompletion) {
		this.dateDueForCompletion = dateDueForCompletion;
	}

	/**
	 * Gets the date completed.
	 *
	 * @return the date completed
	 */
	@Temporal(TemporalType.DATE)
	@Column(name = "date_completed", length = 13)
	public Date getDateCompleted() {
		return this.dateCompleted;
	}

	/**
	 * Sets the date completed.
	 *
	 * @param dateCompleted the new date completed
	 */
	public void setDateCompleted(Date dateCompleted) {
		this.dateCompleted = dateCompleted;
	}

	/**
	 * Gets the notification date.
	 *
	 * @return the notification date
	 */
	@Temporal(TemporalType.DATE)
	@Column(name = "notification_date", length = 13)
	public Date getNotificationDate() {
		return this.notificationDate;
	}

	/**
	 * Sets the notification date.
	 *
	 * @param notificationDate the new notification date
	 */
	public void setNotificationDate(Date notificationDate) {
		this.notificationDate = notificationDate;
	}

	/**
	 * Gets the delayed.
	 *
	 * @return the delayed
	 */
	@Column(name = "delayed")
	public Boolean getDelayed() {
		return this.delayed;
	}

	/**
	 * Sets the delayed.
	 *
	 * @param delayed the new delayed
	 */
	public void setDelayed(Boolean delayed) {
		this.delayed = delayed;
	}

	/**
	 * Gets the created time.
	 *
	 * @return the created time
	 */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_time", nullable = false, length = 29)
	public Date getCreatedTime() {
		return this.createdTime;
	}

	/**
	 * Sets the created time.
	 *
	 * @param createdTime the new created time
	 */
	public void setCreatedTime(Date createdTime) {
		this.createdTime = createdTime;
	}

	/**
	 * Gets the payment periods.
	 *
	 * @return the payment periods
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "contract")
	public Set<PaymentPeriod> getPaymentPeriods() {
		return this.paymentPeriods;
	}

	/**
	 * Sets the payment periods.
	 *
	 * @param paymentPeriods the new payment periods
	 */
	public void setPaymentPeriods(Set<PaymentPeriod> paymentPeriods) {
		this.paymentPeriods = paymentPeriods;
	}

	/**
	 * Gets the contract docs.
	 *
	 * @return the contract docs
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "contract")
	public Set<ContractDoc> getContractDocs() {
		return this.contractDocs;
	}

	/**
	 * Sets the contract docs.
	 *
	 * @param contractDocs the new contract docs
	 */
	public void setContractDocs(Set<ContractDoc> contractDocs) {
		this.contractDocs = contractDocs;
	}

}
