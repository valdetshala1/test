package com.geoland.kfis.model;

// Generated Feb 11, 2015 2:26:59 AM by Hibernate Tools 3.4.0.CR1

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.GenericGenerator;

import com.geoland.framework.persistence.base.AbstractPersistentObject;
import com.geoland.framework.persistence.model.rbac.RbacRole;

// TODO: Auto-generated Javadoc
/**
 * AlertRecipient generated by hbm2java.
 */
@Entity
@Table(name = "talertrecipient", schema = "public")
public class AlertRecipient extends AbstractPersistentObject implements
		java.io.Serializable {
	
	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The id. */
	private Long id;
	
	/** The rbac role. */
	private RbacRole rbacRole;
	
	/** The alert rule. */
	private AlertRule alertRule;
	
	/** The person by createdby. */
	private Person personByCreatedby;
	
	/** The person by updatedby. */
	private Person personByUpdatedby;
	
	/** The person by person id. */
	private Person personByPersonId;
	
	/** The organisation. */
	private Organisation organisation;
	
	/** The isactive. */
	private String isactive;
	
	/** The created. */
	private Date created;
	
	/** The updated. */
	private Date updated;
	
	/** The sendemail. */
	private String sendemail;

	/**
	 * Instantiates a new alert recipient.
	 */
	public AlertRecipient() {
	}

	/**
	 * Instantiates a new alert recipient.
	 *
	 * @param personByCreatedby the person by createdby
	 * @param personByUpdatedby the person by updatedby
	 * @param organisation the organisation
	 * @param isactive the isactive
	 * @param created the created
	 * @param updated the updated
	 */
	public AlertRecipient(Person personByCreatedby, Person personByUpdatedby,
			Organisation organisation, String isactive, Date created,
			Date updated) {
		this.personByCreatedby = personByCreatedby;
		this.personByUpdatedby = personByUpdatedby;
		this.organisation = organisation;
		this.isactive = isactive;
		this.created = created;
		this.updated = updated;
	}

	/**
	 * Instantiates a new alert recipient.
	 *
	 * @param rbacRole the rbac role
	 * @param alertRule the alert rule
	 * @param personByCreatedby the person by createdby
	 * @param personByUpdatedby the person by updatedby
	 * @param personByPersonId the person by person id
	 * @param organisation the organisation
	 * @param isactive the isactive
	 * @param created the created
	 * @param updated the updated
	 * @param sendemail the sendemail
	 */
	public AlertRecipient(RbacRole rbacRole, AlertRule alertRule,
			Person personByCreatedby, Person personByUpdatedby,
			Person personByPersonId, Organisation organisation,
			String isactive, Date created, Date updated, String sendemail) {
		this.rbacRole = rbacRole;
		this.alertRule = alertRule;
		this.personByCreatedby = personByCreatedby;
		this.personByUpdatedby = personByUpdatedby;
		this.personByPersonId = personByPersonId;
		this.organisation = organisation;
		this.isactive = isactive;
		this.created = created;
		this.updated = updated;
		this.sendemail = sendemail;
	}

	/* (non-Javadoc)
	 * @see com.geoland.framework.persistence.base.AbstractPersistentObject#getId()
	 */
	@GenericGenerator(name = "generator", strategy = "increment")
	@Id
	@GeneratedValue(generator = "generator")
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	/* (non-Javadoc)
	 * @see com.geoland.framework.persistence.base.AbstractPersistentObject#setId(java.lang.Long)
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Gets the rbac role.
	 *
	 * @return the rbac role
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "role_id")
	public RbacRole getRbacRole() {
		return this.rbacRole;
	}

	/**
	 * Sets the rbac role.
	 *
	 * @param rbacRole the new rbac role
	 */
	public void setRbacRole(RbacRole rbacRole) {
		this.rbacRole = rbacRole;
	}

	/**
	 * Gets the alert rule.
	 *
	 * @return the alert rule
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "alertrule_id")
	public AlertRule getAlertRule() {
		return this.alertRule;
	}

	/**
	 * Sets the alert rule.
	 *
	 * @param alertRule the new alert rule
	 */
	public void setAlertRule(AlertRule alertRule) {
		this.alertRule = alertRule;
	}

	/**
	 * Gets the person by createdby.
	 *
	 * @return the person by createdby
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "createdby", nullable = false)
	public Person getPersonByCreatedby() {
		return this.personByCreatedby;
	}

	/**
	 * Sets the person by createdby.
	 *
	 * @param personByCreatedby the new person by createdby
	 */
	public void setPersonByCreatedby(Person personByCreatedby) {
		this.personByCreatedby = personByCreatedby;
	}

	/**
	 * Gets the person by updatedby.
	 *
	 * @return the person by updatedby
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "updatedby", nullable = false)
	public Person getPersonByUpdatedby() {
		return this.personByUpdatedby;
	}

	/**
	 * Sets the person by updatedby.
	 *
	 * @param personByUpdatedby the new person by updatedby
	 */
	public void setPersonByUpdatedby(Person personByUpdatedby) {
		this.personByUpdatedby = personByUpdatedby;
	}

	/**
	 * Gets the person by person id.
	 *
	 * @return the person by person id
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "person_id")
	public Person getPersonByPersonId() {
		return this.personByPersonId;
	}

	/**
	 * Sets the person by person id.
	 *
	 * @param personByPersonId the new person by person id
	 */
	public void setPersonByPersonId(Person personByPersonId) {
		this.personByPersonId = personByPersonId;
	}

	/**
	 * Gets the organisation.
	 *
	 * @return the organisation
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "org_id", nullable = false)
	public Organisation getOrganisation() {
		return this.organisation;
	}

	/**
	 * Sets the organisation.
	 *
	 * @param organisation the new organisation
	 */
	public void setOrganisation(Organisation organisation) {
		this.organisation = organisation;
	}

	/**
	 * Gets the isactive.
	 *
	 * @return the isactive
	 */
	@Column(name = "isactive", nullable = false, length = 1)
	public String getIsactive() {
		return this.isactive;
	}

	/**
	 * Sets the isactive.
	 *
	 * @param isactive the new isactive
	 */
	public void setIsactive(String isactive) {
		this.isactive = isactive;
	}

	/**
	 * Gets the created.
	 *
	 * @return the created
	 */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", nullable = false, length = 29)
	public Date getCreated() {
		return this.created;
	}

	/**
	 * Sets the created.
	 *
	 * @param created the new created
	 */
	public void setCreated(Date created) {
		this.created = created;
	}

	/**
	 * Gets the updated.
	 *
	 * @return the updated
	 */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated", nullable = false, length = 29)
	public Date getUpdated() {
		return this.updated;
	}

	/**
	 * Sets the updated.
	 *
	 * @param updated the new updated
	 */
	public void setUpdated(Date updated) {
		this.updated = updated;
	}

	/**
	 * Gets the sendemail.
	 *
	 * @return the sendemail
	 */
	@Column(name = "sendemail", length = 1)
	public String getSendemail() {
		return this.sendemail;
	}

	/**
	 * Sets the sendemail.
	 *
	 * @param sendemail the new sendemail
	 */
	public void setSendemail(String sendemail) {
		this.sendemail = sendemail;
	}

}
