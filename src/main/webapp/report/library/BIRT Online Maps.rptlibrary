<?xml version="1.0" encoding="UTF-8"?>
<library xmlns="http://www.eclipse.org/birt/2005/design" version="3.2.23" id="1">
    <property name="createdBy">Eclipse BIRT Designer Version 3.7.2.v20121022-1705 Build &lt;3.7.2.v20121022-1705></property>
    <list-property name="userProperties">
        <structure>
            <property name="name">Version</property>
            <property name="type">string</property>
        </structure>
    </list-property>
    <property name="Version">11SP4F1-2</property>
    <property name="units">in</property>
    <property name="theme">defaultTheme</property>
    <themes>
        <theme name="defaultTheme" id="4"/>
    </themes>
    <components>
        <text name="BIRT Online Maps - 1 - Code" id="122">
            <property name="fontWeight">normal</property>
            <property name="textAlign">left</property>
            <property name="canShrink">false</property>
            <property name="contentType">html</property>
            <text-property name="content"><![CDATA[<div id="_$_dummyDiv12345"></div>
<script>
var _$_id = "";
if (this._viewer) {
    _$_id = this._viewer.getId() + "_";
} else if (window["actuate"] !== undefined &amp;&amp; actuate.getViewer !== undefined) {
    var v = actuate.getViewer("_$_dummyDiv12345");
    if (v)
        _$_id = v.getId() + "_";
} else if (document.getElementsByClassName) {
    if (document.getElementsByClassName("actuateViewerContainer").length == 1)
        _$_id = actuate.getViewer(document.getElementsByClassName("actuateViewerContainer")[0]).getId() + "_";      
} else {
    var exp = RegExp("\\bactuateViewerContainer\\b");
    var items = document.body.getElementsByTagName('*');
    var cls;
    for (var i = 0; i < items.length; i++) {
        cls = items[i].getAttribute("class") || items[i].className;
        if (cls &amp;&amp; exp.test(cls)) {
            _$_id = actuate.getViewer(items[i]).getId() + "_";
            break;
        }
    }
}

var _$ = function (name) {
    return document.getElementById(_$_id + name);
}

if (window["$A"] === undefined) {
    window.$A = function (iterable) {
        if (!iterable) return [];
        if (iterable.toArray) return iterable.toArray();
        var length = iterable.length || 0, results = new Array(length);
        while (length--) results[length] = iterable[length];
        return results;
    }
}

if (!Function.prototype.bind) {
    Function.prototype.bind = function() {
        if (arguments.length < 2 &amp;&amp; typeof arguments[0] == "undefined") return this;
        var __method = this, args = $A(arguments), object = args.shift();
        return function() {
            return __method.apply(object, args.concat($A(arguments)));
        }
    }
}

if (window["actuate"] === undefined)
    window["actuate"] = {};
if (actuate["birt"] === undefined)
    actuate.birt = {};

actuate.birt.util = {
    getColorCode: function(colorCode, defaultColorCode) {
        if (colorCode == null)
            return defaultColorCode;
        colorCode = colorCode.replace(/\s+/g, "").toLowerCase();
        if (colorCode == "")
            return defaultColorCode;

        if (colorCode.substring(0, 1) == "#")
            return colorCode.substring(1);

        if (colorCode.substring(0, 4) == "rgb(") {
            colorCode = colorCode.substring(4, colorCode.length - 1);
            var colors = colorCode.split(",");
            return this.decToHex(colors[0]) + this.decToHex(colors[1]) + this.decToHex(colors[2]);
        }

        switch (colorCode) {
            case "auto": return "000000";
            case "aqua": return "00FFFF";
            case "black": return "000000";
            case "blue": return "0000FF";
            case "fuchsia": return "FF00FF";
            case "gray": return "808080";
            case "green": return "008000";
            case "lime": return "00FF00";
            case "maroon": return "800000";
            case "navy": return "000080";
            case "olive": return "808000";
            case "orange": return "FFA500";
            case "purple": return "800080";
            case "red": return "FF0000";
            case "silver": return "C0C0C0";
            case "teal": return "008080";
            case "white": return "FFFFFF";
            case "yellow": return "FFFF00";
            default: return colorCode.length == 6 ? colorCode : defaultColorCode;
        }
    },
    
    decToHex: function(dec) {
        var hex = parseInt(dec).toString(16);
        if (hex.length == 1)
            hex = "0" + hex;
        return hex;
    },

    loadResources: function(opts) {
        // write something to the document first so that we have the screen rendered
        var div = document.createElement("div");
        div.innerHTML = " ";
        document.body.appendChild(div);
        
        if (opts.styles) {
            for (var i = 0; i < opts.styles.length; i++) {
                var link = document.createElement("link");
                link.rel = "stylesheet";
                link.type = "text/css";
                link.href = opts.styles[i];
                document.body.appendChild(link);
            }
        }

        if (opts.scripts) {
            for (var i = 0; i < opts.scripts.length; i++) {
                var script = document.createElement("script");
                script.type = "text/javascript";
                script.src = opts.scripts[i];

                if (opts.callback) {
                    script.onreadystatechange = script.onload = function() {
                        var state = script.readyState;
                        if (window[opts.check] !== undefined &amp;&amp; !opts.callback.done &amp;&amp; (!state || /loaded|complete/.test(state))) {
                            opts.callback.done = true;
                            opts.callback();
                        }
                    };
                }

                document.body.appendChild(script);
            }
        }
    }
};

actuate.birt.maps = {
    divName: "actuate-birt-map",
    addressValueElemPrefix: "Address_",  
    latElemPrefix: "Lat_",
    lonElemPrefix: "Lon_",
    infoElemPrefix: "Info_",
    pinElemPrefix: "Pin_", 
    addresses: [],
    locations: [],
    areas: [],

    resetPinLetter: false,
    pinLetters: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+[]{}<>",    

    addAddress: function(id, addressValue, options) { //info, group, generateOnly) {
        if (addressValue === undefined || addressValue == null) {
            var addressValueElem = _$(this.addressValueElemPrefix + id);
            if (addressValueElem)
                addressValue = addressValueElem.innerHTML; 
            else
                addressValue = id;
        }
        
        if (options === undefined || options === null)
        	options = {};
        	
        var info = null;
        if (typeof options == "string") {
   	    	info = options;
       	} else if (options.innerHTML !== undefined) {
       		info = options.innerHTML;
       	} else if (options.info !== undefined) {
       		info = options.info;
       	} 
        
        if (info == null) {
            var infoElem = _$(this.infoElemPrefix + id);
            if (infoElem)
                info = infoElem.innerHTML;
            else
                info = addressValue;
        }

        var address = new Object();
        address.id = id;
        address.value = addressValue;
        address.infoHTML = info;
        address.group = options.group;
        address.generateOnly = options.generateOnly;
        if (options.circle)
        	address.circle = this.createCircleObject(id, this.addresses.length, options.circle);
        else
	        address.pin = this.createPinObject(id, this.addresses.length);

        this.addresses.push(address);
        return address;
    },

    addLocation: function(id, lat, lon, options) {
        if (!lat) {
            var latElem = _$(this.latElemPrefix + id);
            if (latElem)
                lat = latElem.innerHTML; else
                return;
        }

        if (!lon) {
            var lonElem = _$(this.lonElemPrefix + id);
            if (lonElem)
                lon = lonElem.innerHTML; else
                return;
        }                
        
        if (options === undefined || options === null)
        	options = {};
        	
        var info = null;
        if (typeof options == "string") {
   	    	info = options;
       	} else if (options.innerHTML !== undefined) {
       		info = options.innerHTML;
       	} else if (options.info !== undefined) {
       		info = options.info;
       	} 
        
        if (info == null) {
            var infoElem = _$(this.infoElemPrefix + id);
            if (infoElem)
                info = infoElem.innerHTML;
            else
                info = lat + ", " + lon;
        }        
        
        var loc = new Object();
        loc.id = id;
        loc.lat = lat;
        loc.lon = lon;
        loc.infoHTML = info;
        loc.group = options.group;
        loc.generateOnly = options.generateOnly;        
        if (options.circle)
        	loc.circle = this.createCircleObject(id, this.locations.length, options.circle);
        else
	        loc.pin = this.createPinObject(id, this.locations.length);

        this.locations.push(loc);
        return loc;

    },

    createPinObject: function(id, idx) {
        var pin = {};
        var pinElem = _$(this.pinElemPrefix + id);
        if (pinElem) {
            if (this.resetPinLetter &amp;&amp; idx < this.pinLetters.length)
                pinElem.innerHTML = this.pinLetters.substring(idx, idx + 1);
            pin.letter = pinElem.innerText;
            pin.letterColor = pinElem.style.color;
            pin.pinColor = pinElem.style.backgroundColor;
        }
        return pin;
    },
    
    createCircleObject: function(id, idx, options) {
    	var circle = {
			strokeColor: options.strokeColor ? options.strokeColor : "#000000",
			strokeOpacity: options.strokeOpacity ? options.strokeOpacity : 0.8,
			strokeWeight: options.strokeWeight ? options.strokeWeight : 1,
			fillColor: options.fillColor ? options.fillColor : "#FD7567",
			fillOpacity: options.fillOpacity ? options.fillOpacity : 0.5,
			radius: options.radius ? options.radius : 500    		
    	};
    	
    	var circleElem = _$(this.pinElemPrefix + id);
    	if (circleElem) {
    		circle.strokeColor = actuate.birt.util.getColorCode(circleElem.style.color, circle.strokeColor);
    		circle.fillColor = actuate.birt.util.getColorCode(circleElem.style.backgroundColor, circle.fillColor);
    	}
    	return circle;
    },

    initArea: function(id, strokeColor, strokeWeight, strokeOpacity, fillColor, fillOpacity, options) {      
        if (options === undefined || options === null)
        	options = {};
        	
        var info = null;
        if (typeof options == "string") {
   	    	info = options;
       	} else if (options.innerHTML !== undefined) {
       		info = options.innerHTML;
       	} else if (options.info !== undefined) {
       		info = options.info;
       	} 
        
        if (info == null) {
            var infoElem = _$(this.infoElemPrefix + id);
            if (infoElem)
                info = infoElem.innerHTML;
            else
                info = options.group ? id + " - " + group : id;
        }   
            
        if (!fillColor) {
        	var pinElem = _$(this.pinElemPrefix + id);
        	if (pinElem) {
        		if (this.resetPinLetter &amp;&amp; idx < this.pinLetters.length) {
        			var idx = this.areas.length;
	                pinElem.innerHTML = this.pinLetters.substring(idx, idx + 1);
	            }
	            fillColor = pinElem.style.backgroundColor;
        	} else {
        		fillColor = "#0000FF";
        	}
        }  
        
        var area = new Object();
        area.id = id;
        area.points = [];
        area.strokeColor = strokeColor;
        area.strokeWeight = strokeWeight;
        area.strokeOpacity = strokeOpacity;
        area.fillColor = fillColor;
        area.fillOpacity = fillOpacity;
        area.infoHTML = info;
        area.group = options.group;
        area.generateOnly = options.generateOnly;
        this.areas.push(area);
        return area;
    },
    
    addPointsToArea: function(points, inverted) {
        for (var i = 0; i < points.length; i++) {
            if (points[i]["lat"] !== undefined &amp;&amp; points[i]["lon"] !== undefined) {
                this.addPointToArea(points[i]["lat"], points[i]["lon"]);
            } else {
                if (inverted)
                    this.addPointToArea(points[i][1], points[i][0]);
                else
                    this.addPointToArea(points[i][0], points[i][1]);
            }
        }
    },

    addPointToArea: function(lat, lon) {
        this.areas[this.areas.length - 1].points.push({lat: lat, lon: lon});
    }
};

actuate.birt.maps.google = {
    map: null,
    geoCoder: null,
    initZoom: 4,
    initLat: 38,
    initLon: -92,     
    maxLng: -1000,
    maxLat: -1000,
    minLng: 0,
    minLat: 0,
    retryAddresses: [],    
    processedAddresses: 0,
    geoCodingStart: 0,
    geoCodingMaxZoomTime: 2000,
    geoCodingMaxTime: 10000,
    geoCodingRetryTime: 500,

    start: function() {
        if (window["google"] === undefined || google["maps"] === undefined) {
            var autoloadJSON = "{modules:[{name:\"maps\",version:3,callback:\"actuate.birt.maps.google.createMap\",other_params:\"sensor=false\"}]}";
            var scriptSrc = "http://www.google.com/jsapi?autoload=" + encodeURIComponent(autoloadJSON);
            actuate.birt.util.loadResources({scripts: [scriptSrc]});
        } else {
            actuate.birt.maps.google.loadMap.bind(actuate.birt.maps.google)();
        }
    },

    createMap: function() {
        actuate.birt.maps.google.loadMap.bind(actuate.birt.maps.google)();
    },

    loadMap: function() {
        var mapOptions = {
            zoom: this.initZoom,
            center: new google.maps.LatLng(this.initLat, this.initLon),
            scrollwheel: false,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            navigationControlOptions: {style: google.maps.NavigationControlStyle.SMALL, position: google.maps.ControlPosition.TOP_RIGHT}            
        };
        this.map = new google.maps.Map(document.getElementById(actuate.birt.maps.divName), mapOptions);
        
        this.infoWindow = new google.maps.InfoWindow();

        var i;
        if (actuate.birt.maps.addresses != null &amp;&amp; actuate.birt.maps.addresses.length > 0) {
            this.geoCoder = new google.maps.Geocoder();
            this.geoCodingStart = new Date().getTime();
            for (i = 0; i < actuate.birt.maps.addresses.length; i++) {
                this.loadAddress(actuate.birt.maps.addresses[i]);
            }
        }

        if (actuate.birt.maps.locations != null &amp;&amp; actuate.birt.maps.locations.length > 0) {
            for (i = 0; i < actuate.birt.maps.locations.length; i++) {
                this.loadLocation(actuate.birt.maps.locations[i]);
            }
        }

        if (actuate.birt.maps.areas != null &amp;&amp; actuate.birt.maps.areas.length > 0) {
            for (i = 0; i < actuate.birt.maps.areas.length; i++) {
                this.loadArea(actuate.birt.maps.areas[i]);
            }
        }

        this.finishLoading();
    },

    loadRetryAddresses: function() {
        var elapsed = new Date().getTime() - this.geoCodingStart;
        if (elapsed > this.geoCodingMaxZoomTime)
            this.finishLoading();
        if (elapsed > this.geoCodingMaxTime)
            return;     
            
        this.processedAddresses = this.processedAddresses - this.retryAddresses.length;
        var tmpAddresses = this.retryAddresses;
        this.retryAddresses = [];
        for (var i = 0; i < tmpAddresses.length; i++) {
            this.loadAddress(tmpAddresses[i]);
        }
    },

    loadAddress: function(address) {
        this.geoCoder.geocode({address: address.value}, function(results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                this.adjustMinMaxBoundaries(results[0].geometry.location);
                this.createPointOverlay(address, results[0].geometry.location);           
            } else {
                this.retryAddresses.push(address);
            }

            this.processedAddresses++;
            if (this.processedAddresses >= actuate.birt.maps.addresses.length) {
                if (this.retryAddresses.length > 0)
                    setTimeout(function() {this.loadRetryAddresses()}.bind(this), this.geoCodingRetryTime);
                else
                    this.finishLoading();
            }
        }.bind(this));
    },

    loadLocation: function(loc) {
        var point = new google.maps.LatLng(loc.lat, loc.lon);
        this.adjustMinMaxBoundaries(point);
        this.createPointOverlay(loc, point);
    },

    loadArea: function(area) {
        if (!area.points)
            return;

        var latLngPoints = [];
        for (var i = 0; i < area.points.length; i++) {
            latLngPoints.push(new google.maps.LatLng(area.points[i].lat, area.points[i].lon));
        }

        var polygonOptions = {
            map: area.generateOnly ? null : this.map,
            paths: latLngPoints,
            fillColor: area.fillColor,
            fillOpacity: area.fillOpacity,
            strokeColor: area.strokeColor,
            strokeOpacity: area.strokeOpacity,
            strokeWeight: area.strokeWeight
        };
        var polygon = new google.maps.Polygon(polygonOptions);
        area.overlay = polygon;
        
        if (area.infoHTML) {                    
            google.maps.event.addListener(polygon, 'click', function(evt) {
                var contentElem = document.createElement("div");
                contentElem.innerHTML = area.infoHTML;
                this.infoWindow.close();  
                this.infoWindow.setContent(contentElem.firstChild);
                this.infoWindow.setPosition(evt.latLng);
                this.infoWindow.open(this.map);
            }.bind(this));
        }        
        
        var bounds = this.getPolygonBounds(polygon);
        this.adjustMinMaxBoundaries(bounds.getNorthEast());
        this.adjustMinMaxBoundaries(bounds.getSouthWest());
    },

    createPointOverlay: function(item, point) {
        var overlay;
        
        if (item.circle) {
	        var circleOptions = {
				map: item.generateOnly ? null : this.map,
				center: point,
				clickable: item.infoHTML ? true : false,
				strokeColor: item.circle.strokeColor,
				strokeOpacity: item.circle.strokeOpacity,
				strokeWeight: item.circle.strokeWeight,
				fillColor: item.circle.fillColor,
				fillOpacity: item.circle.fillOpacity,
				radius: item.circle.radius
			}
			overlay = new google.maps.Circle(circleOptions);

		} else {        
    	    var title = item.value ? item.value : item.infoHTML &amp;&amp; item.infoHTML.length < 50 ? item.infoHTML : null;        
        	var markerOptions = {
            	map: item.generateOnly ? null : this.map,
	            position: point,
    	        icon: new google.maps.MarkerImage(this.createPinIconURL(item)),            
        	    shadow: new google.maps.MarkerImage(this.createPinShadowURL(item), null, null, new google.maps.Point(13, 37)),
            	title: title
	        };        
    	    overlay = new google.maps.Marker(markerOptions);
        }
                
        item.overlay = overlay;

        if (item.infoHTML) {        
            google.maps.event.addListener(overlay, 'click', function(evt) {
                var contentElem = document.createElement("div");
                contentElem.innerHTML = item.infoHTML;  
                this.infoWindow.close();
                this.infoWindow.setContent(contentElem.firstChild);
                if (overlay.position) {
                	this.infoWindow.open(this.map, overlay);
                } else {
	                this.infoWindow.setPosition(evt.latLng);
    	            this.infoWindow.open(this.map);
                }
            }.bind(this));
        }

        return overlay;
    },
    
    createPinIconURL: function(item) {
        if (item.iconURL &amp;&amp; item.iconURL != "") {
            return item.iconURL;
        } else if (item.googleIconURL &amp;&amp; item.googleIconURL != "") {
            return "http://www.google.com/intl/en_us/mapfiles/ms/micons/" + item.googleIconURL;
        } else if (item.pin) {
            var letter = (item.pin.letter &amp;&amp; item.pin.letter != "" &amp;&amp; item.pin.letter != "&amp;nbsp;") ? item.pin.letter : " ";
            var pinColor = actuate.birt.util.getColorCode(item.pin.pinColor, "FD7567");
            var letterColor = actuate.birt.util.getColorCode(item.pin.letterColor, "000000");

            return "http://chart.apis.google.com/chart?chst=d_map_pin_letter&amp;chld=" + encodeURIComponent(letter) + "|" + pinColor + "|" + letterColor;
        } else {
            return "http://chart.apis.google.com/chart?chst=d_map_pin_letter&amp;chld=+|FD7567|000000";
        }
    },
    
    createPinShadowURL: function(item) {
        return "http://chart.apis.google.com/chart?chst=d_map_pin_shadow";
    },    
    
    addAllOverlaysForGroup: function(group) {
        this.addOverlayArrayForGroup(actuate.birt.maps.addresses, group);
        this.addOverlayArrayForGroup(actuate.birt.maps.locations, group);
        this.addOverlayArrayForGroup(actuate.birt.maps.areas, group);       
    },
    
    addOverlayArrayForGroup: function(itemArray, group) {
        if (itemArray != null &amp;&amp; itemArray.length > 0) {
            for (i = 0; i < itemArray.length; i++) {
                this.addOverlayForGroup(itemArray[i], group);
            }
        }
    },
    
    addOverlayForGroup: function(item, group) {
        if (item.group == group &amp;&amp; item.overlay)
            item.overlay.setMap(this.map);    
    },
    
    removeAllOverlaysForGroup: function(group) {
        this.removeOverlayArrayForGroup(actuate.birt.maps.addresses, group);
        this.removeOverlayArrayForGroup(actuate.birt.maps.locations, group);
        this.removeOverlayArrayForGroup(actuate.birt.maps.areas, group);
    },
    
    removeOverlayArrayForGroup: function(itemArray, group) {
        if (itemArray != null &amp;&amp; itemArray.length > 0) {
            for (i = 0; i < itemArray.length; i++) {
                this.removeOverlayForGroup(itemArray[i], group);
            }
        }
    },
    
    removeOverlayForGroup: function(item, group) {
        if (item.group == group &amp;&amp; item.overlay)
            item.overlay.setMap(null);
    },
    
    getPolygonBounds: function(polygon) {
        var bounds = new google.maps.LatLngBounds;
        polygon.getPath().forEach(function(latLng){bounds.extend(latLng);});
        return bounds;
    },

    adjustMinMaxBoundaries: function(point) {
        if (this.maxLng == -1000) {
            this.maxLng = point.lng();
            this.minLng = point.lng();
            this.maxLat = point.lat();
            this.minLat = point.lat();
            return;
        }

        if (point.lng() > this.maxLng)
            this.maxLng = point.lng();

        if (point.lng() < this.minLng)
            this.minLng = point.lng();

        if (point.lat() > this.maxLat)
            this.maxLat = point.lat();

        if (point.lat() < this.minLat)
            this.minLat = point.lat();
    },

    finishLoading: function() {
        if (this.maxLng == -1000)
            return;

        var bounds = new google.maps.LatLngBounds(new google.maps.LatLng(this.minLat, this.minLng), new google.maps.LatLng(this.maxLat, this.maxLng));
        google.maps.event.addListenerOnce(this.map, "bounds_changed", function(){
                if (this.map.getZoom() > 15)
                    this.map.setZoom(15);
            }.bind(this)
        );        
        this.map.fitBounds(bounds);
    }
};
</script>]]></text-property>
        </text>
        <text name="BIRT Online Maps - 3 - Start Google Maps" id="123">
            <property name="canShrink">false</property>
            <property name="contentType">html</property>
            <text-property name="content"><![CDATA[<script>setTimeout(actuate.birt.maps.google.start, 1);</script>]]></text-property>
        </text>
        <text name="BIRT Online Maps - 1 - ResetPinLetter" id="124">
            <property name="fontWeight">normal</property>
            <property name="textAlign">left</property>
            <property name="canShrink">false</property>
            <property name="contentType">html</property>
            <text-property name="content"><![CDATA[<script>actuate.birt.maps.resetPinLetter = true;</script>]]></text-property>
        </text>
        <text name="BIRT Online Maps - 1 - Container" id="125">
            <property name="fontWeight">normal</property>
            <property name="textAlign">left</property>
            <property name="canShrink">false</property>
            <property name="contentType">html</property>
            <text-property name="content"><![CDATA[<div id="actuate-birt-map" style="width:100%;height:400px;text-align:center;">
	Loading Map<br>Please Wait...
</div>

]]></text-property>
        </text>
        <text name="BIRT Online Maps - 2 a - Add Address" id="110">
            <property name="contentType">html</property>
            <text-property name="content"><![CDATA[<script>actuate.birt.maps.addAddress(<value-of>row.__rownum</value-of>);</script>]]></text-property>
        </text>
        <text name="BIRT Online Maps - 2 b - Add Location" id="259">
            <property name="contentType">html</property>
            <text-property name="content"><![CDATA[<script>actuate.birt.maps.addLocation(<value-of>row.__rownum</value-of>, <value-of>row["Lat"]</value-of>, <value-of>row["Lon"]</value-of>);</script>]]></text-property>
        </text>
        <text name="BIRT Online Maps - 2 c1 - Init Area" id="258">
            <property name="comments">initArea(id, strokeColor, strokeWeight, strokeOpacity, fillColor, fillOpacity)</property>
            <property name="contentType">html</property>
            <text-property name="content"><![CDATA[<script>actuate.birt.maps.initArea(<value-of>row.__rownum</value-of>, "#0000FF", 0.5, 1, "#0000FF", 0.25);</script>]]></text-property>
        </text>
        <text name="BIRT Online Maps - 2 c2 - Add Point to Area" id="74">
            <property name="contentType">html</property>
            <text-property name="content"><![CDATA[<script>actuate.birt.maps.addPointToArea(<value-of>row["Lat"]</value-of>, <value-of>row["Lon"]</value-of>);</script>]]></text-property>
        </text>
    </components>
    <page-setup>
        <simple-master-page name="NewSimpleMasterPage" id="3">
            <property name="topMargin">1in</property>
            <property name="leftMargin">1.25in</property>
            <property name="bottomMargin">1in</property>
            <property name="rightMargin">1.25in</property>
        </simple-master-page>
    </page-setup>
</library>
