package com.geoland.kfis.model;

// Generated Feb 11, 2015 2:26:59 AM by Hibernate Tools 3.4.0.CR1

import com.geoland.framework.persistence.base.*;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.annotations.GenericGenerator;

// TODO: Auto-generated Javadoc
/**
 * FiskosImport generated by hbm2java.
 */
@Entity
@Table(name = "tfrm_fiskos_import", schema = "public")
public class FiskosImport extends AbstractPersistentObject implements
		java.io.Serializable {
	
	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The id. */
	private Long id;
	
	/** The person by created by. */
	private Person personByCreatedBy;
	
	/** The management unit. */
	private ManagementUnit managementUnit;
	
	/** The region. */
	private Region region;
	
	/** The person by changed by. */
	private Person personByChangedBy;
	
	/** The trnx id. */
	private String trnxId;
	
	/** The version nr. */
	private Long versionNr;
	
	/** The isactive. */
	private String isactive;
	
	/** The start date. */
	private Date startDate;
	
	/** The end date. */
	private Date endDate;
	
	/** The created date. */
	private Date createdDate;
	
	/** The changed date. */
	private Date changedDate;
	
	/** The note. */
	private String note;
	
	/** The fiskos datas. */
	private Set<FiskosData> fiskosDatas = new HashSet<FiskosData>(0);

	/**
	 * Instantiates a new fiskos import.
	 */
	public FiskosImport() {
	}

	/**
	 * Instantiates a new fiskos import.
	 *
	 * @param personByCreatedBy the person by created by
	 * @param managementUnit the management unit
	 * @param region the region
	 * @param personByChangedBy the person by changed by
	 * @param trnxId the trnx id
	 * @param versionNr the version nr
	 * @param isactive the isactive
	 * @param startDate the start date
	 * @param endDate the end date
	 * @param createdDate the created date
	 * @param changedDate the changed date
	 */
	public FiskosImport(Person personByCreatedBy,
			ManagementUnit managementUnit, Region region,
			Person personByChangedBy, String trnxId, Long versionNr,
			String isactive, Date startDate, Date endDate, Date createdDate,
			Date changedDate) {
		this.personByCreatedBy = personByCreatedBy;
		this.managementUnit = managementUnit;
		this.region = region;
		this.personByChangedBy = personByChangedBy;
		this.trnxId = trnxId;
		this.versionNr = versionNr;
		this.isactive = isactive;
		this.startDate = startDate;
		this.endDate = endDate;
		this.createdDate = createdDate;
		this.changedDate = changedDate;
	}

	/**
	 * Instantiates a new fiskos import.
	 *
	 * @param personByCreatedBy the person by created by
	 * @param managementUnit the management unit
	 * @param region the region
	 * @param personByChangedBy the person by changed by
	 * @param trnxId the trnx id
	 * @param versionNr the version nr
	 * @param isactive the isactive
	 * @param startDate the start date
	 * @param endDate the end date
	 * @param createdDate the created date
	 * @param changedDate the changed date
	 * @param note the note
	 * @param fiskosDatas the fiskos datas
	 */
	public FiskosImport(Person personByCreatedBy,
			ManagementUnit managementUnit, Region region,
			Person personByChangedBy, String trnxId, Long versionNr,
			String isactive, Date startDate, Date endDate, Date createdDate,
			Date changedDate, String note, Set<FiskosData> fiskosDatas) {
		this.personByCreatedBy = personByCreatedBy;
		this.managementUnit = managementUnit;
		this.region = region;
		this.personByChangedBy = personByChangedBy;
		this.trnxId = trnxId;
		this.versionNr = versionNr;
		this.isactive = isactive;
		this.startDate = startDate;
		this.endDate = endDate;
		this.createdDate = createdDate;
		this.changedDate = changedDate;
		this.note = note;
		this.fiskosDatas = fiskosDatas;
	}

	/* (non-Javadoc)
	 * @see com.geoland.framework.persistence.base.AbstractPersistentObject#getId()
	 */
	@GenericGenerator(name = "generator", strategy = "increment")
	@Id
	@GeneratedValue(generator = "generator")
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	/* (non-Javadoc)
	 * @see com.geoland.framework.persistence.base.AbstractPersistentObject#setId(java.lang.Long)
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Gets the person by created by.
	 *
	 * @return the person by created by
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "created_by", nullable = false)
	public Person getPersonByCreatedBy() {
		return this.personByCreatedBy;
	}

	/**
	 * Sets the person by created by.
	 *
	 * @param personByCreatedBy the new person by created by
	 */
	public void setPersonByCreatedBy(Person personByCreatedBy) {
		this.personByCreatedBy = personByCreatedBy;
	}

	/**
	 * Gets the management unit.
	 *
	 * @return the management unit
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "mu_id", nullable = false)
	public ManagementUnit getManagementUnit() {
		return this.managementUnit;
	}

	/**
	 * Sets the management unit.
	 *
	 * @param managementUnit the new management unit
	 */
	public void setManagementUnit(ManagementUnit managementUnit) {
		this.managementUnit = managementUnit;
	}

	/**
	 * Gets the region.
	 *
	 * @return the region
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "region_id", nullable = false)
	public Region getRegion() {
		return this.region;
	}

	/**
	 * Sets the region.
	 *
	 * @param region the new region
	 */
	public void setRegion(Region region) {
		this.region = region;
	}

	/**
	 * Gets the person by changed by.
	 *
	 * @return the person by changed by
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "changed_by", nullable = false)
	public Person getPersonByChangedBy() {
		return this.personByChangedBy;
	}

	/**
	 * Sets the person by changed by.
	 *
	 * @param personByChangedBy the new person by changed by
	 */
	public void setPersonByChangedBy(Person personByChangedBy) {
		this.personByChangedBy = personByChangedBy;
	}

	/**
	 * Gets the trnx id.
	 *
	 * @return the trnx id
	 */
	@Column(name = "trnx_id", nullable = false, length = 36)
	public String getTrnxId() {
		return this.trnxId;
	}

	/**
	 * Sets the trnx id.
	 *
	 * @param trnxId the new trnx id
	 */
	public void setTrnxId(String trnxId) {
		this.trnxId = trnxId;
	}

	/**
	 * Gets the version nr.
	 *
	 * @return the version nr
	 */
	@Column(name = "version_nr", nullable = false)
	public Long getVersionNr() {
		return this.versionNr;
	}

	/**
	 * Sets the version nr.
	 *
	 * @param versionNr the new version nr
	 */
	public void setVersionNr(Long versionNr) {
		this.versionNr = versionNr;
	}

	/**
	 * Gets the isactive.
	 *
	 * @return the isactive
	 */
	@Column(name = "isactive", nullable = false, length = 1)
	public String getIsactive() {
		return this.isactive;
	}

	/**
	 * Sets the isactive.
	 *
	 * @param isactive the new isactive
	 */
	public void setIsactive(String isactive) {
		this.isactive = isactive;
	}

	/**
	 * Gets the start date.
	 *
	 * @return the start date
	 */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "start_date", nullable = false, length = 29)
	public Date getStartDate() {
		return this.startDate;
	}

	/**
	 * Sets the start date.
	 *
	 * @param startDate the new start date
	 */
	public void setStartDate(Date startDate) {
		this.startDate = startDate;
	}

	/**
	 * Gets the end date.
	 *
	 * @return the end date
	 */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "end_date", nullable = false, length = 29)
	public Date getEndDate() {
		return this.endDate;
	}

	/**
	 * Sets the end date.
	 *
	 * @param endDate the new end date
	 */
	public void setEndDate(Date endDate) {
		this.endDate = endDate;
	}

	/**
	 * Gets the created date.
	 *
	 * @return the created date
	 */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_date", nullable = false, length = 29)
	public Date getCreatedDate() {
		return this.createdDate;
	}

	/**
	 * Sets the created date.
	 *
	 * @param createdDate the new created date
	 */
	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}

	/**
	 * Gets the changed date.
	 *
	 * @return the changed date
	 */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "changed_date", nullable = false, length = 29)
	public Date getChangedDate() {
		return this.changedDate;
	}

	/**
	 * Sets the changed date.
	 *
	 * @param changedDate the new changed date
	 */
	public void setChangedDate(Date changedDate) {
		this.changedDate = changedDate;
	}

	/**
	 * Gets the note.
	 *
	 * @return the note
	 */
	@Column(name = "note")
	public String getNote() {
		return this.note;
	}

	/**
	 * Sets the note.
	 *
	 * @param note the new note
	 */
	public void setNote(String note) {
		this.note = note;
	}

	/**
	 * Gets the fiskos datas.
	 *
	 * @return the fiskos datas
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "fiskosImport")
	public Set<FiskosData> getFiskosDatas() {
		return this.fiskosDatas;
	}

	/**
	 * Sets the fiskos datas.
	 *
	 * @param fiskosDatas the new fiskos datas
	 */
	public void setFiskosDatas(Set<FiskosData> fiskosDatas) {
		this.fiskosDatas = fiskosDatas;
	}

}
