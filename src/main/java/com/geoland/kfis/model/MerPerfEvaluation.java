package com.geoland.kfis.model;

// Generated Feb 4, 2016 9:27:08 AM by Hibernate Tools 3.4.0.CR1

import com.geoland.framework.persistence.base.*;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.annotations.GenericGenerator;

// TODO: Auto-generated Javadoc
/**
 * MerPerfEvaluation generated by hbm2java.
 */
@Entity
@Table(name = "tmer_evaluation_perf", schema = "public")
public class MerPerfEvaluation extends AbstractPersistentObject implements
		java.io.Serializable {

	/** The id. */
	private Long id;
	
	/** The person. */
	private Person person;
	
	/** The mer sub indicator. */
	private MerSubIndicator merSubIndicator;
	
	/** The eval date. */
	private Date evalDate;
	
	/** The target. */
	private Double target;
	
	/** The actual. */
	private Double actual;
	
	/** The note. */
	private String note;
	
	/** The created date. */
	private Date createdDate;

	/**
	 * Instantiates a new mer perf evaluation.
	 */
	public MerPerfEvaluation() {
	}

	/**
	 * Instantiates a new mer perf evaluation.
	 *
	 * @param person the person
	 * @param merSubIndicator the mer sub indicator
	 * @param evalDate the eval date
	 * @param actual the actual
	 * @param createdDate the created date
	 */
	public MerPerfEvaluation(Person person, MerSubIndicator merSubIndicator,
			Date evalDate, Double actual, Date createdDate) {
		this.person = person;
		this.merSubIndicator = merSubIndicator;
		this.evalDate = evalDate;
		this.actual = actual;
		this.createdDate = createdDate;
	}

	/**
	 * Instantiates a new mer perf evaluation.
	 *
	 * @param person the person
	 * @param merSubIndicator the mer sub indicator
	 * @param evalDate the eval date
	 * @param target the target
	 * @param actual the actual
	 * @param note the note
	 * @param createdDate the created date
	 */
	public MerPerfEvaluation(Person person, MerSubIndicator merSubIndicator,
			Date evalDate, Double target, Double actual, String note,
			Date createdDate) {
		this.person = person;
		this.merSubIndicator = merSubIndicator;
		this.evalDate = evalDate;
		this.target = target;
		this.actual = actual;
		this.note = note;
		this.createdDate = createdDate;
	}

	/* (non-Javadoc)
	 * @see com.geoland.framework.persistence.base.AbstractPersistentObject#getId()
	 */
	@GenericGenerator(name = "generator", strategy = "increment")
	@Id
	@GeneratedValue(generator = "generator")
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	/* (non-Javadoc)
	 * @see com.geoland.framework.persistence.base.AbstractPersistentObject#setId(java.lang.Long)
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Gets the person.
	 *
	 * @return the person
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "created_by", nullable = false)
	public Person getPerson() {
		return this.person;
	}

	/**
	 * Sets the person.
	 *
	 * @param person the new person
	 */
	public void setPerson(Person person) {
		this.person = person;
	}

	/**
	 * Gets the mer sub indicator.
	 *
	 * @return the mer sub indicator
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "sub_indicator_id", nullable = false)
	public MerSubIndicator getMerSubIndicator() {
		return this.merSubIndicator;
	}

	/**
	 * Sets the mer sub indicator.
	 *
	 * @param merSubIndicator the new mer sub indicator
	 */
	public void setMerSubIndicator(MerSubIndicator merSubIndicator) {
		this.merSubIndicator = merSubIndicator;
	}

	/**
	 * Gets the eval date.
	 *
	 * @return the eval date
	 */
	@Temporal(TemporalType.DATE)
	@Column(name = "eval_date", nullable = false, length = 13)
	public Date getEvalDate() {
		return this.evalDate;
	}

	/**
	 * Sets the eval date.
	 *
	 * @param evalDate the new eval date
	 */
	public void setEvalDate(Date evalDate) {
		this.evalDate = evalDate;
	}

	/**
	 * Gets the target.
	 *
	 * @return the target
	 */
	@Column(name = "target", precision = 17, scale = 17)
	public Double getTarget() {
		return this.target;
	}

	/**
	 * Sets the target.
	 *
	 * @param target the new target
	 */
	public void setTarget(Double target) {
		this.target = target;
	}

	/**
	 * Gets the actual.
	 *
	 * @return the actual
	 */
	@Column(name = "actual", nullable = false, precision = 17, scale = 17)
	public Double getActual() {
		return this.actual;
	}

	/**
	 * Sets the actual.
	 *
	 * @param actual the new actual
	 */
	public void setActual(Double actual) {
		this.actual = actual;
	}

	/**
	 * Gets the note.
	 *
	 * @return the note
	 */
	@Column(name = "note")
	public String getNote() {
		return this.note;
	}

	/**
	 * Sets the note.
	 *
	 * @param note the new note
	 */
	public void setNote(String note) {
		this.note = note;
	}

	/**
	 * Gets the created date.
	 *
	 * @return the created date
	 */
	@Temporal(TemporalType.DATE)
	@Column(name = "created_date", nullable = false, length = 13)
	public Date getCreatedDate() {
		return this.createdDate;
	}

	/**
	 * Sets the created date.
	 *
	 * @param createdDate the new created date
	 */
	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}

}
