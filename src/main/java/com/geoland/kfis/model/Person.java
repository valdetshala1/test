package com.geoland.kfis.model;

// Generated May 20, 2015 2:33:43 PM by Hibernate Tools 4.0.0

import org.hibernate.annotations.Type;
import com.geoland.kfis.persistence.hibernate.usertypes.Ethnicity;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

// TODO: Auto-generated Javadoc
/**
 * Person generated by hbm2java.
 */
@Entity
@Table(name = "tperson", schema = "public", uniqueConstraints = @UniqueConstraint(columnNames = "personal_id"))
public class Person extends Party implements java.io.Serializable {
	
	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The party. */
	private Party party;
	
	/** The first name. */
	private String firstName;
	
	/** The last name. */
	private String lastName;
	
	/** The birthdate. */
	private Date birthdate;
	
	/** The personal id. */
	private String personalId;
	
	/** The gender. */
	private Character gender;
	
	/** The degree. */
	private String degree;
	
	/** The ethnicity. */
	private Ethnicity ethnicity;
	
	/** The pers with lmt abilities. */
	private boolean persWithLmtAbilities;
	
	/** The notes. */
	private String notes;
	
	/** The photo. */
	private byte[] photo;
	
	/** The mer strat evaluations. */
	private Set<MerStratEvaluation> merStratEvaluations = new HashSet<MerStratEvaluation>(
			0);
	
	/** The dp mngmt settingses for createdby. */
	private Set<DpMngmtSettings> dpMngmtSettingsesForCreatedby = new HashSet<DpMngmtSettings>(
			0);
	
	/** The stand planting activities for pl created by. */
	private Set<StandPlantingActivity> standPlantingActivitiesForPlCreatedBy = new HashSet<StandPlantingActivity>(
			0);
	
	/** The locations for createdby. */
	private Set<Location> locationsForCreatedby = new HashSet<Location>(0);
	
	/** The protection activities for im created by. */
	private Set<ProtectionActivity> protectionActivitiesForImCreatedBy = new HashSet<ProtectionActivity>(
			0);
	
	/** The requisition accounts for createdby. */
	private Set<RequisitionAccount> requisitionAccountsForCreatedby = new HashSet<RequisitionAccount>(
			0);
	
	/** The uom trls for updatedby. */
	private Set<UomTrl> uomTrlsForUpdatedby = new HashSet<UomTrl>(0);
	
	/** The mer sub projects. */
	private Set<MerSubProject> merSubProjects = new HashSet<MerSubProject>(0);
	
	/** The currencies for updatedby. */
	private Set<Currency> currenciesForUpdatedby = new HashSet<Currency>(0);
	
	/** The doc types for createdby. */
	private Set<DocType> docTypesForCreatedby = new HashSet<DocType>(0);
	
	/** The dp mngmts for owner id. */
	private Set<DpMngmt> dpMngmtsForOwnerId = new HashSet<DpMngmt>(0);
	
	/** The seed activities for pr created by. */
	private Set<SeedActivity> seedActivitiesForPrCreatedBy = new HashSet<SeedActivity>(
			0);
	
	/** The uoms for updatedby. */
	private Set<Uom> uomsForUpdatedby = new HashSet<Uom>(0);
	
	/** The requisition accounts for updatedby. */
	private Set<RequisitionAccount> requisitionAccountsForUpdatedby = new HashSet<RequisitionAccount>(
			0);
	
	/** The publishings. */
	private Set<Publishing> publishings = new HashSet<Publishing>(0);
	
	/** The locations for updatedby. */
	private Set<Location> locationsForUpdatedby = new HashSet<Location>(0);
	
	/** The roads. */
	private Set<Road> roads = new HashSet<Road>(0);
	
	/** The dp mngmt statuses for createdby. */
	private Set<DpMngmtStatus> dpMngmtStatusesForCreatedby = new HashSet<DpMngmtStatus>(
			0);
	
	/** The ad languages for updatedby. */
	private Set<AdLanguage> adLanguagesForUpdatedby = new HashSet<AdLanguage>(0);
	
	/** The seed activities for pl created by. */
	private Set<SeedActivity> seedActivitiesForPlCreatedBy = new HashSet<SeedActivity>(
			0);
	
	/** The doc categories for createdby. */
	private Set<DocCategory> docCategoriesForCreatedby = new HashSet<DocCategory>(
			0);
	
	/** The stand harvest activities for im created by. */
	private Set<StandHarvestActivity> standHarvestActivitiesForImCreatedBy = new HashSet<StandHarvestActivity>(
			0);
	
	/** The purchase order items for updatedby. */
	private Set<PurchaseOrderItem> purchaseOrderItemsForUpdatedby = new HashSet<PurchaseOrderItem>(
			0);
	
	/** The dp mngmts for updatedby. */
	private Set<DpMngmt> dpMngmtsForUpdatedby = new HashSet<DpMngmt>(0);
	
	/** The dp mngmt statuses for updatedby. */
	private Set<DpMngmtStatus> dpMngmtStatusesForUpdatedby = new HashSet<DpMngmtStatus>(
			0);
	
	/** The requisition items for createdby. */
	private Set<RequisitionItem> requisitionItemsForCreatedby = new HashSet<RequisitionItem>(
			0);
	
	/** The alert rule trls for updatedby. */
	private Set<AlertRuleTrl> alertRuleTrlsForUpdatedby = new HashSet<AlertRuleTrl>(
			0);
	
	/** The alert recipients for createdby. */
	private Set<AlertRecipient> alertRecipientsForCreatedby = new HashSet<AlertRecipient>(
			0);
	
	/** The mer perf evaluations. */
	private Set<MerPerfEvaluation> merPerfEvaluations = new HashSet<MerPerfEvaluation>(
			0);
	
	/** The alert recipients for person id. */
	private Set<AlertRecipient> alertRecipientsForPersonId = new HashSet<AlertRecipient>(
			0);
	
	/** The stand harvest activities for pl created by. */
	private Set<StandHarvestActivity> standHarvestActivitiesForPlCreatedBy = new HashSet<StandHarvestActivity>(
			0);
	
	/** The currencies for createdby. */
	private Set<Currency> currenciesForCreatedby = new HashSet<Currency>(0);
	
	/** The fiskos imports for created by. */
	private Set<FiskosImport> fiskosImportsForCreatedBy = new HashSet<FiskosImport>(
			0);
	
	/** The activity statuses. */
	private Set<ActivityStatus> activityStatuses = new HashSet<ActivityStatus>(
			0);
	
	/** The uoms for createdby. */
	private Set<Uom> uomsForCreatedby = new HashSet<Uom>(0);
	
	/** The alerts for person id. */
	private Set<Alert> alertsForPersonId = new HashSet<Alert>(0);
	
	/** The requisitions for createdby. */
	private Set<Requisition> requisitionsForCreatedby = new HashSet<Requisition>(
			0);
	
	/** The seed activities for im created by. */
	private Set<SeedActivity> seedActivitiesForImCreatedBy = new HashSet<SeedActivity>(
			0);
	
	/** The seedling inventory PO ss for created by. */
	private Set<SeedlingInventoryPOS> seedlingInventoryPOSsForCreatedBy = new HashSet<SeedlingInventoryPOS>(
			0);
	
	/** The purchase order statuses for createdby. */
	private Set<PurchaseOrderStatus> purchaseOrderStatusesForCreatedby = new HashSet<PurchaseOrderStatus>(
			0);
	
	/** The dp mngmt attaches for updatedby. */
	private Set<DpMngmtAttach> dpMngmtAttachesForUpdatedby = new HashSet<DpMngmtAttach>(
			0);
	
	/** The stand planting activities for im created by. */
	private Set<StandPlantingActivity> standPlantingActivitiesForImCreatedBy = new HashSet<StandPlantingActivity>(
			0);
	
	/** The alert recipients for updatedby. */
	private Set<AlertRecipient> alertRecipientsForUpdatedby = new HashSet<AlertRecipient>(
			0);
	
	/** The alerts for updatedby. */
	private Set<Alert> alertsForUpdatedby = new HashSet<Alert>(0);
	
	/** The protection activities for pl created by. */
	private Set<ProtectionActivity> protectionActivitiesForPlCreatedBy = new HashSet<ProtectionActivity>(
			0);
	
	/** The alert rules for updatedby. */
	private Set<AlertRule> alertRulesForUpdatedby = new HashSet<AlertRule>(0);
	
	/** The bpartner locations for updatedby. */
	private Set<BpartnerLocation> bpartnerLocationsForUpdatedby = new HashSet<BpartnerLocation>(
			0);
	
	/** The annual planning statuses. */
	private Set<AnnualPlanningStatus> annualPlanningStatuses = new HashSet<AnnualPlanningStatus>(
			0);
	
	/** The seedling inventories for changed by. */
	private Set<SeedlingInventory> seedlingInventoriesForChangedBy = new HashSet<SeedlingInventory>(
			0);
	
	/** The alert rule trls for createdby. */
	private Set<AlertRuleTrl> alertRuleTrlsForCreatedby = new HashSet<AlertRuleTrl>(
			0);
	
	/** The mer plan periods. */
	private Set<MerPlanPeriod> merPlanPeriods = new HashSet<MerPlanPeriod>(0);
	
	/** The seedling inventories for created by. */
	private Set<SeedlingInventory> seedlingInventoriesForCreatedBy = new HashSet<SeedlingInventory>(
			0);
	
	/** The annual plannings. */
	private Set<AnnualPlanning> annualPlannings = new HashSet<AnnualPlanning>(0);
	
	/** The fiskos datas. */
	private Set<FiskosData> fiskosDatas = new HashSet<FiskosData>(0);
	
	/** The alert rules for createdby. */
	private Set<AlertRule> alertRulesForCreatedby = new HashSet<AlertRule>(0);
	
	/** The purchase orders for createdby. */
	private Set<PurchaseOrder> purchaseOrdersForCreatedby = new HashSet<PurchaseOrder>(
			0);
	
	/** The mer projects. */
	private Set<MerProject> merProjects = new HashSet<MerProject>(0);
	
	/** The dp mngmts for createdby. */
	private Set<DpMngmt> dpMngmtsForCreatedby = new HashSet<DpMngmt>(0);
	
	/** The requisition statuses for createdby. */
	private Set<RequisitionStatus> requisitionStatusesForCreatedby = new HashSet<RequisitionStatus>(
			0);
	
	/** The alerts for createdby. */
	private Set<Alert> alertsForCreatedby = new HashSet<Alert>(0);
	
	/** The mer strategy docs. */
	private Set<MerStrategyDoc> merStrategyDocs = new HashSet<MerStrategyDoc>(0);
	
	/** The mer resp institutions. */
	private Set<MerRespInstitution> merRespInstitutions = new HashSet<MerRespInstitution>(
			0);
	
	/** The mer finance donors. */
	private Set<MerFinanceDonor> merFinanceDonors = new HashSet<MerFinanceDonor>(
			0);
	
	/** The private requests for requester id. */
	private Set<PrivateRequest> privateRequestsForRequesterId = new HashSet<PrivateRequest>(
			0);
	
	/** The mer strategy executions. */
	private Set<MerStrategyExecution> merStrategyExecutions = new HashSet<MerStrategyExecution>(
			0);
	
	/** The road activities for im created by. */
	private Set<RoadActivity> roadActivitiesForImCreatedBy = new HashSet<RoadActivity>(
			0);
	
	/** The bpartners for updatedby. */
	private Set<Bpartner> bpartnersForUpdatedby = new HashSet<Bpartner>(0);
	
	/** The private requests for pl created by. */
	private Set<PrivateRequest> privateRequestsForPlCreatedBy = new HashSet<PrivateRequest>(
			0);
	
	/** The road activities for pl created by. */
	private Set<RoadActivity> roadActivitiesForPlCreatedBy = new HashSet<RoadActivity>(
			0);
	
	/** The purchase order statuses for updatedby. */
	private Set<PurchaseOrderStatus> purchaseOrderStatusesForUpdatedby = new HashSet<PurchaseOrderStatus>(
			0);
	
	/** The private activities for im created by. */
	private Set<PrivateActivity> privateActivitiesForImCreatedBy = new HashSet<PrivateActivity>(
			0);
	
	/** The dp mngmt attaches for createdby. */
	private Set<DpMngmtAttach> dpMngmtAttachesForCreatedby = new HashSet<DpMngmtAttach>(
			0);
	
	/** The ad languages for createdby. */
	private Set<AdLanguage> adLanguagesForCreatedby = new HashSet<AdLanguage>(0);
	
	/** The requisitions for updatedby. */
	private Set<Requisition> requisitionsForUpdatedby = new HashSet<Requisition>(
			0);
	
	/** The mer sub indicators. */
	private Set<MerSubIndicator> merSubIndicators = new HashSet<MerSubIndicator>(
			0);
	
	/** The requisition statuses for updatedby. */
	private Set<RequisitionStatus> requisitionStatusesForUpdatedby = new HashSet<RequisitionStatus>(
			0);
	
	/** The attendance records. */
	private Set<AttendanceRecord> attendanceRecords = new HashSet<AttendanceRecord>(
			0);
	
	/** The bpartners for createdby. */
	private Set<Bpartner> bpartnersForCreatedby = new HashSet<Bpartner>(0);
	
	/** The activities. */
	private Set<Activity> activities = new HashSet<Activity>(0);
	
	/** The doc categories for updatedby. */
	private Set<DocCategory> docCategoriesForUpdatedby = new HashSet<DocCategory>(
			0);
	
	/** The bpartner locations for createdby. */
	private Set<BpartnerLocation> bpartnerLocationsForCreatedby = new HashSet<BpartnerLocation>(
			0);
	
	/** The employees. */
	private Set<Employee> employees = new HashSet<Employee>(0);
	
	/** The stand silviculture activities for pl created by. */
	private Set<StandSilvicultureActivity> standSilvicultureActivitiesForPlCreatedBy = new HashSet<StandSilvicultureActivity>(
			0);
	
	/** The requisition items for updatedby. */
	private Set<RequisitionItem> requisitionItemsForUpdatedby = new HashSet<RequisitionItem>(
			0);
	
	/** The uom trls for createdby. */
	private Set<UomTrl> uomTrlsForCreatedby = new HashSet<UomTrl>(0);
	
	/** The stand silviculture activities for im created by. */
	private Set<StandSilvicultureActivity> standSilvicultureActivitiesForImCreatedBy = new HashSet<StandSilvicultureActivity>(
			0);
	
	/** The mer indicators. */
	private Set<MerIndicator> merIndicators = new HashSet<MerIndicator>(0);
	
	/** The purchase order items for createdby. */
	private Set<PurchaseOrderItem> purchaseOrderItemsForCreatedby = new HashSet<PurchaseOrderItem>(
			0);
	
	/** The purchase orders for updatedby. */
	private Set<PurchaseOrder> purchaseOrdersForUpdatedby = new HashSet<PurchaseOrder>(
			0);
	
	/** The dp mngmt settingses for updatedby. */
	private Set<DpMngmtSettings> dpMngmtSettingsesForUpdatedby = new HashSet<DpMngmtSettings>(
			0);
	
	/** The doc types for updatedby. */
	private Set<DocType> docTypesForUpdatedby = new HashSet<DocType>(0);
	
	/** The fiskos imports for changed by. */
	private Set<FiskosImport> fiskosImportsForChangedBy = new HashSet<FiskosImport>(
			0);
	
	/** The mer ref sub projects. */
	private Set<MerRefSubProject> merRefSubProjects = new HashSet<MerRefSubProject>(
			0);
	
	/** The seedling inventory PO ss for approved by. */
	private Set<SeedlingInventoryPOS> seedlingInventoryPOSsForApprovedBy = new HashSet<SeedlingInventoryPOS>(
			0);
	
	/** The private activities for pl created by. */
	private Set<PrivateActivity> privateActivitiesForPlCreatedBy = new HashSet<PrivateActivity>(
			0);
	
	/** The seedling inventory PO ss for changed by. */
	private Set<SeedlingInventoryPOS> seedlingInventoryPOSsForChangedBy = new HashSet<SeedlingInventoryPOS>(
			0);
	
	/** The mer strategies. */
	private Set<MerStrategy> merStrategies = new HashSet<MerStrategy>(0);

	/**
	 * Instantiates a new person.
	 */
	public Person() {
	}

	/**
	 * Instantiates a new person.
	 *
	 * @param id the id
	 * @param firstName the first name
	 * @param lastName the last name
	 * @param birthdate the birthdate
	 * @param gender the gender
	 * @param ethnicity the ethnicity
	 * @param persWithLmtAbilities the pers with lmt abilities
	 */
	public Person(Long id, String firstName, String lastName, Date birthdate,
			Character gender, Ethnicity ethnicity, boolean persWithLmtAbilities) {
		this.id = id;
		this.firstName = firstName;
		this.lastName = lastName;
		this.birthdate = birthdate;
		this.gender = gender;
		this.ethnicity = ethnicity;
		this.persWithLmtAbilities = persWithLmtAbilities;
	}

	/**
	 * Instantiates a new person.
	 *
	 * @param id the id
	 * @param party the party
	 * @param firstName the first name
	 * @param lastName the last name
	 * @param birthdate the birthdate
	 * @param personalId the personal id
	 * @param gender the gender
	 * @param degree the degree
	 * @param ethnicity the ethnicity
	 * @param persWithLmtAbilities the pers with lmt abilities
	 * @param notes the notes
	 * @param photo the photo
	 * @param merStratEvaluations the mer strat evaluations
	 * @param dpMngmtSettingsesForCreatedby the dp mngmt settingses for createdby
	 * @param standPlantingActivitiesForPlCreatedBy the stand planting activities for pl created by
	 * @param locationsForCreatedby the locations for createdby
	 * @param protectionActivitiesForImCreatedBy the protection activities for im created by
	 * @param requisitionAccountsForCreatedby the requisition accounts for createdby
	 * @param uomTrlsForUpdatedby the uom trls for updatedby
	 * @param merSubProjects the mer sub projects
	 * @param currenciesForUpdatedby the currencies for updatedby
	 * @param docTypesForCreatedby the doc types for createdby
	 * @param dpMngmtsForOwnerId the dp mngmts for owner id
	 * @param seedActivitiesForPrCreatedBy the seed activities for pr created by
	 * @param uomsForUpdatedby the uoms for updatedby
	 * @param requisitionAccountsForUpdatedby the requisition accounts for updatedby
	 * @param publishings the publishings
	 * @param locationsForUpdatedby the locations for updatedby
	 * @param roads the roads
	 * @param dpMngmtStatusesForCreatedby the dp mngmt statuses for createdby
	 * @param adLanguagesForUpdatedby the ad languages for updatedby
	 * @param seedActivitiesForPlCreatedBy the seed activities for pl created by
	 * @param docCategoriesForCreatedby the doc categories for createdby
	 * @param standHarvestActivitiesForImCreatedBy the stand harvest activities for im created by
	 * @param purchaseOrderItemsForUpdatedby the purchase order items for updatedby
	 * @param dpMngmtsForUpdatedby the dp mngmts for updatedby
	 * @param dpMngmtStatusesForUpdatedby the dp mngmt statuses for updatedby
	 * @param requisitionItemsForCreatedby the requisition items for createdby
	 * @param alertRuleTrlsForUpdatedby the alert rule trls for updatedby
	 * @param alertRecipientsForCreatedby the alert recipients for createdby
	 * @param merPerfEvaluations the mer perf evaluations
	 * @param alertRecipientsForPersonId the alert recipients for person id
	 * @param standHarvestActivitiesForPlCreatedBy the stand harvest activities for pl created by
	 * @param currenciesForCreatedby the currencies for createdby
	 * @param fiskosImportsForCreatedBy the fiskos imports for created by
	 * @param activityStatuses the activity statuses
	 * @param uomsForCreatedby the uoms for createdby
	 * @param alertsForPersonId the alerts for person id
	 * @param requisitionsForCreatedby the requisitions for createdby
	 * @param seedActivitiesForImCreatedBy the seed activities for im created by
	 * @param seedlingInventoryPOSsForCreatedBy the seedling inventory PO ss for created by
	 * @param purchaseOrderStatusesForCreatedby the purchase order statuses for createdby
	 * @param dpMngmtAttachesForUpdatedby the dp mngmt attaches for updatedby
	 * @param standPlantingActivitiesForImCreatedBy the stand planting activities for im created by
	 * @param alertRecipientsForUpdatedby the alert recipients for updatedby
	 * @param alertsForUpdatedby the alerts for updatedby
	 * @param protectionActivitiesForPlCreatedBy the protection activities for pl created by
	 * @param alertRulesForUpdatedby the alert rules for updatedby
	 * @param bpartnerLocationsForUpdatedby the bpartner locations for updatedby
	 * @param annualPlanningStatuses the annual planning statuses
	 * @param seedlingInventoriesForChangedBy the seedling inventories for changed by
	 * @param alertRuleTrlsForCreatedby the alert rule trls for createdby
	 * @param merPlanPeriods the mer plan periods
	 * @param seedlingInventoriesForCreatedBy the seedling inventories for created by
	 * @param annualPlannings the annual plannings
	 * @param fiskosDatas the fiskos datas
	 * @param alertRulesForCreatedby the alert rules for createdby
	 * @param purchaseOrdersForCreatedby the purchase orders for createdby
	 * @param merProjects the mer projects
	 * @param dpMngmtsForCreatedby the dp mngmts for createdby
	 * @param requisitionStatusesForCreatedby the requisition statuses for createdby
	 * @param alertsForCreatedby the alerts for createdby
	 * @param merStrategyDocs the mer strategy docs
	 * @param merRespInstitutions the mer resp institutions
	 * @param merFinanceDonors the mer finance donors
	 * @param privateRequestsForRequesterId the private requests for requester id
	 * @param merStrategyExecutions the mer strategy executions
	 * @param roadActivitiesForImCreatedBy the road activities for im created by
	 * @param bpartnersForUpdatedby the bpartners for updatedby
	 * @param privateRequestsForPlCreatedBy the private requests for pl created by
	 * @param roadActivitiesForPlCreatedBy the road activities for pl created by
	 * @param purchaseOrderStatusesForUpdatedby the purchase order statuses for updatedby
	 * @param privateActivitiesForImCreatedBy the private activities for im created by
	 * @param dpMngmtAttachesForCreatedby the dp mngmt attaches for createdby
	 * @param adLanguagesForCreatedby the ad languages for createdby
	 * @param requisitionsForUpdatedby the requisitions for updatedby
	 * @param merSubIndicators the mer sub indicators
	 * @param requisitionStatusesForUpdatedby the requisition statuses for updatedby
	 * @param attendanceRecords the attendance records
	 * @param bpartnersForCreatedby the bpartners for createdby
	 * @param activities the activities
	 * @param docCategoriesForUpdatedby the doc categories for updatedby
	 * @param bpartnerLocationsForCreatedby the bpartner locations for createdby
	 * @param employees the employees
	 * @param standSilvicultureActivitiesForPlCreatedBy the stand silviculture activities for pl created by
	 * @param requisitionItemsForUpdatedby the requisition items for updatedby
	 * @param uomTrlsForCreatedby the uom trls for createdby
	 * @param standSilvicultureActivitiesForImCreatedBy the stand silviculture activities for im created by
	 * @param merIndicators the mer indicators
	 * @param purchaseOrderItemsForCreatedby the purchase order items for createdby
	 * @param purchaseOrdersForUpdatedby the purchase orders for updatedby
	 * @param dpMngmtSettingsesForUpdatedby the dp mngmt settingses for updatedby
	 * @param docTypesForUpdatedby the doc types for updatedby
	 * @param fiskosImportsForChangedBy the fiskos imports for changed by
	 * @param merRefSubProjects the mer ref sub projects
	 * @param seedlingInventoryPOSsForApprovedBy the seedling inventory PO ss for approved by
	 * @param privateActivitiesForPlCreatedBy the private activities for pl created by
	 * @param seedlingInventoryPOSsForChangedBy the seedling inventory PO ss for changed by
	 * @param merStrategies the mer strategies
	 */
	public Person(
			Long id,
			Party party,
			String firstName,
			String lastName,
			Date birthdate,
			String personalId,
			Character gender,
			String degree,
			Ethnicity ethnicity,
			boolean persWithLmtAbilities,
			String notes,
			byte[] photo,
			Set<MerStratEvaluation> merStratEvaluations,
			Set<DpMngmtSettings> dpMngmtSettingsesForCreatedby,
			Set<StandPlantingActivity> standPlantingActivitiesForPlCreatedBy,
			Set<Location> locationsForCreatedby,
			Set<ProtectionActivity> protectionActivitiesForImCreatedBy,
			Set<RequisitionAccount> requisitionAccountsForCreatedby,
			Set<UomTrl> uomTrlsForUpdatedby,
			Set<MerSubProject> merSubProjects,
			Set<Currency> currenciesForUpdatedby,
			Set<DocType> docTypesForCreatedby,
			Set<DpMngmt> dpMngmtsForOwnerId,
			Set<SeedActivity> seedActivitiesForPrCreatedBy,
			Set<Uom> uomsForUpdatedby,
			Set<RequisitionAccount> requisitionAccountsForUpdatedby,
			Set<Publishing> publishings,
			Set<Location> locationsForUpdatedby,
			Set<Road> roads,
			Set<DpMngmtStatus> dpMngmtStatusesForCreatedby,
			Set<AdLanguage> adLanguagesForUpdatedby,
			Set<SeedActivity> seedActivitiesForPlCreatedBy,
			Set<DocCategory> docCategoriesForCreatedby,
			Set<StandHarvestActivity> standHarvestActivitiesForImCreatedBy,
			Set<PurchaseOrderItem> purchaseOrderItemsForUpdatedby,
			Set<DpMngmt> dpMngmtsForUpdatedby,
			Set<DpMngmtStatus> dpMngmtStatusesForUpdatedby,
			Set<RequisitionItem> requisitionItemsForCreatedby,
			Set<AlertRuleTrl> alertRuleTrlsForUpdatedby,
			Set<AlertRecipient> alertRecipientsForCreatedby,
			Set<MerPerfEvaluation> merPerfEvaluations,
			Set<AlertRecipient> alertRecipientsForPersonId,
			Set<StandHarvestActivity> standHarvestActivitiesForPlCreatedBy,
			Set<Currency> currenciesForCreatedby,
			Set<FiskosImport> fiskosImportsForCreatedBy,
			Set<ActivityStatus> activityStatuses,
			Set<Uom> uomsForCreatedby,
			Set<Alert> alertsForPersonId,
			Set<Requisition> requisitionsForCreatedby,
			Set<SeedActivity> seedActivitiesForImCreatedBy,
			Set<SeedlingInventoryPOS> seedlingInventoryPOSsForCreatedBy,
			Set<PurchaseOrderStatus> purchaseOrderStatusesForCreatedby,
			Set<DpMngmtAttach> dpMngmtAttachesForUpdatedby,
			Set<StandPlantingActivity> standPlantingActivitiesForImCreatedBy,
			Set<AlertRecipient> alertRecipientsForUpdatedby,
			Set<Alert> alertsForUpdatedby,
			Set<ProtectionActivity> protectionActivitiesForPlCreatedBy,
			Set<AlertRule> alertRulesForUpdatedby,
			Set<BpartnerLocation> bpartnerLocationsForUpdatedby,
			Set<AnnualPlanningStatus> annualPlanningStatuses,
			Set<SeedlingInventory> seedlingInventoriesForChangedBy,
			Set<AlertRuleTrl> alertRuleTrlsForCreatedby,
			Set<MerPlanPeriod> merPlanPeriods,
			Set<SeedlingInventory> seedlingInventoriesForCreatedBy,
			Set<AnnualPlanning> annualPlannings,
			Set<FiskosData> fiskosDatas,
			Set<AlertRule> alertRulesForCreatedby,
			Set<PurchaseOrder> purchaseOrdersForCreatedby,
			Set<MerProject> merProjects,
			Set<DpMngmt> dpMngmtsForCreatedby,
			Set<RequisitionStatus> requisitionStatusesForCreatedby,
			Set<Alert> alertsForCreatedby,
			Set<MerStrategyDoc> merStrategyDocs,
			Set<MerRespInstitution> merRespInstitutions,
			Set<MerFinanceDonor> merFinanceDonors,
			Set<PrivateRequest> privateRequestsForRequesterId,
			Set<MerStrategyExecution> merStrategyExecutions,
			Set<RoadActivity> roadActivitiesForImCreatedBy,
			Set<Bpartner> bpartnersForUpdatedby,
			Set<PrivateRequest> privateRequestsForPlCreatedBy,
			Set<RoadActivity> roadActivitiesForPlCreatedBy,
			Set<PurchaseOrderStatus> purchaseOrderStatusesForUpdatedby,
			Set<PrivateActivity> privateActivitiesForImCreatedBy,
			Set<DpMngmtAttach> dpMngmtAttachesForCreatedby,
			Set<AdLanguage> adLanguagesForCreatedby,
			Set<Requisition> requisitionsForUpdatedby,
			Set<MerSubIndicator> merSubIndicators,
			Set<RequisitionStatus> requisitionStatusesForUpdatedby,
			Set<AttendanceRecord> attendanceRecords,
			Set<Bpartner> bpartnersForCreatedby,
			Set<Activity> activities,
			Set<DocCategory> docCategoriesForUpdatedby,
			Set<BpartnerLocation> bpartnerLocationsForCreatedby,
			Set<Employee> employees,
			Set<StandSilvicultureActivity> standSilvicultureActivitiesForPlCreatedBy,
			Set<RequisitionItem> requisitionItemsForUpdatedby,
			Set<UomTrl> uomTrlsForCreatedby,
			Set<StandSilvicultureActivity> standSilvicultureActivitiesForImCreatedBy,
			Set<MerIndicator> merIndicators,
			Set<PurchaseOrderItem> purchaseOrderItemsForCreatedby,
			Set<PurchaseOrder> purchaseOrdersForUpdatedby,
			Set<DpMngmtSettings> dpMngmtSettingsesForUpdatedby,
			Set<DocType> docTypesForUpdatedby,
			Set<FiskosImport> fiskosImportsForChangedBy,
			Set<MerRefSubProject> merRefSubProjects,
			Set<SeedlingInventoryPOS> seedlingInventoryPOSsForApprovedBy,
			Set<PrivateActivity> privateActivitiesForPlCreatedBy,
			Set<SeedlingInventoryPOS> seedlingInventoryPOSsForChangedBy,
			Set<MerStrategy> merStrategies) {
		this.id = id;
		this.party = party;
		this.firstName = firstName;
		this.lastName = lastName;
		this.birthdate = birthdate;
		this.personalId = personalId;
		this.gender = gender;
		this.degree = degree;
		this.ethnicity = ethnicity;
		this.persWithLmtAbilities = persWithLmtAbilities;
		this.notes = notes;
		this.photo = photo;
		this.merStratEvaluations = merStratEvaluations;
		this.dpMngmtSettingsesForCreatedby = dpMngmtSettingsesForCreatedby;
		this.standPlantingActivitiesForPlCreatedBy = standPlantingActivitiesForPlCreatedBy;
		this.locationsForCreatedby = locationsForCreatedby;
		this.protectionActivitiesForImCreatedBy = protectionActivitiesForImCreatedBy;
		this.requisitionAccountsForCreatedby = requisitionAccountsForCreatedby;
		this.uomTrlsForUpdatedby = uomTrlsForUpdatedby;
		this.merSubProjects = merSubProjects;
		this.currenciesForUpdatedby = currenciesForUpdatedby;
		this.docTypesForCreatedby = docTypesForCreatedby;
		this.dpMngmtsForOwnerId = dpMngmtsForOwnerId;
		this.seedActivitiesForPrCreatedBy = seedActivitiesForPrCreatedBy;
		this.uomsForUpdatedby = uomsForUpdatedby;
		this.requisitionAccountsForUpdatedby = requisitionAccountsForUpdatedby;
		this.publishings = publishings;
		this.locationsForUpdatedby = locationsForUpdatedby;
		this.roads = roads;
		this.dpMngmtStatusesForCreatedby = dpMngmtStatusesForCreatedby;
		this.adLanguagesForUpdatedby = adLanguagesForUpdatedby;
		this.seedActivitiesForPlCreatedBy = seedActivitiesForPlCreatedBy;
		this.docCategoriesForCreatedby = docCategoriesForCreatedby;
		this.standHarvestActivitiesForImCreatedBy = standHarvestActivitiesForImCreatedBy;
		this.purchaseOrderItemsForUpdatedby = purchaseOrderItemsForUpdatedby;
		this.dpMngmtsForUpdatedby = dpMngmtsForUpdatedby;
		this.dpMngmtStatusesForUpdatedby = dpMngmtStatusesForUpdatedby;
		this.requisitionItemsForCreatedby = requisitionItemsForCreatedby;
		this.alertRuleTrlsForUpdatedby = alertRuleTrlsForUpdatedby;
		this.alertRecipientsForCreatedby = alertRecipientsForCreatedby;
		this.merPerfEvaluations = merPerfEvaluations;
		this.alertRecipientsForPersonId = alertRecipientsForPersonId;
		this.standHarvestActivitiesForPlCreatedBy = standHarvestActivitiesForPlCreatedBy;
		this.currenciesForCreatedby = currenciesForCreatedby;
		this.fiskosImportsForCreatedBy = fiskosImportsForCreatedBy;
		this.activityStatuses = activityStatuses;
		this.uomsForCreatedby = uomsForCreatedby;
		this.alertsForPersonId = alertsForPersonId;
		this.requisitionsForCreatedby = requisitionsForCreatedby;
		this.seedActivitiesForImCreatedBy = seedActivitiesForImCreatedBy;
		this.seedlingInventoryPOSsForCreatedBy = seedlingInventoryPOSsForCreatedBy;
		this.purchaseOrderStatusesForCreatedby = purchaseOrderStatusesForCreatedby;
		this.dpMngmtAttachesForUpdatedby = dpMngmtAttachesForUpdatedby;
		this.standPlantingActivitiesForImCreatedBy = standPlantingActivitiesForImCreatedBy;
		this.alertRecipientsForUpdatedby = alertRecipientsForUpdatedby;
		this.alertsForUpdatedby = alertsForUpdatedby;
		this.protectionActivitiesForPlCreatedBy = protectionActivitiesForPlCreatedBy;
		this.alertRulesForUpdatedby = alertRulesForUpdatedby;
		this.bpartnerLocationsForUpdatedby = bpartnerLocationsForUpdatedby;
		this.annualPlanningStatuses = annualPlanningStatuses;
		this.seedlingInventoriesForChangedBy = seedlingInventoriesForChangedBy;
		this.alertRuleTrlsForCreatedby = alertRuleTrlsForCreatedby;
		this.merPlanPeriods = merPlanPeriods;
		this.seedlingInventoriesForCreatedBy = seedlingInventoriesForCreatedBy;
		this.annualPlannings = annualPlannings;
		this.fiskosDatas = fiskosDatas;
		this.alertRulesForCreatedby = alertRulesForCreatedby;
		this.purchaseOrdersForCreatedby = purchaseOrdersForCreatedby;
		this.merProjects = merProjects;
		this.dpMngmtsForCreatedby = dpMngmtsForCreatedby;
		this.requisitionStatusesForCreatedby = requisitionStatusesForCreatedby;
		this.alertsForCreatedby = alertsForCreatedby;
		this.merStrategyDocs = merStrategyDocs;
		this.merRespInstitutions = merRespInstitutions;
		this.merFinanceDonors = merFinanceDonors;
		this.privateRequestsForRequesterId = privateRequestsForRequesterId;
		this.merStrategyExecutions = merStrategyExecutions;
		this.roadActivitiesForImCreatedBy = roadActivitiesForImCreatedBy;
		this.bpartnersForUpdatedby = bpartnersForUpdatedby;
		this.privateRequestsForPlCreatedBy = privateRequestsForPlCreatedBy;
		this.roadActivitiesForPlCreatedBy = roadActivitiesForPlCreatedBy;
		this.purchaseOrderStatusesForUpdatedby = purchaseOrderStatusesForUpdatedby;
		this.privateActivitiesForImCreatedBy = privateActivitiesForImCreatedBy;
		this.dpMngmtAttachesForCreatedby = dpMngmtAttachesForCreatedby;
		this.adLanguagesForCreatedby = adLanguagesForCreatedby;
		this.requisitionsForUpdatedby = requisitionsForUpdatedby;
		this.merSubIndicators = merSubIndicators;
		this.requisitionStatusesForUpdatedby = requisitionStatusesForUpdatedby;
		this.attendanceRecords = attendanceRecords;
		this.bpartnersForCreatedby = bpartnersForCreatedby;
		this.activities = activities;
		this.docCategoriesForUpdatedby = docCategoriesForUpdatedby;
		this.bpartnerLocationsForCreatedby = bpartnerLocationsForCreatedby;
		this.employees = employees;
		this.standSilvicultureActivitiesForPlCreatedBy = standSilvicultureActivitiesForPlCreatedBy;
		this.requisitionItemsForUpdatedby = requisitionItemsForUpdatedby;
		this.uomTrlsForCreatedby = uomTrlsForCreatedby;
		this.standSilvicultureActivitiesForImCreatedBy = standSilvicultureActivitiesForImCreatedBy;
		this.merIndicators = merIndicators;
		this.purchaseOrderItemsForCreatedby = purchaseOrderItemsForCreatedby;
		this.purchaseOrdersForUpdatedby = purchaseOrdersForUpdatedby;
		this.dpMngmtSettingsesForUpdatedby = dpMngmtSettingsesForUpdatedby;
		this.docTypesForUpdatedby = docTypesForUpdatedby;
		this.fiskosImportsForChangedBy = fiskosImportsForChangedBy;
		this.merRefSubProjects = merRefSubProjects;
		this.seedlingInventoryPOSsForApprovedBy = seedlingInventoryPOSsForApprovedBy;
		this.privateActivitiesForPlCreatedBy = privateActivitiesForPlCreatedBy;
		this.seedlingInventoryPOSsForChangedBy = seedlingInventoryPOSsForChangedBy;
		this.merStrategies = merStrategies;
	}

	/**
	 * Gets the party.
	 *
	 * @return the party
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "party_id")
	public Party getParty() {
		return this.party;
	}

	/**
	 * Sets the party.
	 *
	 * @param party the new party
	 */
	public void setParty(Party party) {
		this.party = party;
	}

	/**
	 * Gets the first name.
	 *
	 * @return the first name
	 */
	@Column(name = "first_name", nullable = false, length = 30)
	public String getFirstName() {
		return this.firstName;
	}

	/**
	 * Sets the first name.
	 *
	 * @param firstName the new first name
	 */
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	/**
	 * Gets the last name.
	 *
	 * @return the last name
	 */
	@Column(name = "last_name", nullable = false, length = 30)
	public String getLastName() {
		return this.lastName;
	}

	/**
	 * Sets the last name.
	 *
	 * @param lastName the new last name
	 */
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	/**
	 * Gets the birthdate.
	 *
	 * @return the birthdate
	 */
	@Temporal(TemporalType.DATE)
	@Column(name = "birthdate", nullable = false, length = 13)
	public Date getBirthdate() {
		return this.birthdate;
	}

	/**
	 * Sets the birthdate.
	 *
	 * @param birthdate the new birthdate
	 */
	public void setBirthdate(Date birthdate) {
		this.birthdate = birthdate;
	}

	/**
	 * Gets the personal id.
	 *
	 * @return the personal id
	 */
	@Column(name = "personal_id", unique = true, length = 20)
	public String getPersonalId() {
		return this.personalId;
	}

	/**
	 * Sets the personal id.
	 *
	 * @param personalId the new personal id
	 */
	public void setPersonalId(String personalId) {
		this.personalId = personalId;
	}

	/**
	 * Gets the gender.
	 *
	 * @return the gender
	 */
	@Column(name = "gender", nullable = false, length = 1)
	public Character getGender() {
		return this.gender;
	}

	/**
	 * Sets the gender.
	 *
	 * @param gender the new gender
	 */
	public void setGender(Character gender) {
		this.gender = gender;
	}

	/**
	 * Gets the degree.
	 *
	 * @return the degree
	 */
	@Column(name = "degree", length = 20)
	public String getDegree() {
		return this.degree;
	}

	/**
	 * Sets the degree.
	 *
	 * @param degree the new degree
	 */
	public void setDegree(String degree) {
		this.degree = degree;
	}

	/**
	 * Gets the ethnicity.
	 *
	 * @return the ethnicity
	 */
	@Column(name = "ethnicity", nullable = false, length = 3)
	@Type(type = "com.geoland.kfis.persistence.hibernate.usertypes.EthnicityUserType")
	public Ethnicity getEthnicity() {
		return this.ethnicity;
	}

	/**
	 * Sets the ethnicity.
	 *
	 * @param ethnicity the new ethnicity
	 */
	public void setEthnicity(Ethnicity ethnicity) {
		this.ethnicity = ethnicity;
	}

	/**
	 * Checks if is pers with lmt abilities.
	 *
	 * @return true, if is pers with lmt abilities
	 */
	@Column(name = "pers_with_lmt_abilities", nullable = false)
	public boolean isPersWithLmtAbilities() {
		return this.persWithLmtAbilities;
	}

	/**
	 * Sets the pers with lmt abilities.
	 *
	 * @param persWithLmtAbilities the new pers with lmt abilities
	 */
	public void setPersWithLmtAbilities(boolean persWithLmtAbilities) {
		this.persWithLmtAbilities = persWithLmtAbilities;
	}

	/**
	 * Gets the notes.
	 *
	 * @return the notes
	 */
	@Column(name = "notes")
	public String getNotes() {
		return this.notes;
	}

	/**
	 * Sets the notes.
	 *
	 * @param notes the new notes
	 */
	public void setNotes(String notes) {
		this.notes = notes;
	}

	/**
	 * Gets the photo.
	 *
	 * @return the photo
	 */
	@Column(name = "photo")
	public byte[] getPhoto() {
		return this.photo;
	}

	/**
	 * Sets the photo.
	 *
	 * @param photo the new photo
	 */
	public void setPhoto(byte[] photo) {
		this.photo = photo;
	}

	/**
	 * Gets the mer strat evaluations.
	 *
	 * @return the mer strat evaluations
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<MerStratEvaluation> getMerStratEvaluations() {
		return this.merStratEvaluations;
	}

	/**
	 * Sets the mer strat evaluations.
	 *
	 * @param merStratEvaluations the new mer strat evaluations
	 */
	public void setMerStratEvaluations(
			Set<MerStratEvaluation> merStratEvaluations) {
		this.merStratEvaluations = merStratEvaluations;
	}

	/**
	 * Gets the dp mngmt settingses for createdby.
	 *
	 * @return the dp mngmt settingses for createdby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedby")
	public Set<DpMngmtSettings> getDpMngmtSettingsesForCreatedby() {
		return this.dpMngmtSettingsesForCreatedby;
	}

	/**
	 * Sets the dp mngmt settingses for createdby.
	 *
	 * @param dpMngmtSettingsesForCreatedby the new dp mngmt settingses for createdby
	 */
	public void setDpMngmtSettingsesForCreatedby(
			Set<DpMngmtSettings> dpMngmtSettingsesForCreatedby) {
		this.dpMngmtSettingsesForCreatedby = dpMngmtSettingsesForCreatedby;
	}

	/**
	 * Gets the stand planting activities for pl created by.
	 *
	 * @return the stand planting activities for pl created by
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByPlCreatedBy")
	public Set<StandPlantingActivity> getStandPlantingActivitiesForPlCreatedBy() {
		return this.standPlantingActivitiesForPlCreatedBy;
	}

	/**
	 * Sets the stand planting activities for pl created by.
	 *
	 * @param standPlantingActivitiesForPlCreatedBy the new stand planting activities for pl created by
	 */
	public void setStandPlantingActivitiesForPlCreatedBy(
			Set<StandPlantingActivity> standPlantingActivitiesForPlCreatedBy) {
		this.standPlantingActivitiesForPlCreatedBy = standPlantingActivitiesForPlCreatedBy;
	}

	/**
	 * Gets the locations for createdby.
	 *
	 * @return the locations for createdby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedby")
	public Set<Location> getLocationsForCreatedby() {
		return this.locationsForCreatedby;
	}

	/**
	 * Sets the locations for createdby.
	 *
	 * @param locationsForCreatedby the new locations for createdby
	 */
	public void setLocationsForCreatedby(Set<Location> locationsForCreatedby) {
		this.locationsForCreatedby = locationsForCreatedby;
	}

	/**
	 * Gets the protection activities for im created by.
	 *
	 * @return the protection activities for im created by
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByImCreatedBy")
	public Set<ProtectionActivity> getProtectionActivitiesForImCreatedBy() {
		return this.protectionActivitiesForImCreatedBy;
	}

	/**
	 * Sets the protection activities for im created by.
	 *
	 * @param protectionActivitiesForImCreatedBy the new protection activities for im created by
	 */
	public void setProtectionActivitiesForImCreatedBy(
			Set<ProtectionActivity> protectionActivitiesForImCreatedBy) {
		this.protectionActivitiesForImCreatedBy = protectionActivitiesForImCreatedBy;
	}

	/**
	 * Gets the requisition accounts for createdby.
	 *
	 * @return the requisition accounts for createdby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedby")
	public Set<RequisitionAccount> getRequisitionAccountsForCreatedby() {
		return this.requisitionAccountsForCreatedby;
	}

	/**
	 * Sets the requisition accounts for createdby.
	 *
	 * @param requisitionAccountsForCreatedby the new requisition accounts for createdby
	 */
	public void setRequisitionAccountsForCreatedby(
			Set<RequisitionAccount> requisitionAccountsForCreatedby) {
		this.requisitionAccountsForCreatedby = requisitionAccountsForCreatedby;
	}

	/**
	 * Gets the uom trls for updatedby.
	 *
	 * @return the uom trls for updatedby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByUpdatedby")
	public Set<UomTrl> getUomTrlsForUpdatedby() {
		return this.uomTrlsForUpdatedby;
	}

	/**
	 * Sets the uom trls for updatedby.
	 *
	 * @param uomTrlsForUpdatedby the new uom trls for updatedby
	 */
	public void setUomTrlsForUpdatedby(Set<UomTrl> uomTrlsForUpdatedby) {
		this.uomTrlsForUpdatedby = uomTrlsForUpdatedby;
	}

	/**
	 * Gets the mer sub projects.
	 *
	 * @return the mer sub projects
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<MerSubProject> getMerSubProjects() {
		return this.merSubProjects;
	}

	/**
	 * Sets the mer sub projects.
	 *
	 * @param merSubProjects the new mer sub projects
	 */
	public void setMerSubProjects(Set<MerSubProject> merSubProjects) {
		this.merSubProjects = merSubProjects;
	}

	/**
	 * Gets the currencies for updatedby.
	 *
	 * @return the currencies for updatedby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByUpdatedby")
	public Set<Currency> getCurrenciesForUpdatedby() {
		return this.currenciesForUpdatedby;
	}

	/**
	 * Sets the currencies for updatedby.
	 *
	 * @param currenciesForUpdatedby the new currencies for updatedby
	 */
	public void setCurrenciesForUpdatedby(Set<Currency> currenciesForUpdatedby) {
		this.currenciesForUpdatedby = currenciesForUpdatedby;
	}

	/**
	 * Gets the doc types for createdby.
	 *
	 * @return the doc types for createdby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedby")
	public Set<DocType> getDocTypesForCreatedby() {
		return this.docTypesForCreatedby;
	}

	/**
	 * Sets the doc types for createdby.
	 *
	 * @param docTypesForCreatedby the new doc types for createdby
	 */
	public void setDocTypesForCreatedby(Set<DocType> docTypesForCreatedby) {
		this.docTypesForCreatedby = docTypesForCreatedby;
	}

	/**
	 * Gets the dp mngmts for owner id.
	 *
	 * @return the dp mngmts for owner id
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByOwnerId")
	public Set<DpMngmt> getDpMngmtsForOwnerId() {
		return this.dpMngmtsForOwnerId;
	}

	/**
	 * Sets the dp mngmts for owner id.
	 *
	 * @param dpMngmtsForOwnerId the new dp mngmts for owner id
	 */
	public void setDpMngmtsForOwnerId(Set<DpMngmt> dpMngmtsForOwnerId) {
		this.dpMngmtsForOwnerId = dpMngmtsForOwnerId;
	}

	/**
	 * Gets the seed activities for pr created by.
	 *
	 * @return the seed activities for pr created by
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByPrCreatedBy")
	public Set<SeedActivity> getSeedActivitiesForPrCreatedBy() {
		return this.seedActivitiesForPrCreatedBy;
	}

	/**
	 * Sets the seed activities for pr created by.
	 *
	 * @param seedActivitiesForPrCreatedBy the new seed activities for pr created by
	 */
	public void setSeedActivitiesForPrCreatedBy(
			Set<SeedActivity> seedActivitiesForPrCreatedBy) {
		this.seedActivitiesForPrCreatedBy = seedActivitiesForPrCreatedBy;
	}

	/**
	 * Gets the uoms for updatedby.
	 *
	 * @return the uoms for updatedby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByUpdatedby")
	public Set<Uom> getUomsForUpdatedby() {
		return this.uomsForUpdatedby;
	}

	/**
	 * Sets the uoms for updatedby.
	 *
	 * @param uomsForUpdatedby the new uoms for updatedby
	 */
	public void setUomsForUpdatedby(Set<Uom> uomsForUpdatedby) {
		this.uomsForUpdatedby = uomsForUpdatedby;
	}

	/**
	 * Gets the requisition accounts for updatedby.
	 *
	 * @return the requisition accounts for updatedby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByUpdatedby")
	public Set<RequisitionAccount> getRequisitionAccountsForUpdatedby() {
		return this.requisitionAccountsForUpdatedby;
	}

	/**
	 * Sets the requisition accounts for updatedby.
	 *
	 * @param requisitionAccountsForUpdatedby the new requisition accounts for updatedby
	 */
	public void setRequisitionAccountsForUpdatedby(
			Set<RequisitionAccount> requisitionAccountsForUpdatedby) {
		this.requisitionAccountsForUpdatedby = requisitionAccountsForUpdatedby;
	}

	/**
	 * Gets the publishings.
	 *
	 * @return the publishings
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<Publishing> getPublishings() {
		return this.publishings;
	}

	/**
	 * Sets the publishings.
	 *
	 * @param publishings the new publishings
	 */
	public void setPublishings(Set<Publishing> publishings) {
		this.publishings = publishings;
	}

	/**
	 * Gets the locations for updatedby.
	 *
	 * @return the locations for updatedby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByUpdatedby")
	public Set<Location> getLocationsForUpdatedby() {
		return this.locationsForUpdatedby;
	}

	/**
	 * Sets the locations for updatedby.
	 *
	 * @param locationsForUpdatedby the new locations for updatedby
	 */
	public void setLocationsForUpdatedby(Set<Location> locationsForUpdatedby) {
		this.locationsForUpdatedby = locationsForUpdatedby;
	}

	/**
	 * Gets the roads.
	 *
	 * @return the roads
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<Road> getRoads() {
		return this.roads;
	}

	/**
	 * Sets the roads.
	 *
	 * @param roads the new roads
	 */
	public void setRoads(Set<Road> roads) {
		this.roads = roads;
	}

	/**
	 * Gets the dp mngmt statuses for createdby.
	 *
	 * @return the dp mngmt statuses for createdby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedby")
	public Set<DpMngmtStatus> getDpMngmtStatusesForCreatedby() {
		return this.dpMngmtStatusesForCreatedby;
	}

	/**
	 * Sets the dp mngmt statuses for createdby.
	 *
	 * @param dpMngmtStatusesForCreatedby the new dp mngmt statuses for createdby
	 */
	public void setDpMngmtStatusesForCreatedby(
			Set<DpMngmtStatus> dpMngmtStatusesForCreatedby) {
		this.dpMngmtStatusesForCreatedby = dpMngmtStatusesForCreatedby;
	}

	/**
	 * Gets the ad languages for updatedby.
	 *
	 * @return the ad languages for updatedby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByUpdatedby")
	public Set<AdLanguage> getAdLanguagesForUpdatedby() {
		return this.adLanguagesForUpdatedby;
	}

	/**
	 * Sets the ad languages for updatedby.
	 *
	 * @param adLanguagesForUpdatedby the new ad languages for updatedby
	 */
	public void setAdLanguagesForUpdatedby(
			Set<AdLanguage> adLanguagesForUpdatedby) {
		this.adLanguagesForUpdatedby = adLanguagesForUpdatedby;
	}

	/**
	 * Gets the seed activities for pl created by.
	 *
	 * @return the seed activities for pl created by
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByPlCreatedBy")
	public Set<SeedActivity> getSeedActivitiesForPlCreatedBy() {
		return this.seedActivitiesForPlCreatedBy;
	}

	/**
	 * Sets the seed activities for pl created by.
	 *
	 * @param seedActivitiesForPlCreatedBy the new seed activities for pl created by
	 */
	public void setSeedActivitiesForPlCreatedBy(
			Set<SeedActivity> seedActivitiesForPlCreatedBy) {
		this.seedActivitiesForPlCreatedBy = seedActivitiesForPlCreatedBy;
	}

	/**
	 * Gets the doc categories for createdby.
	 *
	 * @return the doc categories for createdby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedby")
	public Set<DocCategory> getDocCategoriesForCreatedby() {
		return this.docCategoriesForCreatedby;
	}

	/**
	 * Sets the doc categories for createdby.
	 *
	 * @param docCategoriesForCreatedby the new doc categories for createdby
	 */
	public void setDocCategoriesForCreatedby(
			Set<DocCategory> docCategoriesForCreatedby) {
		this.docCategoriesForCreatedby = docCategoriesForCreatedby;
	}

	/**
	 * Gets the stand harvest activities for im created by.
	 *
	 * @return the stand harvest activities for im created by
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByImCreatedBy")
	public Set<StandHarvestActivity> getStandHarvestActivitiesForImCreatedBy() {
		return this.standHarvestActivitiesForImCreatedBy;
	}

	/**
	 * Sets the stand harvest activities for im created by.
	 *
	 * @param standHarvestActivitiesForImCreatedBy the new stand harvest activities for im created by
	 */
	public void setStandHarvestActivitiesForImCreatedBy(
			Set<StandHarvestActivity> standHarvestActivitiesForImCreatedBy) {
		this.standHarvestActivitiesForImCreatedBy = standHarvestActivitiesForImCreatedBy;
	}

	/**
	 * Gets the purchase order items for updatedby.
	 *
	 * @return the purchase order items for updatedby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByUpdatedby")
	public Set<PurchaseOrderItem> getPurchaseOrderItemsForUpdatedby() {
		return this.purchaseOrderItemsForUpdatedby;
	}

	/**
	 * Sets the purchase order items for updatedby.
	 *
	 * @param purchaseOrderItemsForUpdatedby the new purchase order items for updatedby
	 */
	public void setPurchaseOrderItemsForUpdatedby(
			Set<PurchaseOrderItem> purchaseOrderItemsForUpdatedby) {
		this.purchaseOrderItemsForUpdatedby = purchaseOrderItemsForUpdatedby;
	}

	/**
	 * Gets the dp mngmts for updatedby.
	 *
	 * @return the dp mngmts for updatedby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByUpdatedby")
	public Set<DpMngmt> getDpMngmtsForUpdatedby() {
		return this.dpMngmtsForUpdatedby;
	}

	/**
	 * Sets the dp mngmts for updatedby.
	 *
	 * @param dpMngmtsForUpdatedby the new dp mngmts for updatedby
	 */
	public void setDpMngmtsForUpdatedby(Set<DpMngmt> dpMngmtsForUpdatedby) {
		this.dpMngmtsForUpdatedby = dpMngmtsForUpdatedby;
	}

	/**
	 * Gets the dp mngmt statuses for updatedby.
	 *
	 * @return the dp mngmt statuses for updatedby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByUpdatedby")
	public Set<DpMngmtStatus> getDpMngmtStatusesForUpdatedby() {
		return this.dpMngmtStatusesForUpdatedby;
	}

	/**
	 * Sets the dp mngmt statuses for updatedby.
	 *
	 * @param dpMngmtStatusesForUpdatedby the new dp mngmt statuses for updatedby
	 */
	public void setDpMngmtStatusesForUpdatedby(
			Set<DpMngmtStatus> dpMngmtStatusesForUpdatedby) {
		this.dpMngmtStatusesForUpdatedby = dpMngmtStatusesForUpdatedby;
	}

	/**
	 * Gets the requisition items for createdby.
	 *
	 * @return the requisition items for createdby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedby")
	public Set<RequisitionItem> getRequisitionItemsForCreatedby() {
		return this.requisitionItemsForCreatedby;
	}

	/**
	 * Sets the requisition items for createdby.
	 *
	 * @param requisitionItemsForCreatedby the new requisition items for createdby
	 */
	public void setRequisitionItemsForCreatedby(
			Set<RequisitionItem> requisitionItemsForCreatedby) {
		this.requisitionItemsForCreatedby = requisitionItemsForCreatedby;
	}

	/**
	 * Gets the alert rule trls for updatedby.
	 *
	 * @return the alert rule trls for updatedby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByUpdatedby")
	public Set<AlertRuleTrl> getAlertRuleTrlsForUpdatedby() {
		return this.alertRuleTrlsForUpdatedby;
	}

	/**
	 * Sets the alert rule trls for updatedby.
	 *
	 * @param alertRuleTrlsForUpdatedby the new alert rule trls for updatedby
	 */
	public void setAlertRuleTrlsForUpdatedby(
			Set<AlertRuleTrl> alertRuleTrlsForUpdatedby) {
		this.alertRuleTrlsForUpdatedby = alertRuleTrlsForUpdatedby;
	}

	/**
	 * Gets the alert recipients for createdby.
	 *
	 * @return the alert recipients for createdby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedby")
	public Set<AlertRecipient> getAlertRecipientsForCreatedby() {
		return this.alertRecipientsForCreatedby;
	}

	/**
	 * Sets the alert recipients for createdby.
	 *
	 * @param alertRecipientsForCreatedby the new alert recipients for createdby
	 */
	public void setAlertRecipientsForCreatedby(
			Set<AlertRecipient> alertRecipientsForCreatedby) {
		this.alertRecipientsForCreatedby = alertRecipientsForCreatedby;
	}

	/**
	 * Gets the mer perf evaluations.
	 *
	 * @return the mer perf evaluations
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<MerPerfEvaluation> getMerPerfEvaluations() {
		return this.merPerfEvaluations;
	}

	/**
	 * Sets the mer perf evaluations.
	 *
	 * @param merPerfEvaluations the new mer perf evaluations
	 */
	public void setMerPerfEvaluations(Set<MerPerfEvaluation> merPerfEvaluations) {
		this.merPerfEvaluations = merPerfEvaluations;
	}

	/**
	 * Gets the alert recipients for person id.
	 *
	 * @return the alert recipients for person id
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByPersonId")
	public Set<AlertRecipient> getAlertRecipientsForPersonId() {
		return this.alertRecipientsForPersonId;
	}

	/**
	 * Sets the alert recipients for person id.
	 *
	 * @param alertRecipientsForPersonId the new alert recipients for person id
	 */
	public void setAlertRecipientsForPersonId(
			Set<AlertRecipient> alertRecipientsForPersonId) {
		this.alertRecipientsForPersonId = alertRecipientsForPersonId;
	}

	/**
	 * Gets the stand harvest activities for pl created by.
	 *
	 * @return the stand harvest activities for pl created by
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByPlCreatedBy")
	public Set<StandHarvestActivity> getStandHarvestActivitiesForPlCreatedBy() {
		return this.standHarvestActivitiesForPlCreatedBy;
	}

	/**
	 * Sets the stand harvest activities for pl created by.
	 *
	 * @param standHarvestActivitiesForPlCreatedBy the new stand harvest activities for pl created by
	 */
	public void setStandHarvestActivitiesForPlCreatedBy(
			Set<StandHarvestActivity> standHarvestActivitiesForPlCreatedBy) {
		this.standHarvestActivitiesForPlCreatedBy = standHarvestActivitiesForPlCreatedBy;
	}

	/**
	 * Gets the currencies for createdby.
	 *
	 * @return the currencies for createdby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedby")
	public Set<Currency> getCurrenciesForCreatedby() {
		return this.currenciesForCreatedby;
	}

	/**
	 * Sets the currencies for createdby.
	 *
	 * @param currenciesForCreatedby the new currencies for createdby
	 */
	public void setCurrenciesForCreatedby(Set<Currency> currenciesForCreatedby) {
		this.currenciesForCreatedby = currenciesForCreatedby;
	}

	/**
	 * Gets the fiskos imports for created by.
	 *
	 * @return the fiskos imports for created by
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedBy")
	public Set<FiskosImport> getFiskosImportsForCreatedBy() {
		return this.fiskosImportsForCreatedBy;
	}

	/**
	 * Sets the fiskos imports for created by.
	 *
	 * @param fiskosImportsForCreatedBy the new fiskos imports for created by
	 */
	public void setFiskosImportsForCreatedBy(
			Set<FiskosImport> fiskosImportsForCreatedBy) {
		this.fiskosImportsForCreatedBy = fiskosImportsForCreatedBy;
	}

	/**
	 * Gets the activity statuses.
	 *
	 * @return the activity statuses
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<ActivityStatus> getActivityStatuses() {
		return this.activityStatuses;
	}

	/**
	 * Sets the activity statuses.
	 *
	 * @param activityStatuses the new activity statuses
	 */
	public void setActivityStatuses(Set<ActivityStatus> activityStatuses) {
		this.activityStatuses = activityStatuses;
	}

	/**
	 * Gets the uoms for createdby.
	 *
	 * @return the uoms for createdby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedby")
	public Set<Uom> getUomsForCreatedby() {
		return this.uomsForCreatedby;
	}

	/**
	 * Sets the uoms for createdby.
	 *
	 * @param uomsForCreatedby the new uoms for createdby
	 */
	public void setUomsForCreatedby(Set<Uom> uomsForCreatedby) {
		this.uomsForCreatedby = uomsForCreatedby;
	}

	/**
	 * Gets the alerts for person id.
	 *
	 * @return the alerts for person id
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByPersonId")
	public Set<Alert> getAlertsForPersonId() {
		return this.alertsForPersonId;
	}

	/**
	 * Sets the alerts for person id.
	 *
	 * @param alertsForPersonId the new alerts for person id
	 */
	public void setAlertsForPersonId(Set<Alert> alertsForPersonId) {
		this.alertsForPersonId = alertsForPersonId;
	}

	/**
	 * Gets the requisitions for createdby.
	 *
	 * @return the requisitions for createdby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedby")
	public Set<Requisition> getRequisitionsForCreatedby() {
		return this.requisitionsForCreatedby;
	}

	/**
	 * Sets the requisitions for createdby.
	 *
	 * @param requisitionsForCreatedby the new requisitions for createdby
	 */
	public void setRequisitionsForCreatedby(
			Set<Requisition> requisitionsForCreatedby) {
		this.requisitionsForCreatedby = requisitionsForCreatedby;
	}

	/**
	 * Gets the seed activities for im created by.
	 *
	 * @return the seed activities for im created by
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByImCreatedBy")
	public Set<SeedActivity> getSeedActivitiesForImCreatedBy() {
		return this.seedActivitiesForImCreatedBy;
	}

	/**
	 * Sets the seed activities for im created by.
	 *
	 * @param seedActivitiesForImCreatedBy the new seed activities for im created by
	 */
	public void setSeedActivitiesForImCreatedBy(
			Set<SeedActivity> seedActivitiesForImCreatedBy) {
		this.seedActivitiesForImCreatedBy = seedActivitiesForImCreatedBy;
	}

	/**
	 * Gets the seedling inventory PO ss for created by.
	 *
	 * @return the seedling inventory PO ss for created by
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedBy")
	public Set<SeedlingInventoryPOS> getSeedlingInventoryPOSsForCreatedBy() {
		return this.seedlingInventoryPOSsForCreatedBy;
	}

	/**
	 * Sets the seedling inventory PO ss for created by.
	 *
	 * @param seedlingInventoryPOSsForCreatedBy the new seedling inventory PO ss for created by
	 */
	public void setSeedlingInventoryPOSsForCreatedBy(
			Set<SeedlingInventoryPOS> seedlingInventoryPOSsForCreatedBy) {
		this.seedlingInventoryPOSsForCreatedBy = seedlingInventoryPOSsForCreatedBy;
	}

	/**
	 * Gets the purchase order statuses for createdby.
	 *
	 * @return the purchase order statuses for createdby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedby")
	public Set<PurchaseOrderStatus> getPurchaseOrderStatusesForCreatedby() {
		return this.purchaseOrderStatusesForCreatedby;
	}

	/**
	 * Sets the purchase order statuses for createdby.
	 *
	 * @param purchaseOrderStatusesForCreatedby the new purchase order statuses for createdby
	 */
	public void setPurchaseOrderStatusesForCreatedby(
			Set<PurchaseOrderStatus> purchaseOrderStatusesForCreatedby) {
		this.purchaseOrderStatusesForCreatedby = purchaseOrderStatusesForCreatedby;
	}

	/**
	 * Gets the dp mngmt attaches for updatedby.
	 *
	 * @return the dp mngmt attaches for updatedby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByUpdatedby")
	public Set<DpMngmtAttach> getDpMngmtAttachesForUpdatedby() {
		return this.dpMngmtAttachesForUpdatedby;
	}

	/**
	 * Sets the dp mngmt attaches for updatedby.
	 *
	 * @param dpMngmtAttachesForUpdatedby the new dp mngmt attaches for updatedby
	 */
	public void setDpMngmtAttachesForUpdatedby(
			Set<DpMngmtAttach> dpMngmtAttachesForUpdatedby) {
		this.dpMngmtAttachesForUpdatedby = dpMngmtAttachesForUpdatedby;
	}

	/**
	 * Gets the stand planting activities for im created by.
	 *
	 * @return the stand planting activities for im created by
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByImCreatedBy")
	public Set<StandPlantingActivity> getStandPlantingActivitiesForImCreatedBy() {
		return this.standPlantingActivitiesForImCreatedBy;
	}

	/**
	 * Sets the stand planting activities for im created by.
	 *
	 * @param standPlantingActivitiesForImCreatedBy the new stand planting activities for im created by
	 */
	public void setStandPlantingActivitiesForImCreatedBy(
			Set<StandPlantingActivity> standPlantingActivitiesForImCreatedBy) {
		this.standPlantingActivitiesForImCreatedBy = standPlantingActivitiesForImCreatedBy;
	}

	/**
	 * Gets the alert recipients for updatedby.
	 *
	 * @return the alert recipients for updatedby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByUpdatedby")
	public Set<AlertRecipient> getAlertRecipientsForUpdatedby() {
		return this.alertRecipientsForUpdatedby;
	}

	/**
	 * Sets the alert recipients for updatedby.
	 *
	 * @param alertRecipientsForUpdatedby the new alert recipients for updatedby
	 */
	public void setAlertRecipientsForUpdatedby(
			Set<AlertRecipient> alertRecipientsForUpdatedby) {
		this.alertRecipientsForUpdatedby = alertRecipientsForUpdatedby;
	}

	/**
	 * Gets the alerts for updatedby.
	 *
	 * @return the alerts for updatedby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByUpdatedby")
	public Set<Alert> getAlertsForUpdatedby() {
		return this.alertsForUpdatedby;
	}

	/**
	 * Sets the alerts for updatedby.
	 *
	 * @param alertsForUpdatedby the new alerts for updatedby
	 */
	public void setAlertsForUpdatedby(Set<Alert> alertsForUpdatedby) {
		this.alertsForUpdatedby = alertsForUpdatedby;
	}

	/**
	 * Gets the protection activities for pl created by.
	 *
	 * @return the protection activities for pl created by
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByPlCreatedBy")
	public Set<ProtectionActivity> getProtectionActivitiesForPlCreatedBy() {
		return this.protectionActivitiesForPlCreatedBy;
	}

	/**
	 * Sets the protection activities for pl created by.
	 *
	 * @param protectionActivitiesForPlCreatedBy the new protection activities for pl created by
	 */
	public void setProtectionActivitiesForPlCreatedBy(
			Set<ProtectionActivity> protectionActivitiesForPlCreatedBy) {
		this.protectionActivitiesForPlCreatedBy = protectionActivitiesForPlCreatedBy;
	}

	/**
	 * Gets the alert rules for updatedby.
	 *
	 * @return the alert rules for updatedby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByUpdatedby")
	public Set<AlertRule> getAlertRulesForUpdatedby() {
		return this.alertRulesForUpdatedby;
	}

	/**
	 * Sets the alert rules for updatedby.
	 *
	 * @param alertRulesForUpdatedby the new alert rules for updatedby
	 */
	public void setAlertRulesForUpdatedby(Set<AlertRule> alertRulesForUpdatedby) {
		this.alertRulesForUpdatedby = alertRulesForUpdatedby;
	}

	/**
	 * Gets the bpartner locations for updatedby.
	 *
	 * @return the bpartner locations for updatedby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByUpdatedby")
	public Set<BpartnerLocation> getBpartnerLocationsForUpdatedby() {
		return this.bpartnerLocationsForUpdatedby;
	}

	/**
	 * Sets the bpartner locations for updatedby.
	 *
	 * @param bpartnerLocationsForUpdatedby the new bpartner locations for updatedby
	 */
	public void setBpartnerLocationsForUpdatedby(
			Set<BpartnerLocation> bpartnerLocationsForUpdatedby) {
		this.bpartnerLocationsForUpdatedby = bpartnerLocationsForUpdatedby;
	}

	/**
	 * Gets the annual planning statuses.
	 *
	 * @return the annual planning statuses
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<AnnualPlanningStatus> getAnnualPlanningStatuses() {
		return this.annualPlanningStatuses;
	}

	/**
	 * Sets the annual planning statuses.
	 *
	 * @param annualPlanningStatuses the new annual planning statuses
	 */
	public void setAnnualPlanningStatuses(
			Set<AnnualPlanningStatus> annualPlanningStatuses) {
		this.annualPlanningStatuses = annualPlanningStatuses;
	}

	/**
	 * Gets the seedling inventories for changed by.
	 *
	 * @return the seedling inventories for changed by
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByChangedBy")
	public Set<SeedlingInventory> getSeedlingInventoriesForChangedBy() {
		return this.seedlingInventoriesForChangedBy;
	}

	/**
	 * Sets the seedling inventories for changed by.
	 *
	 * @param seedlingInventoriesForChangedBy the new seedling inventories for changed by
	 */
	public void setSeedlingInventoriesForChangedBy(
			Set<SeedlingInventory> seedlingInventoriesForChangedBy) {
		this.seedlingInventoriesForChangedBy = seedlingInventoriesForChangedBy;
	}

	/**
	 * Gets the alert rule trls for createdby.
	 *
	 * @return the alert rule trls for createdby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedby")
	public Set<AlertRuleTrl> getAlertRuleTrlsForCreatedby() {
		return this.alertRuleTrlsForCreatedby;
	}

	/**
	 * Sets the alert rule trls for createdby.
	 *
	 * @param alertRuleTrlsForCreatedby the new alert rule trls for createdby
	 */
	public void setAlertRuleTrlsForCreatedby(
			Set<AlertRuleTrl> alertRuleTrlsForCreatedby) {
		this.alertRuleTrlsForCreatedby = alertRuleTrlsForCreatedby;
	}

	/**
	 * Gets the mer plan periods.
	 *
	 * @return the mer plan periods
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<MerPlanPeriod> getMerPlanPeriods() {
		return this.merPlanPeriods;
	}

	/**
	 * Sets the mer plan periods.
	 *
	 * @param merPlanPeriods the new mer plan periods
	 */
	public void setMerPlanPeriods(Set<MerPlanPeriod> merPlanPeriods) {
		this.merPlanPeriods = merPlanPeriods;
	}

	/**
	 * Gets the seedling inventories for created by.
	 *
	 * @return the seedling inventories for created by
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedBy")
	public Set<SeedlingInventory> getSeedlingInventoriesForCreatedBy() {
		return this.seedlingInventoriesForCreatedBy;
	}

	/**
	 * Sets the seedling inventories for created by.
	 *
	 * @param seedlingInventoriesForCreatedBy the new seedling inventories for created by
	 */
	public void setSeedlingInventoriesForCreatedBy(
			Set<SeedlingInventory> seedlingInventoriesForCreatedBy) {
		this.seedlingInventoriesForCreatedBy = seedlingInventoriesForCreatedBy;
	}

	/**
	 * Gets the annual plannings.
	 *
	 * @return the annual plannings
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<AnnualPlanning> getAnnualPlannings() {
		return this.annualPlannings;
	}

	/**
	 * Sets the annual plannings.
	 *
	 * @param annualPlannings the new annual plannings
	 */
	public void setAnnualPlannings(Set<AnnualPlanning> annualPlannings) {
		this.annualPlannings = annualPlannings;
	}

	/**
	 * Gets the fiskos datas.
	 *
	 * @return the fiskos datas
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<FiskosData> getFiskosDatas() {
		return this.fiskosDatas;
	}

	/**
	 * Sets the fiskos datas.
	 *
	 * @param fiskosDatas the new fiskos datas
	 */
	public void setFiskosDatas(Set<FiskosData> fiskosDatas) {
		this.fiskosDatas = fiskosDatas;
	}

	/**
	 * Gets the alert rules for createdby.
	 *
	 * @return the alert rules for createdby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedby")
	public Set<AlertRule> getAlertRulesForCreatedby() {
		return this.alertRulesForCreatedby;
	}

	/**
	 * Sets the alert rules for createdby.
	 *
	 * @param alertRulesForCreatedby the new alert rules for createdby
	 */
	public void setAlertRulesForCreatedby(Set<AlertRule> alertRulesForCreatedby) {
		this.alertRulesForCreatedby = alertRulesForCreatedby;
	}

	/**
	 * Gets the purchase orders for createdby.
	 *
	 * @return the purchase orders for createdby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedby")
	public Set<PurchaseOrder> getPurchaseOrdersForCreatedby() {
		return this.purchaseOrdersForCreatedby;
	}

	/**
	 * Sets the purchase orders for createdby.
	 *
	 * @param purchaseOrdersForCreatedby the new purchase orders for createdby
	 */
	public void setPurchaseOrdersForCreatedby(
			Set<PurchaseOrder> purchaseOrdersForCreatedby) {
		this.purchaseOrdersForCreatedby = purchaseOrdersForCreatedby;
	}

	/**
	 * Gets the mer projects.
	 *
	 * @return the mer projects
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<MerProject> getMerProjects() {
		return this.merProjects;
	}

	/**
	 * Sets the mer projects.
	 *
	 * @param merProjects the new mer projects
	 */
	public void setMerProjects(Set<MerProject> merProjects) {
		this.merProjects = merProjects;
	}

	/**
	 * Gets the dp mngmts for createdby.
	 *
	 * @return the dp mngmts for createdby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedby")
	public Set<DpMngmt> getDpMngmtsForCreatedby() {
		return this.dpMngmtsForCreatedby;
	}

	/**
	 * Sets the dp mngmts for createdby.
	 *
	 * @param dpMngmtsForCreatedby the new dp mngmts for createdby
	 */
	public void setDpMngmtsForCreatedby(Set<DpMngmt> dpMngmtsForCreatedby) {
		this.dpMngmtsForCreatedby = dpMngmtsForCreatedby;
	}

	/**
	 * Gets the requisition statuses for createdby.
	 *
	 * @return the requisition statuses for createdby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedby")
	public Set<RequisitionStatus> getRequisitionStatusesForCreatedby() {
		return this.requisitionStatusesForCreatedby;
	}

	/**
	 * Sets the requisition statuses for createdby.
	 *
	 * @param requisitionStatusesForCreatedby the new requisition statuses for createdby
	 */
	public void setRequisitionStatusesForCreatedby(
			Set<RequisitionStatus> requisitionStatusesForCreatedby) {
		this.requisitionStatusesForCreatedby = requisitionStatusesForCreatedby;
	}

	/**
	 * Gets the alerts for createdby.
	 *
	 * @return the alerts for createdby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedby")
	public Set<Alert> getAlertsForCreatedby() {
		return this.alertsForCreatedby;
	}

	/**
	 * Sets the alerts for createdby.
	 *
	 * @param alertsForCreatedby the new alerts for createdby
	 */
	public void setAlertsForCreatedby(Set<Alert> alertsForCreatedby) {
		this.alertsForCreatedby = alertsForCreatedby;
	}

	/**
	 * Gets the mer strategy docs.
	 *
	 * @return the mer strategy docs
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<MerStrategyDoc> getMerStrategyDocs() {
		return this.merStrategyDocs;
	}

	/**
	 * Sets the mer strategy docs.
	 *
	 * @param merStrategyDocs the new mer strategy docs
	 */
	public void setMerStrategyDocs(Set<MerStrategyDoc> merStrategyDocs) {
		this.merStrategyDocs = merStrategyDocs;
	}

	/**
	 * Gets the mer resp institutions.
	 *
	 * @return the mer resp institutions
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<MerRespInstitution> getMerRespInstitutions() {
		return this.merRespInstitutions;
	}

	/**
	 * Sets the mer resp institutions.
	 *
	 * @param merRespInstitutions the new mer resp institutions
	 */
	public void setMerRespInstitutions(
			Set<MerRespInstitution> merRespInstitutions) {
		this.merRespInstitutions = merRespInstitutions;
	}

	/**
	 * Gets the mer finance donors.
	 *
	 * @return the mer finance donors
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<MerFinanceDonor> getMerFinanceDonors() {
		return this.merFinanceDonors;
	}

	/**
	 * Sets the mer finance donors.
	 *
	 * @param merFinanceDonors the new mer finance donors
	 */
	public void setMerFinanceDonors(Set<MerFinanceDonor> merFinanceDonors) {
		this.merFinanceDonors = merFinanceDonors;
	}

	/**
	 * Gets the private requests for requester id.
	 *
	 * @return the private requests for requester id
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "requester")
	public Set<PrivateRequest> getPrivateRequestsForRequesterId() {
		return this.privateRequestsForRequesterId;
	}

	/**
	 * Sets the private requests for requester id.
	 *
	 * @param privateRequestsForRequesterId the new private requests for requester id
	 */
	public void setPrivateRequestsForRequesterId(
			Set<PrivateRequest> privateRequestsForRequesterId) {
		this.privateRequestsForRequesterId = privateRequestsForRequesterId;
	}

	/**
	 * Gets the mer strategy executions.
	 *
	 * @return the mer strategy executions
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<MerStrategyExecution> getMerStrategyExecutions() {
		return this.merStrategyExecutions;
	}

	/**
	 * Sets the mer strategy executions.
	 *
	 * @param merStrategyExecutions the new mer strategy executions
	 */
	public void setMerStrategyExecutions(
			Set<MerStrategyExecution> merStrategyExecutions) {
		this.merStrategyExecutions = merStrategyExecutions;
	}

	/**
	 * Gets the road activities for im created by.
	 *
	 * @return the road activities for im created by
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByImCreatedBy")
	public Set<RoadActivity> getRoadActivitiesForImCreatedBy() {
		return this.roadActivitiesForImCreatedBy;
	}

	/**
	 * Sets the road activities for im created by.
	 *
	 * @param roadActivitiesForImCreatedBy the new road activities for im created by
	 */
	public void setRoadActivitiesForImCreatedBy(
			Set<RoadActivity> roadActivitiesForImCreatedBy) {
		this.roadActivitiesForImCreatedBy = roadActivitiesForImCreatedBy;
	}

	/**
	 * Gets the bpartners for updatedby.
	 *
	 * @return the bpartners for updatedby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByUpdatedby")
	public Set<Bpartner> getBpartnersForUpdatedby() {
		return this.bpartnersForUpdatedby;
	}

	/**
	 * Sets the bpartners for updatedby.
	 *
	 * @param bpartnersForUpdatedby the new bpartners for updatedby
	 */
	public void setBpartnersForUpdatedby(Set<Bpartner> bpartnersForUpdatedby) {
		this.bpartnersForUpdatedby = bpartnersForUpdatedby;
	}

	/**
	 * Gets the private requests for pl created by.
	 *
	 * @return the private requests for pl created by
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "plCreatedBy")
	public Set<PrivateRequest> getPrivateRequestsForPlCreatedBy() {
		return this.privateRequestsForPlCreatedBy;
	}

	/**
	 * Sets the private requests for pl created by.
	 *
	 * @param privateRequestsForPlCreatedBy the new private requests for pl created by
	 */
	public void setPrivateRequestsForPlCreatedBy(
			Set<PrivateRequest> privateRequestsForPlCreatedBy) {
		this.privateRequestsForPlCreatedBy = privateRequestsForPlCreatedBy;
	}

	/**
	 * Gets the road activities for pl created by.
	 *
	 * @return the road activities for pl created by
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByPlCreatedBy")
	public Set<RoadActivity> getRoadActivitiesForPlCreatedBy() {
		return this.roadActivitiesForPlCreatedBy;
	}

	/**
	 * Sets the road activities for pl created by.
	 *
	 * @param roadActivitiesForPlCreatedBy the new road activities for pl created by
	 */
	public void setRoadActivitiesForPlCreatedBy(
			Set<RoadActivity> roadActivitiesForPlCreatedBy) {
		this.roadActivitiesForPlCreatedBy = roadActivitiesForPlCreatedBy;
	}

	/**
	 * Gets the purchase order statuses for updatedby.
	 *
	 * @return the purchase order statuses for updatedby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByUpdatedby")
	public Set<PurchaseOrderStatus> getPurchaseOrderStatusesForUpdatedby() {
		return this.purchaseOrderStatusesForUpdatedby;
	}

	/**
	 * Sets the purchase order statuses for updatedby.
	 *
	 * @param purchaseOrderStatusesForUpdatedby the new purchase order statuses for updatedby
	 */
	public void setPurchaseOrderStatusesForUpdatedby(
			Set<PurchaseOrderStatus> purchaseOrderStatusesForUpdatedby) {
		this.purchaseOrderStatusesForUpdatedby = purchaseOrderStatusesForUpdatedby;
	}

	/**
	 * Gets the private activities for im created by.
	 *
	 * @return the private activities for im created by
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByImCreatedBy")
	public Set<PrivateActivity> getPrivateActivitiesForImCreatedBy() {
		return this.privateActivitiesForImCreatedBy;
	}

	/**
	 * Sets the private activities for im created by.
	 *
	 * @param privateActivitiesForImCreatedBy the new private activities for im created by
	 */
	public void setPrivateActivitiesForImCreatedBy(
			Set<PrivateActivity> privateActivitiesForImCreatedBy) {
		this.privateActivitiesForImCreatedBy = privateActivitiesForImCreatedBy;
	}

	/**
	 * Gets the dp mngmt attaches for createdby.
	 *
	 * @return the dp mngmt attaches for createdby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedby")
	public Set<DpMngmtAttach> getDpMngmtAttachesForCreatedby() {
		return this.dpMngmtAttachesForCreatedby;
	}

	/**
	 * Sets the dp mngmt attaches for createdby.
	 *
	 * @param dpMngmtAttachesForCreatedby the new dp mngmt attaches for createdby
	 */
	public void setDpMngmtAttachesForCreatedby(
			Set<DpMngmtAttach> dpMngmtAttachesForCreatedby) {
		this.dpMngmtAttachesForCreatedby = dpMngmtAttachesForCreatedby;
	}

	/**
	 * Gets the ad languages for createdby.
	 *
	 * @return the ad languages for createdby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedby")
	public Set<AdLanguage> getAdLanguagesForCreatedby() {
		return this.adLanguagesForCreatedby;
	}

	/**
	 * Sets the ad languages for createdby.
	 *
	 * @param adLanguagesForCreatedby the new ad languages for createdby
	 */
	public void setAdLanguagesForCreatedby(
			Set<AdLanguage> adLanguagesForCreatedby) {
		this.adLanguagesForCreatedby = adLanguagesForCreatedby;
	}

	/**
	 * Gets the requisitions for updatedby.
	 *
	 * @return the requisitions for updatedby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByUpdatedby")
	public Set<Requisition> getRequisitionsForUpdatedby() {
		return this.requisitionsForUpdatedby;
	}

	/**
	 * Sets the requisitions for updatedby.
	 *
	 * @param requisitionsForUpdatedby the new requisitions for updatedby
	 */
	public void setRequisitionsForUpdatedby(
			Set<Requisition> requisitionsForUpdatedby) {
		this.requisitionsForUpdatedby = requisitionsForUpdatedby;
	}

	/**
	 * Gets the mer sub indicators.
	 *
	 * @return the mer sub indicators
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<MerSubIndicator> getMerSubIndicators() {
		return this.merSubIndicators;
	}

	/**
	 * Sets the mer sub indicators.
	 *
	 * @param merSubIndicators the new mer sub indicators
	 */
	public void setMerSubIndicators(Set<MerSubIndicator> merSubIndicators) {
		this.merSubIndicators = merSubIndicators;
	}

	/**
	 * Gets the requisition statuses for updatedby.
	 *
	 * @return the requisition statuses for updatedby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByUpdatedby")
	public Set<RequisitionStatus> getRequisitionStatusesForUpdatedby() {
		return this.requisitionStatusesForUpdatedby;
	}

	/**
	 * Sets the requisition statuses for updatedby.
	 *
	 * @param requisitionStatusesForUpdatedby the new requisition statuses for updatedby
	 */
	public void setRequisitionStatusesForUpdatedby(
			Set<RequisitionStatus> requisitionStatusesForUpdatedby) {
		this.requisitionStatusesForUpdatedby = requisitionStatusesForUpdatedby;
	}

	/**
	 * Gets the attendance records.
	 *
	 * @return the attendance records
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<AttendanceRecord> getAttendanceRecords() {
		return this.attendanceRecords;
	}

	/**
	 * Sets the attendance records.
	 *
	 * @param attendanceRecords the new attendance records
	 */
	public void setAttendanceRecords(Set<AttendanceRecord> attendanceRecords) {
		this.attendanceRecords = attendanceRecords;
	}

	/**
	 * Gets the bpartners for createdby.
	 *
	 * @return the bpartners for createdby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedby")
	public Set<Bpartner> getBpartnersForCreatedby() {
		return this.bpartnersForCreatedby;
	}

	/**
	 * Sets the bpartners for createdby.
	 *
	 * @param bpartnersForCreatedby the new bpartners for createdby
	 */
	public void setBpartnersForCreatedby(Set<Bpartner> bpartnersForCreatedby) {
		this.bpartnersForCreatedby = bpartnersForCreatedby;
	}

	/**
	 * Gets the activities.
	 *
	 * @return the activities
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<Activity> getActivities() {
		return this.activities;
	}

	/**
	 * Sets the activities.
	 *
	 * @param activities the new activities
	 */
	public void setActivities(Set<Activity> activities) {
		this.activities = activities;
	}

	/**
	 * Gets the doc categories for updatedby.
	 *
	 * @return the doc categories for updatedby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByUpdatedby")
	public Set<DocCategory> getDocCategoriesForUpdatedby() {
		return this.docCategoriesForUpdatedby;
	}

	/**
	 * Sets the doc categories for updatedby.
	 *
	 * @param docCategoriesForUpdatedby the new doc categories for updatedby
	 */
	public void setDocCategoriesForUpdatedby(
			Set<DocCategory> docCategoriesForUpdatedby) {
		this.docCategoriesForUpdatedby = docCategoriesForUpdatedby;
	}

	/**
	 * Gets the bpartner locations for createdby.
	 *
	 * @return the bpartner locations for createdby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedby")
	public Set<BpartnerLocation> getBpartnerLocationsForCreatedby() {
		return this.bpartnerLocationsForCreatedby;
	}

	/**
	 * Sets the bpartner locations for createdby.
	 *
	 * @param bpartnerLocationsForCreatedby the new bpartner locations for createdby
	 */
	public void setBpartnerLocationsForCreatedby(
			Set<BpartnerLocation> bpartnerLocationsForCreatedby) {
		this.bpartnerLocationsForCreatedby = bpartnerLocationsForCreatedby;
	}

	/**
	 * Gets the employees.
	 *
	 * @return the employees
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<Employee> getEmployees() {
		return this.employees;
	}

	/**
	 * Sets the employees.
	 *
	 * @param employees the new employees
	 */
	public void setEmployees(Set<Employee> employees) {
		this.employees = employees;
	}

	/**
	 * Gets the stand silviculture activities for pl created by.
	 *
	 * @return the stand silviculture activities for pl created by
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByPlCreatedBy")
	public Set<StandSilvicultureActivity> getStandSilvicultureActivitiesForPlCreatedBy() {
		return this.standSilvicultureActivitiesForPlCreatedBy;
	}

	/**
	 * Sets the stand silviculture activities for pl created by.
	 *
	 * @param standSilvicultureActivitiesForPlCreatedBy the new stand silviculture activities for pl created by
	 */
	public void setStandSilvicultureActivitiesForPlCreatedBy(
			Set<StandSilvicultureActivity> standSilvicultureActivitiesForPlCreatedBy) {
		this.standSilvicultureActivitiesForPlCreatedBy = standSilvicultureActivitiesForPlCreatedBy;
	}

	/**
	 * Gets the requisition items for updatedby.
	 *
	 * @return the requisition items for updatedby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByUpdatedby")
	public Set<RequisitionItem> getRequisitionItemsForUpdatedby() {
		return this.requisitionItemsForUpdatedby;
	}

	/**
	 * Sets the requisition items for updatedby.
	 *
	 * @param requisitionItemsForUpdatedby the new requisition items for updatedby
	 */
	public void setRequisitionItemsForUpdatedby(
			Set<RequisitionItem> requisitionItemsForUpdatedby) {
		this.requisitionItemsForUpdatedby = requisitionItemsForUpdatedby;
	}

	/**
	 * Gets the uom trls for createdby.
	 *
	 * @return the uom trls for createdby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedby")
	public Set<UomTrl> getUomTrlsForCreatedby() {
		return this.uomTrlsForCreatedby;
	}

	/**
	 * Sets the uom trls for createdby.
	 *
	 * @param uomTrlsForCreatedby the new uom trls for createdby
	 */
	public void setUomTrlsForCreatedby(Set<UomTrl> uomTrlsForCreatedby) {
		this.uomTrlsForCreatedby = uomTrlsForCreatedby;
	}

	/**
	 * Gets the stand silviculture activities for im created by.
	 *
	 * @return the stand silviculture activities for im created by
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByImCreatedBy")
	public Set<StandSilvicultureActivity> getStandSilvicultureActivitiesForImCreatedBy() {
		return this.standSilvicultureActivitiesForImCreatedBy;
	}

	/**
	 * Sets the stand silviculture activities for im created by.
	 *
	 * @param standSilvicultureActivitiesForImCreatedBy the new stand silviculture activities for im created by
	 */
	public void setStandSilvicultureActivitiesForImCreatedBy(
			Set<StandSilvicultureActivity> standSilvicultureActivitiesForImCreatedBy) {
		this.standSilvicultureActivitiesForImCreatedBy = standSilvicultureActivitiesForImCreatedBy;
	}

	/**
	 * Gets the mer indicators.
	 *
	 * @return the mer indicators
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<MerIndicator> getMerIndicators() {
		return this.merIndicators;
	}

	/**
	 * Sets the mer indicators.
	 *
	 * @param merIndicators the new mer indicators
	 */
	public void setMerIndicators(Set<MerIndicator> merIndicators) {
		this.merIndicators = merIndicators;
	}

	/**
	 * Gets the purchase order items for createdby.
	 *
	 * @return the purchase order items for createdby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByCreatedby")
	public Set<PurchaseOrderItem> getPurchaseOrderItemsForCreatedby() {
		return this.purchaseOrderItemsForCreatedby;
	}

	/**
	 * Sets the purchase order items for createdby.
	 *
	 * @param purchaseOrderItemsForCreatedby the new purchase order items for createdby
	 */
	public void setPurchaseOrderItemsForCreatedby(
			Set<PurchaseOrderItem> purchaseOrderItemsForCreatedby) {
		this.purchaseOrderItemsForCreatedby = purchaseOrderItemsForCreatedby;
	}

	/**
	 * Gets the purchase orders for updatedby.
	 *
	 * @return the purchase orders for updatedby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByUpdatedby")
	public Set<PurchaseOrder> getPurchaseOrdersForUpdatedby() {
		return this.purchaseOrdersForUpdatedby;
	}

	/**
	 * Sets the purchase orders for updatedby.
	 *
	 * @param purchaseOrdersForUpdatedby the new purchase orders for updatedby
	 */
	public void setPurchaseOrdersForUpdatedby(
			Set<PurchaseOrder> purchaseOrdersForUpdatedby) {
		this.purchaseOrdersForUpdatedby = purchaseOrdersForUpdatedby;
	}

	/**
	 * Gets the dp mngmt settingses for updatedby.
	 *
	 * @return the dp mngmt settingses for updatedby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByUpdatedby")
	public Set<DpMngmtSettings> getDpMngmtSettingsesForUpdatedby() {
		return this.dpMngmtSettingsesForUpdatedby;
	}

	/**
	 * Sets the dp mngmt settingses for updatedby.
	 *
	 * @param dpMngmtSettingsesForUpdatedby the new dp mngmt settingses for updatedby
	 */
	public void setDpMngmtSettingsesForUpdatedby(
			Set<DpMngmtSettings> dpMngmtSettingsesForUpdatedby) {
		this.dpMngmtSettingsesForUpdatedby = dpMngmtSettingsesForUpdatedby;
	}

	/**
	 * Gets the doc types for updatedby.
	 *
	 * @return the doc types for updatedby
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByUpdatedby")
	public Set<DocType> getDocTypesForUpdatedby() {
		return this.docTypesForUpdatedby;
	}

	/**
	 * Sets the doc types for updatedby.
	 *
	 * @param docTypesForUpdatedby the new doc types for updatedby
	 */
	public void setDocTypesForUpdatedby(Set<DocType> docTypesForUpdatedby) {
		this.docTypesForUpdatedby = docTypesForUpdatedby;
	}

	/**
	 * Gets the fiskos imports for changed by.
	 *
	 * @return the fiskos imports for changed by
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByChangedBy")
	public Set<FiskosImport> getFiskosImportsForChangedBy() {
		return this.fiskosImportsForChangedBy;
	}

	/**
	 * Sets the fiskos imports for changed by.
	 *
	 * @param fiskosImportsForChangedBy the new fiskos imports for changed by
	 */
	public void setFiskosImportsForChangedBy(
			Set<FiskosImport> fiskosImportsForChangedBy) {
		this.fiskosImportsForChangedBy = fiskosImportsForChangedBy;
	}

	/**
	 * Gets the mer ref sub projects.
	 *
	 * @return the mer ref sub projects
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<MerRefSubProject> getMerRefSubProjects() {
		return this.merRefSubProjects;
	}

	/**
	 * Sets the mer ref sub projects.
	 *
	 * @param merRefSubProjects the new mer ref sub projects
	 */
	public void setMerRefSubProjects(Set<MerRefSubProject> merRefSubProjects) {
		this.merRefSubProjects = merRefSubProjects;
	}

	/**
	 * Gets the seedling inventory PO ss for approved by.
	 *
	 * @return the seedling inventory PO ss for approved by
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByApprovedBy")
	public Set<SeedlingInventoryPOS> getSeedlingInventoryPOSsForApprovedBy() {
		return this.seedlingInventoryPOSsForApprovedBy;
	}

	/**
	 * Sets the seedling inventory PO ss for approved by.
	 *
	 * @param seedlingInventoryPOSsForApprovedBy the new seedling inventory PO ss for approved by
	 */
	public void setSeedlingInventoryPOSsForApprovedBy(
			Set<SeedlingInventoryPOS> seedlingInventoryPOSsForApprovedBy) {
		this.seedlingInventoryPOSsForApprovedBy = seedlingInventoryPOSsForApprovedBy;
	}

	/**
	 * Gets the private activities for pl created by.
	 *
	 * @return the private activities for pl created by
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByPlCreatedBy")
	public Set<PrivateActivity> getPrivateActivitiesForPlCreatedBy() {
		return this.privateActivitiesForPlCreatedBy;
	}

	/**
	 * Sets the private activities for pl created by.
	 *
	 * @param privateActivitiesForPlCreatedBy the new private activities for pl created by
	 */
	public void setPrivateActivitiesForPlCreatedBy(
			Set<PrivateActivity> privateActivitiesForPlCreatedBy) {
		this.privateActivitiesForPlCreatedBy = privateActivitiesForPlCreatedBy;
	}

	/**
	 * Gets the seedling inventory PO ss for changed by.
	 *
	 * @return the seedling inventory PO ss for changed by
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByChangedBy")
	public Set<SeedlingInventoryPOS> getSeedlingInventoryPOSsForChangedBy() {
		return this.seedlingInventoryPOSsForChangedBy;
	}

	/**
	 * Sets the seedling inventory PO ss for changed by.
	 *
	 * @param seedlingInventoryPOSsForChangedBy the new seedling inventory PO ss for changed by
	 */
	public void setSeedlingInventoryPOSsForChangedBy(
			Set<SeedlingInventoryPOS> seedlingInventoryPOSsForChangedBy) {
		this.seedlingInventoryPOSsForChangedBy = seedlingInventoryPOSsForChangedBy;
	}

	/**
	 * Gets the mer strategies.
	 *
	 * @return the mer strategies
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<MerStrategy> getMerStrategies() {
		return this.merStrategies;
	}

	/**
	 * Sets the mer strategies.
	 *
	 * @param merStrategies the new mer strategies
	 */
	public void setMerStrategies(Set<MerStrategy> merStrategies) {
		this.merStrategies = merStrategies;
	}

}
