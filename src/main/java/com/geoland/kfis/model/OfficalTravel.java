package com.geoland.kfis.model;

// Generated Feb 11, 2015 2:26:59 AM by Hibernate Tools 3.4.0.CR1

import com.geoland.framework.persistence.base.*;
import org.hibernate.annotations.Type;
import com.geoland.kfis.persistence.hibernate.usertypes.Travelstatus;
import com.geoland.kfis.persistence.hibernate.usertypes.Traveltype;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.annotations.GenericGenerator;

// TODO: Auto-generated Javadoc
/**
 * OfficalTravel generated by hbm2java.
 */
@Entity
@Table(name = "thrm_offical_travel", schema = "public")
public class OfficalTravel extends AbstractPersistentObject implements
		java.io.Serializable {
	
	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The id. */
	private Long id;
	
	/** The party by requested user id. */
	private Party partyByRequestedUserId;
	
	/** The party by created by. */
	private Party partyByCreatedBy;
	
	/** The employee. */
	private Employee employee;
	
	/** The party by approved user id. */
	private Party partyByApprovedUserId;
	
	/** The travel type. */
	private Traveltype travelType;
	
	/** The reimbursement expenses. */
	private boolean reimbursementExpenses;
	
	/** The from date. */
	private Date fromDate;
	
	/** The to date. */
	private Date toDate;
	
	/** The from destination. */
	private String fromDestination;
	
	/** The to destination. */
	private String toDestination;
	
	/** The reason. */
	private String reason;
	
	/** The days requested. */
	private Double daysRequested;
	
	/** The status. */
	private Travelstatus status;
	
	/** The requested date. */
	private Date requestedDate;
	
	/** The requested comments. */
	private String requestedComments;
	
	/** The days approved. */
	private Double daysApproved;
	
	/** The approved date. */
	private Date approvedDate;
	
	/** The approved comments. */
	private String approvedComments;
	
	/** The return date. */
	private Date returnDate;
	
	/** The days spent. */
	private Double daysSpent;
	
	/** The doc type. */
	private String docType;
	
	/** The doc name. */
	private String docName;
	
	/** The doc size. */
	private Long docSize;
	
	/** The doc. */
	private byte[] doc;
	
	/** The note. */
	private String note;
	
	/** The created date. */
	private Date createdDate;

	/**
	 * Instantiates a new offical travel.
	 */
	public OfficalTravel() {
	}

	/**
	 * Instantiates a new offical travel.
	 *
	 * @param partyByRequestedUserId the party by requested user id
	 * @param partyByCreatedBy the party by created by
	 * @param employee the employee
	 * @param travelType the travel type
	 * @param reimbursementExpenses the reimbursement expenses
	 * @param fromDate the from date
	 * @param toDate the to date
	 * @param fromDestination the from destination
	 * @param toDestination the to destination
	 * @param daysRequested the days requested
	 * @param status the status
	 * @param createdDate the created date
	 */
	public OfficalTravel(Party partyByRequestedUserId, Party partyByCreatedBy,
			Employee employee, Traveltype travelType,
			boolean reimbursementExpenses, Date fromDate, Date toDate,
			String fromDestination, String toDestination, Double daysRequested,
			Travelstatus status, Date createdDate) {
		this.partyByRequestedUserId = partyByRequestedUserId;
		this.partyByCreatedBy = partyByCreatedBy;
		this.employee = employee;
		this.travelType = travelType;
		this.reimbursementExpenses = reimbursementExpenses;
		this.fromDate = fromDate;
		this.toDate = toDate;
		this.fromDestination = fromDestination;
		this.toDestination = toDestination;
		this.daysRequested = daysRequested;
		this.status = status;
		this.createdDate = createdDate;
	}

	/**
	 * Instantiates a new offical travel.
	 *
	 * @param partyByRequestedUserId the party by requested user id
	 * @param partyByCreatedBy the party by created by
	 * @param employee the employee
	 * @param partyByApprovedUserId the party by approved user id
	 * @param travelType the travel type
	 * @param reimbursementExpenses the reimbursement expenses
	 * @param fromDate the from date
	 * @param toDate the to date
	 * @param fromDestination the from destination
	 * @param toDestination the to destination
	 * @param reason the reason
	 * @param daysRequested the days requested
	 * @param status the status
	 * @param requestedDate the requested date
	 * @param requestedComments the requested comments
	 * @param daysApproved the days approved
	 * @param approvedDate the approved date
	 * @param approvedComments the approved comments
	 * @param returnDate the return date
	 * @param daysSpent the days spent
	 * @param docType the doc type
	 * @param docName the doc name
	 * @param docSize the doc size
	 * @param doc the doc
	 * @param note the note
	 * @param createdDate the created date
	 */
	public OfficalTravel(Party partyByRequestedUserId, Party partyByCreatedBy,
			Employee employee, Party partyByApprovedUserId,
			Traveltype travelType, boolean reimbursementExpenses,
			Date fromDate, Date toDate, String fromDestination,
			String toDestination, String reason, Double daysRequested,
			Travelstatus status, Date requestedDate, String requestedComments,
			Double daysApproved, Date approvedDate, String approvedComments,
			Date returnDate, Double daysSpent, String docType, String docName,
			Long docSize, byte[] doc, String note, Date createdDate) {
		this.partyByRequestedUserId = partyByRequestedUserId;
		this.partyByCreatedBy = partyByCreatedBy;
		this.employee = employee;
		this.partyByApprovedUserId = partyByApprovedUserId;
		this.travelType = travelType;
		this.reimbursementExpenses = reimbursementExpenses;
		this.fromDate = fromDate;
		this.toDate = toDate;
		this.fromDestination = fromDestination;
		this.toDestination = toDestination;
		this.reason = reason;
		this.daysRequested = daysRequested;
		this.status = status;
		this.requestedDate = requestedDate;
		this.requestedComments = requestedComments;
		this.daysApproved = daysApproved;
		this.approvedDate = approvedDate;
		this.approvedComments = approvedComments;
		this.returnDate = returnDate;
		this.daysSpent = daysSpent;
		this.docType = docType;
		this.docName = docName;
		this.docSize = docSize;
		this.doc = doc;
		this.note = note;
		this.createdDate = createdDate;
	}

	/* (non-Javadoc)
	 * @see com.geoland.framework.persistence.base.AbstractPersistentObject#getId()
	 */
	@GenericGenerator(name = "generator", strategy = "increment")
	@Id
	@GeneratedValue(generator = "generator")
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	/* (non-Javadoc)
	 * @see com.geoland.framework.persistence.base.AbstractPersistentObject#setId(java.lang.Long)
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Gets the party by requested user id.
	 *
	 * @return the party by requested user id
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "requested_user_id", nullable = false)
	public Party getPartyByRequestedUserId() {
		return this.partyByRequestedUserId;
	}

	/**
	 * Sets the party by requested user id.
	 *
	 * @param partyByRequestedUserId the new party by requested user id
	 */
	public void setPartyByRequestedUserId(Party partyByRequestedUserId) {
		this.partyByRequestedUserId = partyByRequestedUserId;
	}

	/**
	 * Gets the party by created by.
	 *
	 * @return the party by created by
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "created_by", nullable = false)
	public Party getPartyByCreatedBy() {
		return this.partyByCreatedBy;
	}

	/**
	 * Sets the party by created by.
	 *
	 * @param partyByCreatedBy the new party by created by
	 */
	public void setPartyByCreatedBy(Party partyByCreatedBy) {
		this.partyByCreatedBy = partyByCreatedBy;
	}

	/**
	 * Gets the employee.
	 *
	 * @return the employee
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "employee_id", nullable = false)
	public Employee getEmployee() {
		return this.employee;
	}

	/**
	 * Sets the employee.
	 *
	 * @param employee the new employee
	 */
	public void setEmployee(Employee employee) {
		this.employee = employee;
	}

	/**
	 * Gets the party by approved user id.
	 *
	 * @return the party by approved user id
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "approved_user_id")
	public Party getPartyByApprovedUserId() {
		return this.partyByApprovedUserId;
	}

	/**
	 * Sets the party by approved user id.
	 *
	 * @param partyByApprovedUserId the new party by approved user id
	 */
	public void setPartyByApprovedUserId(Party partyByApprovedUserId) {
		this.partyByApprovedUserId = partyByApprovedUserId;
	}

	/**
	 * Gets the travel type.
	 *
	 * @return the travel type
	 */
	@Column(name = "travel_type", nullable = false, length = 2)
	@Type(type = "com.geoland.kfis.persistence.hibernate.usertypes.TraveltypeUserType")
	public Traveltype getTravelType() {
		return this.travelType;
	}

	/**
	 * Sets the travel type.
	 *
	 * @param travelType the new travel type
	 */
	public void setTravelType(Traveltype travelType) {
		this.travelType = travelType;
	}

	/**
	 * Checks if is reimbursement expenses.
	 *
	 * @return true, if is reimbursement expenses
	 */
	@Column(name = "reimbursement_expenses", nullable = false)
	public boolean isReimbursementExpenses() {
		return this.reimbursementExpenses;
	}

	/**
	 * Sets the reimbursement expenses.
	 *
	 * @param reimbursementExpenses the new reimbursement expenses
	 */
	public void setReimbursementExpenses(boolean reimbursementExpenses) {
		this.reimbursementExpenses = reimbursementExpenses;
	}

	/**
	 * Gets the from date.
	 *
	 * @return the from date
	 */
	@Temporal(TemporalType.DATE)
	@Column(name = "from_date", nullable = false, length = 13)
	public Date getFromDate() {
		return this.fromDate;
	}

	/**
	 * Sets the from date.
	 *
	 * @param fromDate the new from date
	 */
	public void setFromDate(Date fromDate) {
		this.fromDate = fromDate;
	}

	/**
	 * Gets the to date.
	 *
	 * @return the to date
	 */
	@Temporal(TemporalType.DATE)
	@Column(name = "to_date", nullable = false, length = 13)
	public Date getToDate() {
		return this.toDate;
	}

	/**
	 * Sets the to date.
	 *
	 * @param toDate the new to date
	 */
	public void setToDate(Date toDate) {
		this.toDate = toDate;
	}

	/**
	 * Gets the from destination.
	 *
	 * @return the from destination
	 */
	@Column(name = "from_destination", nullable = false, length = 150)
	public String getFromDestination() {
		return this.fromDestination;
	}

	/**
	 * Sets the from destination.
	 *
	 * @param fromDestination the new from destination
	 */
	public void setFromDestination(String fromDestination) {
		this.fromDestination = fromDestination;
	}

	/**
	 * Gets the to destination.
	 *
	 * @return the to destination
	 */
	@Column(name = "to_destination", nullable = false, length = 150)
	public String getToDestination() {
		return this.toDestination;
	}

	/**
	 * Sets the to destination.
	 *
	 * @param toDestination the new to destination
	 */
	public void setToDestination(String toDestination) {
		this.toDestination = toDestination;
	}

	/**
	 * Gets the reason.
	 *
	 * @return the reason
	 */
	@Column(name = "reason")
	public String getReason() {
		return this.reason;
	}

	/**
	 * Sets the reason.
	 *
	 * @param reason the new reason
	 */
	public void setReason(String reason) {
		this.reason = reason;
	}

	/**
	 * Gets the days requested.
	 *
	 * @return the days requested
	 */
	@Column(name = "days_requested", nullable = false, precision = 17, scale = 17)
	public Double getDaysRequested() {
		return this.daysRequested;
	}

	/**
	 * Sets the days requested.
	 *
	 * @param daysRequested the new days requested
	 */
	public void setDaysRequested(Double daysRequested) {
		this.daysRequested = daysRequested;
	}

	/**
	 * Gets the status.
	 *
	 * @return the status
	 */
	@Column(name = "status", nullable = false, length = 2)
	@Type(type = "com.geoland.kfis.persistence.hibernate.usertypes.TravelstatusUserType")
	public Travelstatus getStatus() {
		return this.status;
	}

	/**
	 * Sets the status.
	 *
	 * @param status the new status
	 */
	public void setStatus(Travelstatus status) {
		this.status = status;
	}

	/**
	 * Gets the requested date.
	 *
	 * @return the requested date
	 */
	@Temporal(TemporalType.DATE)
	@Column(name = "requested_date", length = 13)
	public Date getRequestedDate() {
		return this.requestedDate;
	}

	/**
	 * Sets the requested date.
	 *
	 * @param requestedDate the new requested date
	 */
	public void setRequestedDate(Date requestedDate) {
		this.requestedDate = requestedDate;
	}

	/**
	 * Gets the requested comments.
	 *
	 * @return the requested comments
	 */
	@Column(name = "requested_comments", length = 256)
	public String getRequestedComments() {
		return this.requestedComments;
	}

	/**
	 * Sets the requested comments.
	 *
	 * @param requestedComments the new requested comments
	 */
	public void setRequestedComments(String requestedComments) {
		this.requestedComments = requestedComments;
	}

	/**
	 * Gets the days approved.
	 *
	 * @return the days approved
	 */
	@Column(name = "days_approved", precision = 17, scale = 17)
	public Double getDaysApproved() {
		return this.daysApproved;
	}

	/**
	 * Sets the days approved.
	 *
	 * @param daysApproved the new days approved
	 */
	public void setDaysApproved(Double daysApproved) {
		this.daysApproved = daysApproved;
	}

	/**
	 * Gets the approved date.
	 *
	 * @return the approved date
	 */
	@Temporal(TemporalType.DATE)
	@Column(name = "approved_date", length = 13)
	public Date getApprovedDate() {
		return this.approvedDate;
	}

	/**
	 * Sets the approved date.
	 *
	 * @param approvedDate the new approved date
	 */
	public void setApprovedDate(Date approvedDate) {
		this.approvedDate = approvedDate;
	}

	/**
	 * Gets the approved comments.
	 *
	 * @return the approved comments
	 */
	@Column(name = "approved_comments", length = 256)
	public String getApprovedComments() {
		return this.approvedComments;
	}

	/**
	 * Sets the approved comments.
	 *
	 * @param approvedComments the new approved comments
	 */
	public void setApprovedComments(String approvedComments) {
		this.approvedComments = approvedComments;
	}

	/**
	 * Gets the return date.
	 *
	 * @return the return date
	 */
	@Temporal(TemporalType.DATE)
	@Column(name = "return_date", length = 13)
	public Date getReturnDate() {
		return this.returnDate;
	}

	/**
	 * Sets the return date.
	 *
	 * @param returnDate the new return date
	 */
	public void setReturnDate(Date returnDate) {
		this.returnDate = returnDate;
	}

	/**
	 * Gets the days spent.
	 *
	 * @return the days spent
	 */
	@Column(name = "days_spent", precision = 17, scale = 17)
	public Double getDaysSpent() {
		return this.daysSpent;
	}

	/**
	 * Sets the days spent.
	 *
	 * @param daysSpent the new days spent
	 */
	public void setDaysSpent(Double daysSpent) {
		this.daysSpent = daysSpent;
	}

	/**
	 * Gets the doc type.
	 *
	 * @return the doc type
	 */
	@Column(name = "doc_type", length = 100)
	public String getDocType() {
		return this.docType;
	}

	/**
	 * Sets the doc type.
	 *
	 * @param docType the new doc type
	 */
	public void setDocType(String docType) {
		this.docType = docType;
	}

	/**
	 * Gets the doc name.
	 *
	 * @return the doc name
	 */
	@Column(name = "doc_name", length = 100)
	public String getDocName() {
		return this.docName;
	}

	/**
	 * Sets the doc name.
	 *
	 * @param docName the new doc name
	 */
	public void setDocName(String docName) {
		this.docName = docName;
	}

	/**
	 * Gets the doc size.
	 *
	 * @return the doc size
	 */
	@Column(name = "doc_size")
	public Long getDocSize() {
		return this.docSize;
	}

	/**
	 * Sets the doc size.
	 *
	 * @param docSize the new doc size
	 */
	public void setDocSize(Long docSize) {
		this.docSize = docSize;
	}

	/**
	 * Gets the doc.
	 *
	 * @return the doc
	 */
	@Column(name = "doc")
	public byte[] getDoc() {
		return this.doc;
	}

	/**
	 * Sets the doc.
	 *
	 * @param doc the new doc
	 */
	public void setDoc(byte[] doc) {
		this.doc = doc;
	}

	/**
	 * Gets the note.
	 *
	 * @return the note
	 */
	@Column(name = "note")
	public String getNote() {
		return this.note;
	}

	/**
	 * Sets the note.
	 *
	 * @param note the new note
	 */
	public void setNote(String note) {
		this.note = note;
	}

	/**
	 * Gets the created date.
	 *
	 * @return the created date
	 */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_date", nullable = false, length = 29)
	public Date getCreatedDate() {
		return this.createdDate;
	}

	/**
	 * Sets the created date.
	 *
	 * @param createdDate the new created date
	 */
	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}

}
