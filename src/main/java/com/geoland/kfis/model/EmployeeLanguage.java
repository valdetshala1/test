package com.geoland.kfis.model;

// Generated Feb 11, 2015 2:26:59 AM by Hibernate Tools 3.4.0.CR1

import com.geoland.framework.persistence.base.*;
import org.hibernate.annotations.Type;
import com.geoland.kfis.persistence.hibernate.usertypes.Languagelevel;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import org.hibernate.annotations.GenericGenerator;

// TODO: Auto-generated Javadoc
/**
 * EmployeeLanguage generated by hbm2java.
 */
@Entity
@Table(name = "thrm_employee_language", schema = "public")
public class EmployeeLanguage extends AbstractPersistentObject implements
		java.io.Serializable {
	
	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The id. */
	private Long id;
	
	/** The employee. */
	private Employee employee;
	
	/** The language. */
	private Language language;
	
	/** The reading. */
	private Languagelevel reading;
	
	/** The speaking. */
	private Languagelevel speaking;
	
	/** The writing. */
	private Languagelevel writing;
	
	/** The understanding. */
	private Languagelevel understanding;

	/**
	 * Instantiates a new employee language.
	 */
	public EmployeeLanguage() {
	}

	/**
	 * Instantiates a new employee language.
	 *
	 * @param employee the employee
	 * @param language the language
	 * @param reading the reading
	 * @param speaking the speaking
	 * @param writing the writing
	 * @param understanding the understanding
	 */
	public EmployeeLanguage(Employee employee, Language language,
			Languagelevel reading, Languagelevel speaking,
			Languagelevel writing, Languagelevel understanding) {
		this.employee = employee;
		this.language = language;
		this.reading = reading;
		this.speaking = speaking;
		this.writing = writing;
		this.understanding = understanding;
	}

	/* (non-Javadoc)
	 * @see com.geoland.framework.persistence.base.AbstractPersistentObject#getId()
	 */
	@GenericGenerator(name = "generator", strategy = "increment")
	@Id
	@GeneratedValue(generator = "generator")
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	/* (non-Javadoc)
	 * @see com.geoland.framework.persistence.base.AbstractPersistentObject#setId(java.lang.Long)
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Gets the employee.
	 *
	 * @return the employee
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "employee_id", nullable = false)
	public Employee getEmployee() {
		return this.employee;
	}

	/**
	 * Sets the employee.
	 *
	 * @param employee the new employee
	 */
	public void setEmployee(Employee employee) {
		this.employee = employee;
	}

	/**
	 * Gets the language.
	 *
	 * @return the language
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "language_id", nullable = false)
	public Language getLanguage() {
		return this.language;
	}

	/**
	 * Sets the language.
	 *
	 * @param language the new language
	 */
	public void setLanguage(Language language) {
		this.language = language;
	}

	/**
	 * Gets the reading.
	 *
	 * @return the reading
	 */
	@Column(name = "reading", nullable = false, length = 3)
	@Type(type = "com.geoland.kfis.persistence.hibernate.usertypes.LanguagelevelUserType")
	public Languagelevel getReading() {
		return this.reading;
	}

	/**
	 * Sets the reading.
	 *
	 * @param reading the new reading
	 */
	public void setReading(Languagelevel reading) {
		this.reading = reading;
	}

	/**
	 * Gets the speaking.
	 *
	 * @return the speaking
	 */
	@Column(name = "speaking", nullable = false, length = 3)
	@Type(type = "com.geoland.kfis.persistence.hibernate.usertypes.LanguagelevelUserType")
	public Languagelevel getSpeaking() {
		return this.speaking;
	}

	/**
	 * Sets the speaking.
	 *
	 * @param speaking the new speaking
	 */
	public void setSpeaking(Languagelevel speaking) {
		this.speaking = speaking;
	}

	/**
	 * Gets the writing.
	 *
	 * @return the writing
	 */
	@Column(name = "writing", nullable = false, length = 3)
	@Type(type = "com.geoland.kfis.persistence.hibernate.usertypes.LanguagelevelUserType")
	public Languagelevel getWriting() {
		return this.writing;
	}

	/**
	 * Sets the writing.
	 *
	 * @param writing the new writing
	 */
	public void setWriting(Languagelevel writing) {
		this.writing = writing;
	}

	/**
	 * Gets the understanding.
	 *
	 * @return the understanding
	 */
	@Column(name = "understanding", nullable = false, length = 3)
	@Type(type = "com.geoland.kfis.persistence.hibernate.usertypes.LanguagelevelUserType")
	public Languagelevel getUnderstanding() {
		return this.understanding;
	}

	/**
	 * Sets the understanding.
	 *
	 * @param understanding the new understanding
	 */
	public void setUnderstanding(Languagelevel understanding) {
		this.understanding = understanding;
	}

}
